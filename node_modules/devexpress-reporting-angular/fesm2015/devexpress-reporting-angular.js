import { Component, Output, EventEmitter, Input, Renderer2, ViewChild, Inject, PLATFORM_ID, ContentChild, ViewEncapsulation, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { cleanNode, observable } from 'knockout';
import { Report } from 'devexpress-reporting/dx-webdocumentviewer';
import { Designer } from 'devexpress-reporting/dx-reportdesigner';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportViewerCallbacksComponent {
    constructor() {
        this.CustomizeElements = new EventEmitter();
        this.PreviewClick = new EventEmitter();
        this.EditingFieldChanged = new EventEmitter();
        this.DocumentReady = new EventEmitter();
        this.CustomizeExportOptions = new EventEmitter();
        this.CustomizeParameterEditors = new EventEmitter();
        this.CustomizeParameterLookUpSource = new EventEmitter();
        this.ParametersReset = new EventEmitter();
        this.ParametersSubmitted = new EventEmitter();
        this.CustomizeMenuActions = new EventEmitter();
        this.CustomizeLocalization = new EventEmitter();
        this.BeforeRender = new EventEmitter();
        this.OnServerError = new EventEmitter();
    }
}
DxReportViewerCallbacksComponent.decorators = [
    { type: Component, args: [{
                template: '',
                selector: 'dxrv-callbacks'
            },] },
];
DxReportViewerCallbacksComponent.propDecorators = {
    CustomizeElements: [{ type: Output }],
    PreviewClick: [{ type: Output }],
    EditingFieldChanged: [{ type: Output }],
    DocumentReady: [{ type: Output }],
    CustomizeExportOptions: [{ type: Output }],
    CustomizeParameterEditors: [{ type: Output }],
    CustomizeParameterLookUpSource: [{ type: Output }],
    ParametersReset: [{ type: Output }],
    ParametersSubmitted: [{ type: Output }],
    CustomizeMenuActions: [{ type: Output }],
    CustomizeLocalization: [{ type: Output }],
    BeforeRender: [{ type: Output }],
    OnServerError: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportViewerRequestOptionsComponent {
    constructor() {
        this.invokeAction = "/DXXRDV";
    }
}
DxReportViewerRequestOptionsComponent.decorators = [
    { type: Component, args: [{
                template: '',
                selector: 'dxrv-request-options'
            },] },
];
DxReportViewerRequestOptionsComponent.propDecorators = {
    invokeAction: [{ type: Input }],
    getLocalizationAction: [{ type: Input }],
    host: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
class DxReportingComponent {
    /**
     * @param {?} renderer
     * @param {?} platformId
     */
    constructor(renderer, platformId) {
        this.renderer = renderer;
        this.platformId = platformId;
        this.height = '800px';
        this.width = '100%';
        this.cssClass = '';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.callbacks = this.getCallbacks();
            /** @type {?} */
            const options = this.getControlOptions();
            /** @type {?} */
            var binding = this.getKoBinding(options);
            this.bindingSender = binding.sender;
            binding.applyBindings(this.control.nativeElement);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        cleanNode(this.control.nativeElement);
    }
    /**
     * @return {?}
     */
    getEventRaiser() {
        /** @type {?} */
        var component = this;
        return (eventName, args) => component.callbacks && component.callbacks[eventName] && component.callbacks[eventName].emit({ sender: component.bindingSender, args: args, component: component });
    }
}
/** @nocollapse */
DxReportingComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DxReportingComponent.propDecorators = {
    control: [{ type: ViewChild, args: ["control",] }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    cssClass: [{ type: Input }],
    rtl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportViewerMobileModeSettingsComponent {
}
DxReportViewerMobileModeSettingsComponent.decorators = [
    { type: Component, args: [{
                template: '',
                selector: 'dxrv-mobile-mode-settings'
            },] },
];
DxReportViewerMobileModeSettingsComponent.propDecorators = {
    readerMode: [{ type: Input }],
    animationEnabled: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportViewerRemoteSettingsComponent {
}
DxReportViewerRemoteSettingsComponent.decorators = [
    { type: Component, args: [{
                template: '',
                selector: 'dxrv-remote-settings'
            },] },
];
DxReportViewerRemoteSettingsComponent.propDecorators = {
    authToken: [{ type: Input }],
    serverUri: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportViewerTabPanelSettingsComponent {
}
DxReportViewerTabPanelSettingsComponent.decorators = [
    { type: Component, args: [{
                template: '',
                selector: 'dxrv-tabpanel-settings'
            },] },
];
DxReportViewerTabPanelSettingsComponent.propDecorators = {
    position: [{ type: Input }],
    width: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportViewerComponent extends DxReportingComponent {
    /**
     * @param {?} renderer
     * @param {?} platformId
     */
    constructor(renderer, platformId) {
        super(renderer, platformId);
        this.koReportUrl = observable();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    getKoBinding(options) {
        return new Report.Preview.JSReportViewerBinding(options, this.getEventRaiser());
    }
    /**
     * @return {?}
     */
    getCallbacks() {
        return this.callbacksComponent;
    }
    /**
     * @return {?}
     */
    getControlOptions() {
        return {
            rtl: this.rtl,
            isMobile: this.isMobile,
            reportUrl: this.koReportUrl,
            requestOptions: this.requestOptionsComponent,
            mobileModeSettings: this.mobileModeSettingsComponent,
            remoteSettings: this.remoteSettingsComponent,
            tabPanelSettings: this.tabPanelSettingsComponent,
            callbacks: {}
        };
    }
    /**
     * @return {?}
     */
    GetPreviewModel() {
        return this.bindingSender.GetPreviewModel();
    }
    /**
     * @return {?}
     */
    get reportUrl() {
        return this.koReportUrl();
    }
    /**
     * @param {?} reportUrl
     * @return {?}
     */
    set reportUrl(reportUrl) {
        this.koReportUrl(reportUrl);
    }
}
DxReportViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'dx-report-viewer',
                encapsulation: ViewEncapsulation.None,
                template: `<div #control [ngClass]="cssClass" [ngStyle]="{'width': width, 'height': height }">
  <div data-bind="dxReportViewer: $data"></div>
</div>`,
                styles: []
            },] },
];
/** @nocollapse */
DxReportViewerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DxReportViewerComponent.propDecorators = {
    requestOptionsComponent: [{ type: ContentChild, args: [DxReportViewerRequestOptionsComponent,] }],
    callbacksComponent: [{ type: ContentChild, args: [DxReportViewerCallbacksComponent,] }],
    mobileModeSettingsComponent: [{ type: ContentChild, args: [DxReportViewerMobileModeSettingsComponent,] }],
    remoteSettingsComponent: [{ type: ContentChild, args: [DxReportViewerRemoteSettingsComponent,] }],
    tabPanelSettingsComponent: [{ type: ContentChild, args: [DxReportViewerTabPanelSettingsComponent,] }],
    isMobile: [{ type: Input }],
    reportUrl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportViewerModule {
}
DxReportViewerModule.decorators = [
    { type: NgModule, args: [{
                id: "DxReportViewerModule",
                imports: [CommonModule],
                declarations: [
                    DxReportViewerComponent,
                    DxReportViewerCallbacksComponent,
                    DxReportViewerMobileModeSettingsComponent,
                    DxReportViewerRemoteSettingsComponent,
                    DxReportViewerRequestOptionsComponent,
                    DxReportViewerTabPanelSettingsComponent
                ],
                exports: [
                    DxReportViewerComponent,
                    DxReportViewerCallbacksComponent,
                    DxReportViewerMobileModeSettingsComponent,
                    DxReportViewerRemoteSettingsComponent,
                    DxReportViewerRequestOptionsComponent,
                    DxReportViewerTabPanelSettingsComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportDesignerRequestOptionsComponent {
}
DxReportDesignerRequestOptionsComponent.decorators = [
    { type: Component, args: [{
                template: '',
                selector: 'dxrd-request-options'
            },] },
];
DxReportDesignerRequestOptionsComponent.propDecorators = {
    getDesignerModelAction: [{ type: Input }],
    getLocalizationAction: [{ type: Input }],
    host: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportDesignerCallbacksComponent {
    constructor() {
        this.CustomizeElements = new EventEmitter();
        this.ExitDesigner = new EventEmitter();
        this.ReportSaving = new EventEmitter();
        this.ReportSaved = new EventEmitter();
        this.ReportOpened = new EventEmitter();
        this.ReportOpening = new EventEmitter();
        this.TabChanged = new EventEmitter();
        this.ComponentAdded = new EventEmitter();
        this.CustomizeParameterEditors = new EventEmitter();
        this.CustomizeSaveDialog = new EventEmitter();
        this.CustomizeOpenDialog = new EventEmitter();
        this.CustomizeToolbox = new EventEmitter();
        this.CustomizeFieldListActions = new EventEmitter();
        this.CustomizeMenuActions = new EventEmitter();
        this.CustomizeLocalization = new EventEmitter();
        this.BeforeRender = new EventEmitter();
        this.OnServerError = new EventEmitter();
        this.PreviewClick = new EventEmitter();
        this.PreviewCustomizeElements = new EventEmitter();
        this.PreviewCustomizeMenuActions = new EventEmitter();
        this.PreviewEditingFieldChanged = new EventEmitter();
        this.PreviewDocumentReady = new EventEmitter();
        this.PreviewParametersReset = new EventEmitter();
        this.PreviewCustomizeExportOptions = new EventEmitter();
        this.ParametersSubmitted = new EventEmitter();
    }
}
DxReportDesignerCallbacksComponent.decorators = [
    { type: Component, args: [{
                template: '',
                selector: 'dxrd-callbacks'
            },] },
];
DxReportDesignerCallbacksComponent.propDecorators = {
    CustomizeElements: [{ type: Output }],
    ExitDesigner: [{ type: Output }],
    ReportSaving: [{ type: Output }],
    ReportSaved: [{ type: Output }],
    ReportOpened: [{ type: Output }],
    ReportOpening: [{ type: Output }],
    TabChanged: [{ type: Output }],
    ComponentAdded: [{ type: Output }],
    CustomizeParameterEditors: [{ type: Output }],
    CustomizeSaveDialog: [{ type: Output }],
    CustomizeOpenDialog: [{ type: Output }],
    CustomizeToolbox: [{ type: Output }],
    CustomizeFieldListActions: [{ type: Output }],
    CustomizeMenuActions: [{ type: Output }],
    CustomizeLocalization: [{ type: Output }],
    BeforeRender: [{ type: Output }],
    OnServerError: [{ type: Output }],
    PreviewClick: [{ type: Output }],
    PreviewCustomizeElements: [{ type: Output }],
    PreviewCustomizeMenuActions: [{ type: Output }],
    PreviewEditingFieldChanged: [{ type: Output }],
    PreviewDocumentReady: [{ type: Output }],
    PreviewParametersReset: [{ type: Output }],
    PreviewCustomizeExportOptions: [{ type: Output }],
    ParametersSubmitted: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportDesignerComponent extends DxReportingComponent {
    /**
     * @param {?} renderer
     * @param {?} platformId
     */
    constructor(renderer, platformId) {
        super(renderer, platformId);
        this.koReportUrl = observable();
    }
    /**
     * @return {?}
     */
    getCallbacks() {
        return this.callbacksComponent;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    getKoBinding(options) {
        return new Designer.Report.JSReportDesignerBinding(options, this.getEventRaiser());
    }
    /**
     * @return {?}
     */
    getControlOptions() {
        return {
            allowMDI: this.allowMDI,
            reportUrl: this.koReportUrl,
            requestOptions: this.requestOptions,
            callbacks: { designer: {}, preview: {} }
        };
    }
    /**
     * @return {?}
     */
    GetDesignerModel() {
        return this.bindingSender.GetDesignerModel();
    }
    /**
     * @return {?}
     */
    GetPreviewModel() {
        return this.bindingSender.GetPreviewModel();
    }
    /**
     * @return {?}
     */
    get reportUrl() {
        return this.koReportUrl();
    }
    /**
     * @param {?} reportUrl
     * @return {?}
     */
    set reportUrl(reportUrl) {
        this.koReportUrl(reportUrl);
    }
}
DxReportDesignerComponent.decorators = [
    { type: Component, args: [{
                selector: 'dx-report-designer',
                encapsulation: ViewEncapsulation.None,
                template: `<div #control [ngClass]="cssClass" [ngStyle]="{'width': width, 'height': height }">
  <div data-bind="dxReportDesigner: $data"></div>
</div>`,
                styles: []
            },] },
];
/** @nocollapse */
DxReportDesignerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DxReportDesignerComponent.propDecorators = {
    requestOptions: [{ type: ContentChild, args: [DxReportDesignerRequestOptionsComponent,] }],
    callbacksComponent: [{ type: ContentChild, args: [DxReportDesignerCallbacksComponent,] }],
    allowMDI: [{ type: Input }],
    reportUrl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DxReportDesignerModule {
}
DxReportDesignerModule.decorators = [
    { type: NgModule, args: [{
                id: "DxReportDesignerModule",
                imports: [CommonModule],
                declarations: [
                    DxReportDesignerCallbacksComponent,
                    DxReportDesignerRequestOptionsComponent,
                    DxReportDesignerComponent
                ],
                exports: [
                    DxReportDesignerCallbacksComponent,
                    DxReportDesignerRequestOptionsComponent,
                    DxReportDesignerComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { DxReportViewerModule, DxReportDesignerModule, DxReportDesignerComponent, DxReportViewerComponent, DxReportDesignerCallbacksComponent as ɵg, DxReportDesignerRequestOptionsComponent as ɵh, DxReportViewerCallbacksComponent as ɵc, DxReportViewerMobileModeSettingsComponent as ɵd, DxReportViewerRemoteSettingsComponent as ɵe, DxReportViewerRequestOptionsComponent as ɵb, DxReportViewerTabPanelSettingsComponent as ɵf, DxReportingComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,