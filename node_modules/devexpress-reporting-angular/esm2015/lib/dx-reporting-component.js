/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Renderer2, ElementRef, ViewChild, Input, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as ko from "knockout";
/**
 * @abstract
 * @template T
 */
export class DxReportingComponent {
    /**
     * @param {?} renderer
     * @param {?} platformId
     */
    constructor(renderer, platformId) {
        this.renderer = renderer;
        this.platformId = platformId;
        this.height = '800px';
        this.width = '100%';
        this.cssClass = '';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.callbacks = this.getCallbacks();
            /** @type {?} */
            const options = this.getControlOptions();
            /** @type {?} */
            var binding = this.getKoBinding(options);
            this.bindingSender = binding.sender;
            binding.applyBindings(this.control.nativeElement);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        ko.cleanNode(this.control.nativeElement);
    }
    /**
     * @return {?}
     */
    getEventRaiser() {
        /** @type {?} */
        var component = this;
        return (eventName, args) => component.callbacks && component.callbacks[eventName] && component.callbacks[eventName].emit({ sender: component.bindingSender, args: args, component: component });
    }
}
/** @nocollapse */
DxReportingComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DxReportingComponent.propDecorators = {
    control: [{ type: ViewChild, args: ["control",] }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    cssClass: [{ type: Input }],
    rtl: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DxReportingComponent.prototype.bindingSender;
    /** @type {?} */
    DxReportingComponent.prototype.callbacks;
    /** @type {?} */
    DxReportingComponent.prototype.control;
    /** @type {?} */
    DxReportingComponent.prototype.height;
    /** @type {?} */
    DxReportingComponent.prototype.width;
    /** @type {?} */
    DxReportingComponent.prototype.cssClass;
    /** @type {?} */
    DxReportingComponent.prototype.rtl;
    /** @type {?} */
    DxReportingComponent.prototype.renderer;
    /** @type {?} */
    DxReportingComponent.prototype.platformId;
    /**
     * @abstract
     * @return {?}
     */
    DxReportingComponent.prototype.getControlOptions = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DxReportingComponent.prototype.getCallbacks = function () { };
    /**
     * @abstract
     * @param {?} options
     * @return {?}
     */
    DxReportingComponent.prototype.getKoBinding = function (options) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHgtcmVwb3J0aW5nLWNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZHgtcmVwb3J0aW5nLWNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN2SCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFFL0IsTUFBTSxPQUFnQixvQkFBb0I7Ozs7O0lBTXhDLFlBQW9CLFFBQW1CLEVBQStCLFVBQWtCO1FBQXBFLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBK0IsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQXVCL0UsV0FBTSxHQUFXLE9BQU8sQ0FBQztRQUN6QixVQUFLLEdBQVcsTUFBTSxDQUFDO1FBQ3ZCLGFBQVEsR0FBVyxFQUFFLENBQUM7SUF6QjZELENBQUM7Ozs7SUFLN0YsZUFBZTtRQUNiLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOztrQkFDL0IsT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRTs7Z0JBQ3BDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUN4QyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDcEMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7OztJQUNELFdBQVc7UUFDVCxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELGNBQWM7O1lBQ1IsU0FBUyxHQUFHLElBQUk7UUFDcEIsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFLLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDbk0sQ0FBQzs7OztZQS9CcUIsU0FBUztZQVVtRCxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVzs7O3NCQUgzRCxTQUFTLFNBQUMsU0FBUztxQkEwQm5CLEtBQUs7b0JBQ0wsS0FBSzt1QkFDTCxLQUFLO2tCQUNMLEtBQUs7Ozs7SUEvQk4sNkNBQW1COztJQUNuQix5Q0FBZTs7SUFDZix1Q0FDb0I7O0lBeUJwQixzQ0FBa0M7O0lBQ2xDLHFDQUFnQzs7SUFDaEMsd0NBQStCOztJQUMvQixtQ0FBc0I7O0lBMUJWLHdDQUEyQjs7SUFBRSwwQ0FBK0M7Ozs7O0lBQ3hGLG1FQUFnQzs7Ozs7SUFDaEMsOERBQTZCOzs7Ozs7SUFDN0IscUVBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBWaWV3Q2hpbGQsIElucHV0LCBJbmplY3QsIFBMQVRGT1JNX0lELCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCAqIGFzIGtvIGZyb20gXCJrbm9ja291dFwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHhSZXBvcnRpbmdDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBiaW5kaW5nU2VuZGVyOiBhbnk7XG4gIGNhbGxiYWNrczogYW55O1xuICBAVmlld0NoaWxkKFwiY29udHJvbFwiKVxuICBjb250cm9sOiBFbGVtZW50UmVmO1xuICBcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCkgeyB9XG4gIGFic3RyYWN0IGdldENvbnRyb2xPcHRpb25zKCk6IFQ7XG4gIGFic3RyYWN0IGdldENhbGxiYWNrcygpOiBhbnk7XG4gIGFic3RyYWN0IGdldEtvQmluZGluZyhvcHRpb25zOiBUKTogYW55O1xuICBcbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrcyA9IHRoaXMuZ2V0Q2FsbGJhY2tzKCk7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRDb250cm9sT3B0aW9ucygpO1xuICAgICAgdmFyIGJpbmRpbmcgPSB0aGlzLmdldEtvQmluZGluZyhvcHRpb25zKTtcbiAgICAgIHRoaXMuYmluZGluZ1NlbmRlciA9IGJpbmRpbmcuc2VuZGVyO1xuICAgICAgYmluZGluZy5hcHBseUJpbmRpbmdzKHRoaXMuY29udHJvbC5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAga28uY2xlYW5Ob2RlKHRoaXMuY29udHJvbC5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIGdldEV2ZW50UmFpc2VyKCkge1xuICAgIHZhciBjb21wb25lbnQgPSB0aGlzO1xuICAgIHJldHVybiAoZXZlbnROYW1lLCBhcmdzPykgPT4gY29tcG9uZW50LmNhbGxiYWNrcyAmJiBjb21wb25lbnQuY2FsbGJhY2tzW2V2ZW50TmFtZV0gJiYgY29tcG9uZW50LmNhbGxiYWNrc1tldmVudE5hbWVdLmVtaXQoeyBzZW5kZXI6IGNvbXBvbmVudC5iaW5kaW5nU2VuZGVyLCBhcmdzOiBhcmdzLCBjb21wb25lbnQ6IGNvbXBvbmVudCB9KTtcbiAgfVxuXG4gIEBJbnB1dCgpIGhlaWdodDogc3RyaW5nID0gJzgwMHB4JztcbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZyA9ICcxMDAlJztcbiAgQElucHV0KCkgY3NzQ2xhc3M6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBydGw6IGJvb2xlYW47XG59XG4iXX0=