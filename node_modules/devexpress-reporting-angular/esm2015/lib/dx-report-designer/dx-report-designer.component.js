/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Renderer2, ContentChild, Inject, PLATFORM_ID, ViewEncapsulation } from '@angular/core';
import * as ko from 'knockout';
import { Designer } from "devexpress-reporting/dx-reportdesigner";
import { DxReportingComponent } from '../dx-reporting-component';
import { DxReportDesignerRequestOptionsComponent } from './dxrd-request-options';
import { DxReportDesignerCallbacksComponent } from './dxrd-callbacks';
export class DxReportDesignerComponent extends DxReportingComponent {
    /**
     * @param {?} renderer
     * @param {?} platformId
     */
    constructor(renderer, platformId) {
        super(renderer, platformId);
        this.koReportUrl = ko.observable();
    }
    /**
     * @return {?}
     */
    getCallbacks() {
        return this.callbacksComponent;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    getKoBinding(options) {
        return new Designer.Report.JSReportDesignerBinding(options, this.getEventRaiser());
    }
    /**
     * @return {?}
     */
    getControlOptions() {
        return {
            allowMDI: this.allowMDI,
            reportUrl: this.koReportUrl,
            requestOptions: this.requestOptions,
            callbacks: { designer: {}, preview: {} }
        };
    }
    /**
     * @return {?}
     */
    GetDesignerModel() {
        return this.bindingSender.GetDesignerModel();
    }
    /**
     * @return {?}
     */
    GetPreviewModel() {
        return this.bindingSender.GetPreviewModel();
    }
    /**
     * @return {?}
     */
    get reportUrl() {
        return this.koReportUrl();
    }
    /**
     * @param {?} reportUrl
     * @return {?}
     */
    set reportUrl(reportUrl) {
        this.koReportUrl(reportUrl);
    }
}
DxReportDesignerComponent.decorators = [
    { type: Component, args: [{
                selector: 'dx-report-designer',
                encapsulation: ViewEncapsulation.None,
                template: `<div #control [ngClass]="cssClass" [ngStyle]="{'width': width, 'height': height }">
  <div data-bind="dxReportDesigner: $data"></div>
</div>`,
                styles: []
            },] },
];
/** @nocollapse */
DxReportDesignerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DxReportDesignerComponent.propDecorators = {
    requestOptions: [{ type: ContentChild, args: [DxReportDesignerRequestOptionsComponent,] }],
    callbacksComponent: [{ type: ContentChild, args: [DxReportDesignerCallbacksComponent,] }],
    allowMDI: [{ type: Input }],
    reportUrl: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DxReportDesignerComponent.prototype.koReportUrl;
    /** @type {?} */
    DxReportDesignerComponent.prototype.requestOptions;
    /** @type {?} */
    DxReportDesignerComponent.prototype.callbacksComponent;
    /** @type {?} */
    DxReportDesignerComponent.prototype.allowMDI;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHgtcmVwb3J0LWRlc2lnbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZHgtcmVwb3J0LWRlc2lnbmVyL2R4LXJlcG9ydC1kZXNpZ25lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMvQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDbEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFakUsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDakYsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFVdEUsTUFBTSxPQUFPLHlCQUEwQixTQUFRLG9CQUF5Qjs7Ozs7SUFTdEUsWUFBWSxRQUFtQixFQUF1QixVQUFrQjtRQUN0RSxLQUFLLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBVDlCLGdCQUFXLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBVTlCLENBQUM7Ozs7SUFDRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFDRCxZQUFZLENBQUMsT0FBWTtRQUN2QixPQUFPLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDckYsQ0FBQzs7OztJQUNELGlCQUFpQjtRQUNmLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzNCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztZQUNuQyxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7U0FDekMsQ0FBQztJQUNKLENBQUM7Ozs7SUFFRCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM5QyxDQUFDOzs7O0lBR0QsSUFDSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFDRCxJQUFJLFNBQVMsQ0FBQyxTQUFpQjtRQUM3QixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7OztZQWxERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFFBQVEsRUFBRTs7T0FFTDtnQkFDTCxNQUFNLEVBQUUsRUFBRTthQUNYOzs7O1lBZjBCLFNBQVM7WUF5QmdDLE1BQU0sdUJBQXRDLE1BQU0sU0FBQyxXQUFXOzs7NkJBTm5ELFlBQVksU0FBQyx1Q0FBdUM7aUNBR3BELFlBQVksU0FBQyxrQ0FBa0M7dUJBNEIvQyxLQUFLO3dCQUVMLEtBQUs7Ozs7SUFuQ04sZ0RBQThCOztJQUU5QixtREFDd0Q7O0lBRXhELHVEQUN1RDs7SUEyQnZELDZDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFJlbmRlcmVyMiwgQ29udGVudENoaWxkLCBJbmplY3QsIFBMQVRGT1JNX0lELCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMga28gZnJvbSAna25vY2tvdXQnO1xuaW1wb3J0IHsgRGVzaWduZXIgfSBmcm9tIFwiZGV2ZXhwcmVzcy1yZXBvcnRpbmcvZHgtcmVwb3J0ZGVzaWduZXJcIjtcbmltcG9ydCB7IER4UmVwb3J0aW5nQ29tcG9uZW50IH0gZnJvbSAnLi4vZHgtcmVwb3J0aW5nLWNvbXBvbmVudCc7XG5cbmltcG9ydCB7IER4UmVwb3J0RGVzaWduZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vZHhyZC1yZXF1ZXN0LW9wdGlvbnMnO1xuaW1wb3J0IHsgRHhSZXBvcnREZXNpZ25lckNhbGxiYWNrc0NvbXBvbmVudCB9IGZyb20gJy4vZHhyZC1jYWxsYmFja3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1yZXBvcnQtZGVzaWduZXInLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICB0ZW1wbGF0ZTogYDxkaXYgI2NvbnRyb2wgW25nQ2xhc3NdPVwiY3NzQ2xhc3NcIiBbbmdTdHlsZV09XCJ7J3dpZHRoJzogd2lkdGgsICdoZWlnaHQnOiBoZWlnaHQgfVwiPlxuICA8ZGl2IGRhdGEtYmluZD1cImR4UmVwb3J0RGVzaWduZXI6ICRkYXRhXCI+PC9kaXY+XG48L2Rpdj5gLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0RGVzaWduZXJDb21wb25lbnQgZXh0ZW5kcyBEeFJlcG9ydGluZ0NvbXBvbmVudDxhbnk+IHtcbiAga29SZXBvcnRVcmwgPSBrby5vYnNlcnZhYmxlKCk7XG5cbiAgQENvbnRlbnRDaGlsZChEeFJlcG9ydERlc2lnbmVyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQpXG4gIHJlcXVlc3RPcHRpb25zOiBEeFJlcG9ydERlc2lnbmVyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQ7XG5cbiAgQENvbnRlbnRDaGlsZChEeFJlcG9ydERlc2lnbmVyQ2FsbGJhY2tzQ29tcG9uZW50KVxuICBjYWxsYmFja3NDb21wb25lbnQ6IER4UmVwb3J0RGVzaWduZXJDYWxsYmFja3NDb21wb25lbnQ7XG4gIFxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QpIHsgXG4gICAgc3VwZXIocmVuZGVyZXIsIHBsYXRmb3JtSWQpO1xuICB9XG4gIGdldENhbGxiYWNrcygpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsYmFja3NDb21wb25lbnQ7XG4gIH1cbiAgZ2V0S29CaW5kaW5nKG9wdGlvbnM6IGFueSkge1xuICAgIHJldHVybiBuZXcgRGVzaWduZXIuUmVwb3J0LkpTUmVwb3J0RGVzaWduZXJCaW5kaW5nKG9wdGlvbnMsIHRoaXMuZ2V0RXZlbnRSYWlzZXIoKSk7XG4gIH1cbiAgZ2V0Q29udHJvbE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFsbG93TURJOiB0aGlzLmFsbG93TURJLFxuICAgICAgcmVwb3J0VXJsOiB0aGlzLmtvUmVwb3J0VXJsLFxuICAgICAgcmVxdWVzdE9wdGlvbnM6IHRoaXMucmVxdWVzdE9wdGlvbnMsXG4gICAgICBjYWxsYmFja3M6IHsgZGVzaWduZXI6IHt9LCBwcmV2aWV3OiB7fSB9XG4gICAgfTtcbiAgfVxuXG4gIEdldERlc2lnbmVyTW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ1NlbmRlci5HZXREZXNpZ25lck1vZGVsKCk7XG4gIH1cblxuICBHZXRQcmV2aWV3TW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ1NlbmRlci5HZXRQcmV2aWV3TW9kZWwoKTtcbiAgfVxuICBASW5wdXQoKSBhbGxvd01EST86IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgZ2V0IHJlcG9ydFVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5rb1JlcG9ydFVybCgpO1xuICB9XG4gIHNldCByZXBvcnRVcmwocmVwb3J0VXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmtvUmVwb3J0VXJsKHJlcG9ydFVybCk7XG4gIH1cbn1cbiJdfQ==