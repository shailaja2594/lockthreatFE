/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Renderer2, ContentChild, Inject, PLATFORM_ID, ViewEncapsulation } from '@angular/core';
import * as ko from 'knockout';
import { Report } from "devexpress-reporting/dx-webdocumentviewer";
import { DxReportingComponent } from '../dx-reporting-component';
import { DxReportViewerRequestOptionsComponent } from './dxrv-request-options';
import { DxReportViewerCallbacksComponent } from './dxrv-callbacks';
import { DxReportViewerMobileModeSettingsComponent } from './dxrv-mobile-mode-settings.component';
import { DxReportViewerRemoteSettingsComponent } from './dxrv-remote-settings.component';
import { DxReportViewerTabPanelSettingsComponent } from './dxrv-tabpanel-settings.component';
export class DxReportViewerComponent extends DxReportingComponent {
    /**
     * @param {?} renderer
     * @param {?} platformId
     */
    constructor(renderer, platformId) {
        super(renderer, platformId);
        this.koReportUrl = ko.observable();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    getKoBinding(options) {
        return new Report.Preview.JSReportViewerBinding(options, this.getEventRaiser());
    }
    /**
     * @return {?}
     */
    getCallbacks() {
        return this.callbacksComponent;
    }
    /**
     * @return {?}
     */
    getControlOptions() {
        return {
            rtl: this.rtl,
            isMobile: this.isMobile,
            reportUrl: this.koReportUrl,
            requestOptions: this.requestOptionsComponent,
            mobileModeSettings: this.mobileModeSettingsComponent,
            remoteSettings: this.remoteSettingsComponent,
            tabPanelSettings: this.tabPanelSettingsComponent,
            callbacks: {}
        };
    }
    /**
     * @return {?}
     */
    GetPreviewModel() {
        return this.bindingSender.GetPreviewModel();
    }
    /**
     * @return {?}
     */
    get reportUrl() {
        return this.koReportUrl();
    }
    /**
     * @param {?} reportUrl
     * @return {?}
     */
    set reportUrl(reportUrl) {
        this.koReportUrl(reportUrl);
    }
}
DxReportViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'dx-report-viewer',
                encapsulation: ViewEncapsulation.None,
                template: `<div #control [ngClass]="cssClass" [ngStyle]="{'width': width, 'height': height }">
  <div data-bind="dxReportViewer: $data"></div>
</div>`,
                styles: []
            },] },
];
/** @nocollapse */
DxReportViewerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DxReportViewerComponent.propDecorators = {
    requestOptionsComponent: [{ type: ContentChild, args: [DxReportViewerRequestOptionsComponent,] }],
    callbacksComponent: [{ type: ContentChild, args: [DxReportViewerCallbacksComponent,] }],
    mobileModeSettingsComponent: [{ type: ContentChild, args: [DxReportViewerMobileModeSettingsComponent,] }],
    remoteSettingsComponent: [{ type: ContentChild, args: [DxReportViewerRemoteSettingsComponent,] }],
    tabPanelSettingsComponent: [{ type: ContentChild, args: [DxReportViewerTabPanelSettingsComponent,] }],
    isMobile: [{ type: Input }],
    reportUrl: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DxReportViewerComponent.prototype.koReportUrl;
    /** @type {?} */
    DxReportViewerComponent.prototype.requestOptionsComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.callbacksComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.mobileModeSettingsComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.remoteSettingsComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.tabPanelSettingsComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.isMobile;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHgtcmVwb3J0LXZpZXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kZXZleHByZXNzLXJlcG9ydGluZy1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2R4LXJlcG9ydC12aWV3ZXIvZHgtcmVwb3J0LXZpZXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMvQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDbkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFakUsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEUsT0FBTyxFQUFFLHlDQUF5QyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDbEcsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDekYsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFVN0YsTUFBTSxPQUFPLHVCQUF3QixTQUFRLG9CQUF5Qjs7Ozs7SUFrQnBFLFlBQVksUUFBbUIsRUFBdUIsVUFBa0I7UUFDdEUsS0FBSyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQWxCOUIsZ0JBQVcsR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7SUFtQjlCLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLE9BQVk7UUFDdkIsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7Ozs7SUFDRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDakMsQ0FBQzs7OztJQUNELGlCQUFpQjtRQUNmLE9BQU87WUFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzNCLGNBQWMsRUFBRSxJQUFJLENBQUMsdUJBQXVCO1lBQzVDLGtCQUFrQixFQUFFLElBQUksQ0FBQywyQkFBMkI7WUFDcEQsY0FBYyxFQUFFLElBQUksQ0FBQyx1QkFBdUI7WUFDNUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLHlCQUF5QjtZQUNoRCxTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7SUFDSixDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM5QyxDQUFDOzs7O0lBSUQsSUFDSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFDRCxJQUFJLFNBQVMsQ0FBQyxTQUFpQjtRQUM3QixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7OztZQTdERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFFBQVEsRUFBRTs7T0FFTDtnQkFDTCxNQUFNLEVBQUUsRUFBRTthQUNYOzs7O1lBbkIwQixTQUFTO1lBc0NnQyxNQUFNLHVCQUF0QyxNQUFNLFNBQUMsV0FBVzs7O3NDQWZuRCxZQUFZLFNBQUMscUNBQXFDO2lDQUdsRCxZQUFZLFNBQUMsZ0NBQWdDOzBDQUc3QyxZQUFZLFNBQUMseUNBQXlDO3NDQUd0RCxZQUFZLFNBQUMscUNBQXFDO3dDQUdsRCxZQUFZLFNBQUMsdUNBQXVDO3VCQThCcEQsS0FBSzt3QkFFTCxLQUFLOzs7O0lBOUNOLDhDQUE4Qjs7SUFFOUIsMERBQytEOztJQUUvRCxxREFDcUQ7O0lBRXJELDhEQUN1RTs7SUFFdkUsMERBQytEOztJQUUvRCw0REFDbUU7O0lBNkJuRSwyQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBSZW5kZXJlcjIsIENvbnRlbnRDaGlsZCwgSW5qZWN0LCBQTEFURk9STV9JRCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGtvIGZyb20gJ2tub2Nrb3V0JztcbmltcG9ydCB7IFJlcG9ydCB9IGZyb20gXCJkZXZleHByZXNzLXJlcG9ydGluZy9keC13ZWJkb2N1bWVudHZpZXdlclwiO1xuaW1wb3J0IHsgRHhSZXBvcnRpbmdDb21wb25lbnQgfSBmcm9tICcuLi9keC1yZXBvcnRpbmctY29tcG9uZW50JztcblxuaW1wb3J0IHsgRHhSZXBvcnRWaWV3ZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vZHhydi1yZXF1ZXN0LW9wdGlvbnMnO1xuaW1wb3J0IHsgRHhSZXBvcnRWaWV3ZXJDYWxsYmFja3NDb21wb25lbnQgfSBmcm9tICcuL2R4cnYtY2FsbGJhY2tzJztcblxuaW1wb3J0IHsgRHhSZXBvcnRWaWV3ZXJNb2JpbGVNb2RlU2V0dGluZ3NDb21wb25lbnQgfSBmcm9tICcuL2R4cnYtbW9iaWxlLW1vZGUtc2V0dGluZ3MuY29tcG9uZW50JztcbmltcG9ydCB7IER4UmVwb3J0Vmlld2VyUmVtb3RlU2V0dGluZ3NDb21wb25lbnQgfSBmcm9tICcuL2R4cnYtcmVtb3RlLXNldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeFJlcG9ydFZpZXdlclRhYlBhbmVsU2V0dGluZ3NDb21wb25lbnQgfSBmcm9tICcuL2R4cnYtdGFicGFuZWwtc2V0dGluZ3MuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtcmVwb3J0LXZpZXdlcicsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHRlbXBsYXRlOiBgPGRpdiAjY29udHJvbCBbbmdDbGFzc109XCJjc3NDbGFzc1wiIFtuZ1N0eWxlXT1cInsnd2lkdGgnOiB3aWR0aCwgJ2hlaWdodCc6IGhlaWdodCB9XCI+XG4gIDxkaXYgZGF0YS1iaW5kPVwiZHhSZXBvcnRWaWV3ZXI6ICRkYXRhXCI+PC9kaXY+XG48L2Rpdj5gLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0Vmlld2VyQ29tcG9uZW50IGV4dGVuZHMgRHhSZXBvcnRpbmdDb21wb25lbnQ8YW55PiB7XG4gIGtvUmVwb3J0VXJsID0ga28ub2JzZXJ2YWJsZSgpO1xuICBcbiAgQENvbnRlbnRDaGlsZChEeFJlcG9ydFZpZXdlclJlcXVlc3RPcHRpb25zQ29tcG9uZW50KVxuICByZXF1ZXN0T3B0aW9uc0NvbXBvbmVudDogRHhSZXBvcnRWaWV3ZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudDtcbiAgXG4gIEBDb250ZW50Q2hpbGQoRHhSZXBvcnRWaWV3ZXJDYWxsYmFja3NDb21wb25lbnQpXG4gIGNhbGxiYWNrc0NvbXBvbmVudDogRHhSZXBvcnRWaWV3ZXJDYWxsYmFja3NDb21wb25lbnQ7XG5cbiAgQENvbnRlbnRDaGlsZChEeFJlcG9ydFZpZXdlck1vYmlsZU1vZGVTZXR0aW5nc0NvbXBvbmVudClcbiAgbW9iaWxlTW9kZVNldHRpbmdzQ29tcG9uZW50OiBEeFJlcG9ydFZpZXdlck1vYmlsZU1vZGVTZXR0aW5nc0NvbXBvbmVudDtcblxuICBAQ29udGVudENoaWxkKER4UmVwb3J0Vmlld2VyUmVtb3RlU2V0dGluZ3NDb21wb25lbnQpXG4gIHJlbW90ZVNldHRpbmdzQ29tcG9uZW50OiBEeFJlcG9ydFZpZXdlclJlbW90ZVNldHRpbmdzQ29tcG9uZW50O1xuXG4gIEBDb250ZW50Q2hpbGQoRHhSZXBvcnRWaWV3ZXJUYWJQYW5lbFNldHRpbmdzQ29tcG9uZW50KVxuICB0YWJQYW5lbFNldHRpbmdzQ29tcG9uZW50OiBEeFJlcG9ydFZpZXdlclRhYlBhbmVsU2V0dGluZ3NDb21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogT2JqZWN0KSB7IFxuICAgIHN1cGVyKHJlbmRlcmVyLCBwbGF0Zm9ybUlkKTtcbiAgfVxuICBcbiAgZ2V0S29CaW5kaW5nKG9wdGlvbnM6IGFueSkge1xuICAgIHJldHVybiBuZXcgUmVwb3J0LlByZXZpZXcuSlNSZXBvcnRWaWV3ZXJCaW5kaW5nKG9wdGlvbnMsIHRoaXMuZ2V0RXZlbnRSYWlzZXIoKSk7XG4gIH1cbiAgZ2V0Q2FsbGJhY2tzKCk6IGFueXtcbiAgICByZXR1cm4gdGhpcy5jYWxsYmFja3NDb21wb25lbnQ7XG4gIH1cbiAgZ2V0Q29udHJvbE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ0bDogdGhpcy5ydGwsXG4gICAgICBpc01vYmlsZTogdGhpcy5pc01vYmlsZSxcbiAgICAgIHJlcG9ydFVybDogdGhpcy5rb1JlcG9ydFVybCwgXG4gICAgICByZXF1ZXN0T3B0aW9uczogdGhpcy5yZXF1ZXN0T3B0aW9uc0NvbXBvbmVudCxcbiAgICAgIG1vYmlsZU1vZGVTZXR0aW5nczogdGhpcy5tb2JpbGVNb2RlU2V0dGluZ3NDb21wb25lbnQsXG4gICAgICByZW1vdGVTZXR0aW5nczogdGhpcy5yZW1vdGVTZXR0aW5nc0NvbXBvbmVudCxcbiAgICAgIHRhYlBhbmVsU2V0dGluZ3M6IHRoaXMudGFiUGFuZWxTZXR0aW5nc0NvbXBvbmVudCxcbiAgICAgIGNhbGxiYWNrczoge31cbiAgICB9O1xuICB9XG5cbiAgR2V0UHJldmlld01vZGVsKCkge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdTZW5kZXIuR2V0UHJldmlld01vZGVsKCk7XG4gIH1cblxuICBASW5wdXQoKSBpc01vYmlsZTogYm9vbGVhbjtcbiBcbiAgQElucHV0KClcbiAgZ2V0IHJlcG9ydFVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5rb1JlcG9ydFVybCgpO1xuICB9XG4gIHNldCByZXBvcnRVcmwocmVwb3J0VXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmtvUmVwb3J0VXJsKHJlcG9ydFVybCk7XG4gIH1cbn1cbiJdfQ==