import { Component, Output, EventEmitter, Input, Renderer2, ViewChild, Inject, PLATFORM_ID, ContentChild, ViewEncapsulation, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { cleanNode, observable } from 'knockout';
import { __extends } from 'tslib';
import { Report } from 'devexpress-reporting/dx-webdocumentviewer';
import { Designer } from 'devexpress-reporting/dx-reportdesigner';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportViewerCallbacksComponent = /** @class */ (function () {
    function DxReportViewerCallbacksComponent() {
        this.CustomizeElements = new EventEmitter();
        this.PreviewClick = new EventEmitter();
        this.EditingFieldChanged = new EventEmitter();
        this.DocumentReady = new EventEmitter();
        this.CustomizeExportOptions = new EventEmitter();
        this.CustomizeParameterEditors = new EventEmitter();
        this.CustomizeParameterLookUpSource = new EventEmitter();
        this.ParametersReset = new EventEmitter();
        this.ParametersSubmitted = new EventEmitter();
        this.CustomizeMenuActions = new EventEmitter();
        this.CustomizeLocalization = new EventEmitter();
        this.BeforeRender = new EventEmitter();
        this.OnServerError = new EventEmitter();
    }
    DxReportViewerCallbacksComponent.decorators = [
        { type: Component, args: [{
                    template: '',
                    selector: 'dxrv-callbacks'
                },] },
    ];
    DxReportViewerCallbacksComponent.propDecorators = {
        CustomizeElements: [{ type: Output }],
        PreviewClick: [{ type: Output }],
        EditingFieldChanged: [{ type: Output }],
        DocumentReady: [{ type: Output }],
        CustomizeExportOptions: [{ type: Output }],
        CustomizeParameterEditors: [{ type: Output }],
        CustomizeParameterLookUpSource: [{ type: Output }],
        ParametersReset: [{ type: Output }],
        ParametersSubmitted: [{ type: Output }],
        CustomizeMenuActions: [{ type: Output }],
        CustomizeLocalization: [{ type: Output }],
        BeforeRender: [{ type: Output }],
        OnServerError: [{ type: Output }]
    };
    return DxReportViewerCallbacksComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportViewerRequestOptionsComponent = /** @class */ (function () {
    function DxReportViewerRequestOptionsComponent() {
        this.invokeAction = "/DXXRDV";
    }
    DxReportViewerRequestOptionsComponent.decorators = [
        { type: Component, args: [{
                    template: '',
                    selector: 'dxrv-request-options'
                },] },
    ];
    DxReportViewerRequestOptionsComponent.propDecorators = {
        invokeAction: [{ type: Input }],
        getLocalizationAction: [{ type: Input }],
        host: [{ type: Input }]
    };
    return DxReportViewerRequestOptionsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var DxReportingComponent = /** @class */ (function () {
    function DxReportingComponent(renderer, platformId) {
        this.renderer = renderer;
        this.platformId = platformId;
        this.height = '800px';
        this.width = '100%';
        this.cssClass = '';
    }
    /**
     * @return {?}
     */
    DxReportingComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            this.callbacks = this.getCallbacks();
            /** @type {?} */
            var options = this.getControlOptions();
            /** @type {?} */
            var binding = this.getKoBinding(options);
            this.bindingSender = binding.sender;
            binding.applyBindings(this.control.nativeElement);
        }
    };
    /**
     * @return {?}
     */
    DxReportingComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        cleanNode(this.control.nativeElement);
    };
    /**
     * @return {?}
     */
    DxReportingComponent.prototype.getEventRaiser = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var component = this;
        return function (eventName, args) { return component.callbacks && component.callbacks[eventName] && component.callbacks[eventName].emit({ sender: component.bindingSender, args: args, component: component }); };
    };
    /** @nocollapse */
    DxReportingComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    DxReportingComponent.propDecorators = {
        control: [{ type: ViewChild, args: ["control",] }],
        height: [{ type: Input }],
        width: [{ type: Input }],
        cssClass: [{ type: Input }],
        rtl: [{ type: Input }]
    };
    return DxReportingComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportViewerMobileModeSettingsComponent = /** @class */ (function () {
    function DxReportViewerMobileModeSettingsComponent() {
    }
    DxReportViewerMobileModeSettingsComponent.decorators = [
        { type: Component, args: [{
                    template: '',
                    selector: 'dxrv-mobile-mode-settings'
                },] },
    ];
    DxReportViewerMobileModeSettingsComponent.propDecorators = {
        readerMode: [{ type: Input }],
        animationEnabled: [{ type: Input }]
    };
    return DxReportViewerMobileModeSettingsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportViewerRemoteSettingsComponent = /** @class */ (function () {
    function DxReportViewerRemoteSettingsComponent() {
    }
    DxReportViewerRemoteSettingsComponent.decorators = [
        { type: Component, args: [{
                    template: '',
                    selector: 'dxrv-remote-settings'
                },] },
    ];
    DxReportViewerRemoteSettingsComponent.propDecorators = {
        authToken: [{ type: Input }],
        serverUri: [{ type: Input }]
    };
    return DxReportViewerRemoteSettingsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportViewerTabPanelSettingsComponent = /** @class */ (function () {
    function DxReportViewerTabPanelSettingsComponent() {
    }
    DxReportViewerTabPanelSettingsComponent.decorators = [
        { type: Component, args: [{
                    template: '',
                    selector: 'dxrv-tabpanel-settings'
                },] },
    ];
    DxReportViewerTabPanelSettingsComponent.propDecorators = {
        position: [{ type: Input }],
        width: [{ type: Input }]
    };
    return DxReportViewerTabPanelSettingsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportViewerComponent = /** @class */ (function (_super) {
    __extends(DxReportViewerComponent, _super);
    function DxReportViewerComponent(renderer, platformId) {
        var _this = _super.call(this, renderer, platformId) || this;
        _this.koReportUrl = observable();
        return _this;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    DxReportViewerComponent.prototype.getKoBinding = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new Report.Preview.JSReportViewerBinding(options, this.getEventRaiser());
    };
    /**
     * @return {?}
     */
    DxReportViewerComponent.prototype.getCallbacks = /**
     * @return {?}
     */
    function () {
        return this.callbacksComponent;
    };
    /**
     * @return {?}
     */
    DxReportViewerComponent.prototype.getControlOptions = /**
     * @return {?}
     */
    function () {
        return {
            rtl: this.rtl,
            isMobile: this.isMobile,
            reportUrl: this.koReportUrl,
            requestOptions: this.requestOptionsComponent,
            mobileModeSettings: this.mobileModeSettingsComponent,
            remoteSettings: this.remoteSettingsComponent,
            tabPanelSettings: this.tabPanelSettingsComponent,
            callbacks: {}
        };
    };
    /**
     * @return {?}
     */
    DxReportViewerComponent.prototype.GetPreviewModel = /**
     * @return {?}
     */
    function () {
        return this.bindingSender.GetPreviewModel();
    };
    Object.defineProperty(DxReportViewerComponent.prototype, "reportUrl", {
        get: /**
         * @return {?}
         */
        function () {
            return this.koReportUrl();
        },
        set: /**
         * @param {?} reportUrl
         * @return {?}
         */
        function (reportUrl) {
            this.koReportUrl(reportUrl);
        },
        enumerable: true,
        configurable: true
    });
    DxReportViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dx-report-viewer',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div #control [ngClass]=\"cssClass\" [ngStyle]=\"{'width': width, 'height': height }\">\n  <div data-bind=\"dxReportViewer: $data\"></div>\n</div>",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    DxReportViewerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    DxReportViewerComponent.propDecorators = {
        requestOptionsComponent: [{ type: ContentChild, args: [DxReportViewerRequestOptionsComponent,] }],
        callbacksComponent: [{ type: ContentChild, args: [DxReportViewerCallbacksComponent,] }],
        mobileModeSettingsComponent: [{ type: ContentChild, args: [DxReportViewerMobileModeSettingsComponent,] }],
        remoteSettingsComponent: [{ type: ContentChild, args: [DxReportViewerRemoteSettingsComponent,] }],
        tabPanelSettingsComponent: [{ type: ContentChild, args: [DxReportViewerTabPanelSettingsComponent,] }],
        isMobile: [{ type: Input }],
        reportUrl: [{ type: Input }]
    };
    return DxReportViewerComponent;
}(DxReportingComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportViewerModule = /** @class */ (function () {
    function DxReportViewerModule() {
    }
    DxReportViewerModule.decorators = [
        { type: NgModule, args: [{
                    id: "DxReportViewerModule",
                    imports: [CommonModule],
                    declarations: [
                        DxReportViewerComponent,
                        DxReportViewerCallbacksComponent,
                        DxReportViewerMobileModeSettingsComponent,
                        DxReportViewerRemoteSettingsComponent,
                        DxReportViewerRequestOptionsComponent,
                        DxReportViewerTabPanelSettingsComponent
                    ],
                    exports: [
                        DxReportViewerComponent,
                        DxReportViewerCallbacksComponent,
                        DxReportViewerMobileModeSettingsComponent,
                        DxReportViewerRemoteSettingsComponent,
                        DxReportViewerRequestOptionsComponent,
                        DxReportViewerTabPanelSettingsComponent
                    ]
                },] },
    ];
    return DxReportViewerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportDesignerRequestOptionsComponent = /** @class */ (function () {
    function DxReportDesignerRequestOptionsComponent() {
    }
    DxReportDesignerRequestOptionsComponent.decorators = [
        { type: Component, args: [{
                    template: '',
                    selector: 'dxrd-request-options'
                },] },
    ];
    DxReportDesignerRequestOptionsComponent.propDecorators = {
        getDesignerModelAction: [{ type: Input }],
        getLocalizationAction: [{ type: Input }],
        host: [{ type: Input }]
    };
    return DxReportDesignerRequestOptionsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportDesignerCallbacksComponent = /** @class */ (function () {
    function DxReportDesignerCallbacksComponent() {
        this.CustomizeElements = new EventEmitter();
        this.ExitDesigner = new EventEmitter();
        this.ReportSaving = new EventEmitter();
        this.ReportSaved = new EventEmitter();
        this.ReportOpened = new EventEmitter();
        this.ReportOpening = new EventEmitter();
        this.TabChanged = new EventEmitter();
        this.ComponentAdded = new EventEmitter();
        this.CustomizeParameterEditors = new EventEmitter();
        this.CustomizeSaveDialog = new EventEmitter();
        this.CustomizeOpenDialog = new EventEmitter();
        this.CustomizeToolbox = new EventEmitter();
        this.CustomizeFieldListActions = new EventEmitter();
        this.CustomizeMenuActions = new EventEmitter();
        this.CustomizeLocalization = new EventEmitter();
        this.BeforeRender = new EventEmitter();
        this.OnServerError = new EventEmitter();
        this.PreviewClick = new EventEmitter();
        this.PreviewCustomizeElements = new EventEmitter();
        this.PreviewCustomizeMenuActions = new EventEmitter();
        this.PreviewEditingFieldChanged = new EventEmitter();
        this.PreviewDocumentReady = new EventEmitter();
        this.PreviewParametersReset = new EventEmitter();
        this.PreviewCustomizeExportOptions = new EventEmitter();
        this.ParametersSubmitted = new EventEmitter();
    }
    DxReportDesignerCallbacksComponent.decorators = [
        { type: Component, args: [{
                    template: '',
                    selector: 'dxrd-callbacks'
                },] },
    ];
    DxReportDesignerCallbacksComponent.propDecorators = {
        CustomizeElements: [{ type: Output }],
        ExitDesigner: [{ type: Output }],
        ReportSaving: [{ type: Output }],
        ReportSaved: [{ type: Output }],
        ReportOpened: [{ type: Output }],
        ReportOpening: [{ type: Output }],
        TabChanged: [{ type: Output }],
        ComponentAdded: [{ type: Output }],
        CustomizeParameterEditors: [{ type: Output }],
        CustomizeSaveDialog: [{ type: Output }],
        CustomizeOpenDialog: [{ type: Output }],
        CustomizeToolbox: [{ type: Output }],
        CustomizeFieldListActions: [{ type: Output }],
        CustomizeMenuActions: [{ type: Output }],
        CustomizeLocalization: [{ type: Output }],
        BeforeRender: [{ type: Output }],
        OnServerError: [{ type: Output }],
        PreviewClick: [{ type: Output }],
        PreviewCustomizeElements: [{ type: Output }],
        PreviewCustomizeMenuActions: [{ type: Output }],
        PreviewEditingFieldChanged: [{ type: Output }],
        PreviewDocumentReady: [{ type: Output }],
        PreviewParametersReset: [{ type: Output }],
        PreviewCustomizeExportOptions: [{ type: Output }],
        ParametersSubmitted: [{ type: Output }]
    };
    return DxReportDesignerCallbacksComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportDesignerComponent = /** @class */ (function (_super) {
    __extends(DxReportDesignerComponent, _super);
    function DxReportDesignerComponent(renderer, platformId) {
        var _this = _super.call(this, renderer, platformId) || this;
        _this.koReportUrl = observable();
        return _this;
    }
    /**
     * @return {?}
     */
    DxReportDesignerComponent.prototype.getCallbacks = /**
     * @return {?}
     */
    function () {
        return this.callbacksComponent;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    DxReportDesignerComponent.prototype.getKoBinding = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new Designer.Report.JSReportDesignerBinding(options, this.getEventRaiser());
    };
    /**
     * @return {?}
     */
    DxReportDesignerComponent.prototype.getControlOptions = /**
     * @return {?}
     */
    function () {
        return {
            allowMDI: this.allowMDI,
            reportUrl: this.koReportUrl,
            requestOptions: this.requestOptions,
            callbacks: { designer: {}, preview: {} }
        };
    };
    /**
     * @return {?}
     */
    DxReportDesignerComponent.prototype.GetDesignerModel = /**
     * @return {?}
     */
    function () {
        return this.bindingSender.GetDesignerModel();
    };
    /**
     * @return {?}
     */
    DxReportDesignerComponent.prototype.GetPreviewModel = /**
     * @return {?}
     */
    function () {
        return this.bindingSender.GetPreviewModel();
    };
    Object.defineProperty(DxReportDesignerComponent.prototype, "reportUrl", {
        get: /**
         * @return {?}
         */
        function () {
            return this.koReportUrl();
        },
        set: /**
         * @param {?} reportUrl
         * @return {?}
         */
        function (reportUrl) {
            this.koReportUrl(reportUrl);
        },
        enumerable: true,
        configurable: true
    });
    DxReportDesignerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dx-report-designer',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div #control [ngClass]=\"cssClass\" [ngStyle]=\"{'width': width, 'height': height }\">\n  <div data-bind=\"dxReportDesigner: $data\"></div>\n</div>",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    DxReportDesignerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    DxReportDesignerComponent.propDecorators = {
        requestOptions: [{ type: ContentChild, args: [DxReportDesignerRequestOptionsComponent,] }],
        callbacksComponent: [{ type: ContentChild, args: [DxReportDesignerCallbacksComponent,] }],
        allowMDI: [{ type: Input }],
        reportUrl: [{ type: Input }]
    };
    return DxReportDesignerComponent;
}(DxReportingComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DxReportDesignerModule = /** @class */ (function () {
    function DxReportDesignerModule() {
    }
    DxReportDesignerModule.decorators = [
        { type: NgModule, args: [{
                    id: "DxReportDesignerModule",
                    imports: [CommonModule],
                    declarations: [
                        DxReportDesignerCallbacksComponent,
                        DxReportDesignerRequestOptionsComponent,
                        DxReportDesignerComponent
                    ],
                    exports: [
                        DxReportDesignerCallbacksComponent,
                        DxReportDesignerRequestOptionsComponent,
                        DxReportDesignerComponent
                    ]
                },] },
    ];
    return DxReportDesignerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { DxReportViewerModule, DxReportDesignerModule, DxReportDesignerComponent, DxReportViewerComponent, DxReportDesignerCallbacksComponent as ɵg, DxReportDesignerRequestOptionsComponent as ɵh, DxReportViewerCallbacksComponent as ɵc, DxReportViewerMobileModeSettingsComponent as ɵd, DxReportViewerRemoteSettingsComponent as ɵe, DxReportViewerRequestOptionsComponent as ɵb, DxReportViewerTabPanelSettingsComponent as ɵf, DxReportingComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2ZXhwcmVzcy1yZXBvcnRpbmctYW5ndWxhci5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vZGV2ZXhwcmVzcy1yZXBvcnRpbmctYW5ndWxhci9saWIvZHgtcmVwb3J0LXZpZXdlci9keHJ2LWNhbGxiYWNrcy50cyIsIm5nOi8vZGV2ZXhwcmVzcy1yZXBvcnRpbmctYW5ndWxhci9saWIvZHgtcmVwb3J0LXZpZXdlci9keHJ2LXJlcXVlc3Qtb3B0aW9ucy50cyIsIm5nOi8vZGV2ZXhwcmVzcy1yZXBvcnRpbmctYW5ndWxhci9saWIvZHgtcmVwb3J0aW5nLWNvbXBvbmVudC50cyIsIm5nOi8vZGV2ZXhwcmVzcy1yZXBvcnRpbmctYW5ndWxhci9saWIvZHgtcmVwb3J0LXZpZXdlci9keHJ2LW1vYmlsZS1tb2RlLXNldHRpbmdzLmNvbXBvbmVudC50cyIsIm5nOi8vZGV2ZXhwcmVzcy1yZXBvcnRpbmctYW5ndWxhci9saWIvZHgtcmVwb3J0LXZpZXdlci9keHJ2LXJlbW90ZS1zZXR0aW5ncy5jb21wb25lbnQudHMiLCJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvbGliL2R4LXJlcG9ydC12aWV3ZXIvZHhydi10YWJwYW5lbC1zZXR0aW5ncy5jb21wb25lbnQudHMiLCJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvbGliL2R4LXJlcG9ydC12aWV3ZXIvZHgtcmVwb3J0LXZpZXdlci5jb21wb25lbnQudHMiLCJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvbGliL2R4LXJlcG9ydC12aWV3ZXIubW9kdWxlLnRzIiwibmc6Ly9kZXZleHByZXNzLXJlcG9ydGluZy1hbmd1bGFyL2xpYi9keC1yZXBvcnQtZGVzaWduZXIvZHhyZC1yZXF1ZXN0LW9wdGlvbnMudHMiLCJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvbGliL2R4LXJlcG9ydC1kZXNpZ25lci9keHJkLWNhbGxiYWNrcy50cyIsIm5nOi8vZGV2ZXhwcmVzcy1yZXBvcnRpbmctYW5ndWxhci9saWIvZHgtcmVwb3J0LWRlc2lnbmVyL2R4LXJlcG9ydC1kZXNpZ25lci5jb21wb25lbnQudHMiLCJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvbGliL2R4LXJlcG9ydC1kZXNpZ25lci5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZTogJycsXG4gICAgc2VsZWN0b3I6ICdkeHJ2LWNhbGxiYWNrcydcbn0pXG5leHBvcnQgY2xhc3MgRHhSZXBvcnRWaWV3ZXJDYWxsYmFja3NDb21wb25lbnQge1xuICAgIEBPdXRwdXQoKSBDdXN0b21pemVFbGVtZW50cyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBQcmV2aWV3Q2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgRWRpdGluZ0ZpZWxkQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBEb2N1bWVudFJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEN1c3RvbWl6ZUV4cG9ydE9wdGlvbnMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgQ3VzdG9taXplUGFyYW1ldGVyRWRpdG9ycyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBDdXN0b21pemVQYXJhbWV0ZXJMb29rVXBTb3VyY2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgUGFyYW1ldGVyc1Jlc2V0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIFBhcmFtZXRlcnNTdWJtaXR0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgQ3VzdG9taXplTWVudUFjdGlvbnMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgQ3VzdG9taXplTG9jYWxpemF0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEJlZm9yZVJlbmRlciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBPblNlcnZlckVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogJycsXG4gIHNlbGVjdG9yOiAnZHhydi1yZXF1ZXN0LW9wdGlvbnMnXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0Vmlld2VyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQge1xuICBASW5wdXQoKSBpbnZva2VBY3Rpb246IHN0cmluZyA9IFwiL0RYWFJEVlwiO1xuICBASW5wdXQoKSBnZXRMb2NhbGl6YXRpb25BY3Rpb24/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGhvc3Q6IHN0cmluZztcbn1cbiIsImltcG9ydCB7IEFmdGVyVmlld0luaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBJbnB1dCwgSW5qZWN0LCBQTEFURk9STV9JRCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgKiBhcyBrbyBmcm9tIFwia25vY2tvdXRcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER4UmVwb3J0aW5nQ29tcG9uZW50PFQ+IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgYmluZGluZ1NlbmRlcjogYW55O1xuICBjYWxsYmFja3M6IGFueTtcbiAgQFZpZXdDaGlsZChcImNvbnRyb2xcIilcbiAgY29udHJvbDogRWxlbWVudFJlZjtcbiAgXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QpIHsgfVxuICBhYnN0cmFjdCBnZXRDb250cm9sT3B0aW9ucygpOiBUO1xuICBhYnN0cmFjdCBnZXRDYWxsYmFja3MoKTogYW55O1xuICBhYnN0cmFjdCBnZXRLb0JpbmRpbmcob3B0aW9uczogVCk6IGFueTtcbiAgXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5jYWxsYmFja3MgPSB0aGlzLmdldENhbGxiYWNrcygpO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0Q29udHJvbE9wdGlvbnMoKTtcbiAgICAgIHZhciBiaW5kaW5nID0gdGhpcy5nZXRLb0JpbmRpbmcob3B0aW9ucyk7XG4gICAgICB0aGlzLmJpbmRpbmdTZW5kZXIgPSBiaW5kaW5nLnNlbmRlcjtcbiAgICAgIGJpbmRpbmcuYXBwbHlCaW5kaW5ncyh0aGlzLmNvbnRyb2wubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG4gIG5nT25EZXN0cm95KCkge1xuICAgIGtvLmNsZWFuTm9kZSh0aGlzLmNvbnRyb2wubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICBnZXRFdmVudFJhaXNlcigpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcztcbiAgICByZXR1cm4gKGV2ZW50TmFtZSwgYXJncz8pID0+IGNvbXBvbmVudC5jYWxsYmFja3MgJiYgY29tcG9uZW50LmNhbGxiYWNrc1tldmVudE5hbWVdICYmIGNvbXBvbmVudC5jYWxsYmFja3NbZXZlbnROYW1lXS5lbWl0KHsgc2VuZGVyOiBjb21wb25lbnQuYmluZGluZ1NlbmRlciwgYXJnczogYXJncywgY29tcG9uZW50OiBjb21wb25lbnQgfSk7XG4gIH1cblxuICBASW5wdXQoKSBoZWlnaHQ6IHN0cmluZyA9ICc4MDBweCc7XG4gIEBJbnB1dCgpIHdpZHRoOiBzdHJpbmcgPSAnMTAwJSc7XG4gIEBJbnB1dCgpIGNzc0NsYXNzOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgcnRsOiBib29sZWFuO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGU6ICcnLFxuICBzZWxlY3RvcjogJ2R4cnYtbW9iaWxlLW1vZGUtc2V0dGluZ3MnXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0Vmlld2VyTW9iaWxlTW9kZVNldHRpbmdzQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKSByZWFkZXJNb2RlOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGFuaW1hdGlvbkVuYWJsZWQ6IGJvb2xlYW47XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogJycsXG4gIHNlbGVjdG9yOiAnZHhydi1yZW1vdGUtc2V0dGluZ3MnXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0Vmlld2VyUmVtb3RlU2V0dGluZ3NDb21wb25lbnQge1xuICAgIEBJbnB1dCgpIGF1dGhUb2tlbjogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHNlcnZlclVyaTogc3RyaW5nO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGU6ICcnLFxuICBzZWxlY3RvcjogJ2R4cnYtdGFicGFuZWwtc2V0dGluZ3MnXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0Vmlld2VyVGFiUGFuZWxTZXR0aW5nc0NvbXBvbmVudCB7XG4gICAgQElucHV0KCkgcG9zaXRpb246IHN0cmluZztcbiAgICBASW5wdXQoKSB3aWR0aDogbnVtYmVyO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgUmVuZGVyZXIyLCBDb250ZW50Q2hpbGQsIEluamVjdCwgUExBVEZPUk1fSUQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBrbyBmcm9tICdrbm9ja291dCc7XG5pbXBvcnQgeyBSZXBvcnQgfSBmcm9tIFwiZGV2ZXhwcmVzcy1yZXBvcnRpbmcvZHgtd2ViZG9jdW1lbnR2aWV3ZXJcIjtcbmltcG9ydCB7IER4UmVwb3J0aW5nQ29tcG9uZW50IH0gZnJvbSAnLi4vZHgtcmVwb3J0aW5nLWNvbXBvbmVudCc7XG5cbmltcG9ydCB7IER4UmVwb3J0Vmlld2VyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL2R4cnYtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IER4UmVwb3J0Vmlld2VyQ2FsbGJhY2tzQ29tcG9uZW50IH0gZnJvbSAnLi9keHJ2LWNhbGxiYWNrcyc7XG5cbmltcG9ydCB7IER4UmVwb3J0Vmlld2VyTW9iaWxlTW9kZVNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9keHJ2LW1vYmlsZS1tb2RlLXNldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeFJlcG9ydFZpZXdlclJlbW90ZVNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9keHJ2LXJlbW90ZS1zZXR0aW5ncy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRHhSZXBvcnRWaWV3ZXJUYWJQYW5lbFNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9keHJ2LXRhYnBhbmVsLXNldHRpbmdzLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXJlcG9ydC12aWV3ZXInLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICB0ZW1wbGF0ZTogYDxkaXYgI2NvbnRyb2wgW25nQ2xhc3NdPVwiY3NzQ2xhc3NcIiBbbmdTdHlsZV09XCJ7J3dpZHRoJzogd2lkdGgsICdoZWlnaHQnOiBoZWlnaHQgfVwiPlxuICA8ZGl2IGRhdGEtYmluZD1cImR4UmVwb3J0Vmlld2VyOiAkZGF0YVwiPjwvZGl2PlxuPC9kaXY+YCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBEeFJlcG9ydFZpZXdlckNvbXBvbmVudCBleHRlbmRzIER4UmVwb3J0aW5nQ29tcG9uZW50PGFueT4ge1xuICBrb1JlcG9ydFVybCA9IGtvLm9ic2VydmFibGUoKTtcbiAgXG4gIEBDb250ZW50Q2hpbGQoRHhSZXBvcnRWaWV3ZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudClcbiAgcmVxdWVzdE9wdGlvbnNDb21wb25lbnQ6IER4UmVwb3J0Vmlld2VyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQ7XG4gIFxuICBAQ29udGVudENoaWxkKER4UmVwb3J0Vmlld2VyQ2FsbGJhY2tzQ29tcG9uZW50KVxuICBjYWxsYmFja3NDb21wb25lbnQ6IER4UmVwb3J0Vmlld2VyQ2FsbGJhY2tzQ29tcG9uZW50O1xuXG4gIEBDb250ZW50Q2hpbGQoRHhSZXBvcnRWaWV3ZXJNb2JpbGVNb2RlU2V0dGluZ3NDb21wb25lbnQpXG4gIG1vYmlsZU1vZGVTZXR0aW5nc0NvbXBvbmVudDogRHhSZXBvcnRWaWV3ZXJNb2JpbGVNb2RlU2V0dGluZ3NDb21wb25lbnQ7XG5cbiAgQENvbnRlbnRDaGlsZChEeFJlcG9ydFZpZXdlclJlbW90ZVNldHRpbmdzQ29tcG9uZW50KVxuICByZW1vdGVTZXR0aW5nc0NvbXBvbmVudDogRHhSZXBvcnRWaWV3ZXJSZW1vdGVTZXR0aW5nc0NvbXBvbmVudDtcblxuICBAQ29udGVudENoaWxkKER4UmVwb3J0Vmlld2VyVGFiUGFuZWxTZXR0aW5nc0NvbXBvbmVudClcbiAgdGFiUGFuZWxTZXR0aW5nc0NvbXBvbmVudDogRHhSZXBvcnRWaWV3ZXJUYWJQYW5lbFNldHRpbmdzQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IE9iamVjdCkgeyBcbiAgICBzdXBlcihyZW5kZXJlciwgcGxhdGZvcm1JZCk7XG4gIH1cbiAgXG4gIGdldEtvQmluZGluZyhvcHRpb25zOiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IFJlcG9ydC5QcmV2aWV3LkpTUmVwb3J0Vmlld2VyQmluZGluZyhvcHRpb25zLCB0aGlzLmdldEV2ZW50UmFpc2VyKCkpO1xuICB9XG4gIGdldENhbGxiYWNrcygpOiBhbnl7XG4gICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tzQ29tcG9uZW50O1xuICB9XG4gIGdldENvbnRyb2xPcHRpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBydGw6IHRoaXMucnRsLFxuICAgICAgaXNNb2JpbGU6IHRoaXMuaXNNb2JpbGUsXG4gICAgICByZXBvcnRVcmw6IHRoaXMua29SZXBvcnRVcmwsIFxuICAgICAgcmVxdWVzdE9wdGlvbnM6IHRoaXMucmVxdWVzdE9wdGlvbnNDb21wb25lbnQsXG4gICAgICBtb2JpbGVNb2RlU2V0dGluZ3M6IHRoaXMubW9iaWxlTW9kZVNldHRpbmdzQ29tcG9uZW50LFxuICAgICAgcmVtb3RlU2V0dGluZ3M6IHRoaXMucmVtb3RlU2V0dGluZ3NDb21wb25lbnQsXG4gICAgICB0YWJQYW5lbFNldHRpbmdzOiB0aGlzLnRhYlBhbmVsU2V0dGluZ3NDb21wb25lbnQsXG4gICAgICBjYWxsYmFja3M6IHt9XG4gICAgfTtcbiAgfVxuXG4gIEdldFByZXZpZXdNb2RlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5nU2VuZGVyLkdldFByZXZpZXdNb2RlbCgpO1xuICB9XG5cbiAgQElucHV0KCkgaXNNb2JpbGU6IGJvb2xlYW47XG4gXG4gIEBJbnB1dCgpXG4gIGdldCByZXBvcnRVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMua29SZXBvcnRVcmwoKTtcbiAgfVxuICBzZXQgcmVwb3J0VXJsKHJlcG9ydFVybDogc3RyaW5nKSB7XG4gICAgdGhpcy5rb1JlcG9ydFVybChyZXBvcnRVcmwpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHhSZXBvcnRWaWV3ZXJDYWxsYmFja3NDb21wb25lbnQgfSBmcm9tICcuL2R4LXJlcG9ydC12aWV3ZXIvZHhydi1jYWxsYmFja3MnO1xuaW1wb3J0IHsgRHhSZXBvcnRWaWV3ZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vZHgtcmVwb3J0LXZpZXdlci9keHJ2LXJlcXVlc3Qtb3B0aW9ucyc7XG5pbXBvcnQgeyBEeFJlcG9ydFZpZXdlckNvbXBvbmVudCB9IGZyb20gJy4vZHgtcmVwb3J0LXZpZXdlci9keC1yZXBvcnQtdmlld2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeFJlcG9ydFZpZXdlck1vYmlsZU1vZGVTZXR0aW5nc0NvbXBvbmVudCB9IGZyb20gJy4vZHgtcmVwb3J0LXZpZXdlci9keHJ2LW1vYmlsZS1tb2RlLXNldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeFJlcG9ydFZpZXdlclJlbW90ZVNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9keC1yZXBvcnQtdmlld2VyL2R4cnYtcmVtb3RlLXNldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeFJlcG9ydFZpZXdlclRhYlBhbmVsU2V0dGluZ3NDb21wb25lbnQgfSBmcm9tICcuL2R4LXJlcG9ydC12aWV3ZXIvZHhydi10YWJwYW5lbC1zZXR0aW5ncy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQE5nTW9kdWxlKHtcbiAgaWQ6IFwiRHhSZXBvcnRWaWV3ZXJNb2R1bGVcIixcbiAgaW1wb3J0czogWyBDb21tb25Nb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRHhSZXBvcnRWaWV3ZXJDb21wb25lbnQsIFxuICAgIER4UmVwb3J0Vmlld2VyQ2FsbGJhY2tzQ29tcG9uZW50LFxuICAgIER4UmVwb3J0Vmlld2VyTW9iaWxlTW9kZVNldHRpbmdzQ29tcG9uZW50LFxuICAgIER4UmVwb3J0Vmlld2VyUmVtb3RlU2V0dGluZ3NDb21wb25lbnQsXG4gICAgRHhSZXBvcnRWaWV3ZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudCxcbiAgICBEeFJlcG9ydFZpZXdlclRhYlBhbmVsU2V0dGluZ3NDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIER4UmVwb3J0Vmlld2VyQ29tcG9uZW50LCBcbiAgICBEeFJlcG9ydFZpZXdlckNhbGxiYWNrc0NvbXBvbmVudCxcbiAgICBEeFJlcG9ydFZpZXdlck1vYmlsZU1vZGVTZXR0aW5nc0NvbXBvbmVudCxcbiAgICBEeFJlcG9ydFZpZXdlclJlbW90ZVNldHRpbmdzQ29tcG9uZW50LFxuICAgIER4UmVwb3J0Vmlld2VyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQsXG4gICAgRHhSZXBvcnRWaWV3ZXJUYWJQYW5lbFNldHRpbmdzQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRHhSZXBvcnRWaWV3ZXJNb2R1bGUgeyB9XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogJycsXG4gIHNlbGVjdG9yOiAnZHhyZC1yZXF1ZXN0LW9wdGlvbnMnXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0RGVzaWduZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGdldERlc2lnbmVyTW9kZWxBY3Rpb24/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGdldExvY2FsaXphdGlvbkFjdGlvbj86IHN0cmluZztcbiAgQElucHV0KCkgaG9zdDogc3RyaW5nO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZTogJycsXG4gICAgc2VsZWN0b3I6ICdkeHJkLWNhbGxiYWNrcydcbn0pXG5leHBvcnQgY2xhc3MgRHhSZXBvcnREZXNpZ25lckNhbGxiYWNrc0NvbXBvbmVudCB7XG4gICAgQE91dHB1dCgpIEN1c3RvbWl6ZUVsZW1lbnRzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEV4aXREZXNpZ25lciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBSZXBvcnRTYXZpbmcgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgUmVwb3J0U2F2ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgUmVwb3J0T3BlbmVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIFJlcG9ydE9wZW5pbmcgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgVGFiQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBDb21wb25lbnRBZGRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBDdXN0b21pemVQYXJhbWV0ZXJFZGl0b3JzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEN1c3RvbWl6ZVNhdmVEaWFsb2cgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgQ3VzdG9taXplT3BlbkRpYWxvZyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBDdXN0b21pemVUb29sYm94ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEN1c3RvbWl6ZUZpZWxkTGlzdEFjdGlvbnMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgQ3VzdG9taXplTWVudUFjdGlvbnMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgQ3VzdG9taXplTG9jYWxpemF0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEJlZm9yZVJlbmRlciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBPblNlcnZlckVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBcbiAgICBAT3V0cHV0KCkgUHJldmlld0NsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIFByZXZpZXdDdXN0b21pemVFbGVtZW50cyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBQcmV2aWV3Q3VzdG9taXplTWVudUFjdGlvbnMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgUHJldmlld0VkaXRpbmdGaWVsZENoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgUHJldmlld0RvY3VtZW50UmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgUHJldmlld1BhcmFtZXRlcnNSZXNldCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBQcmV2aWV3Q3VzdG9taXplRXhwb3J0T3B0aW9ucyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBQYXJhbWV0ZXJzU3VibWl0dGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBSZW5kZXJlcjIsIENvbnRlbnRDaGlsZCwgSW5qZWN0LCBQTEFURk9STV9JRCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGtvIGZyb20gJ2tub2Nrb3V0JztcbmltcG9ydCB7IERlc2lnbmVyIH0gZnJvbSBcImRldmV4cHJlc3MtcmVwb3J0aW5nL2R4LXJlcG9ydGRlc2lnbmVyXCI7XG5pbXBvcnQgeyBEeFJlcG9ydGluZ0NvbXBvbmVudCB9IGZyb20gJy4uL2R4LXJlcG9ydGluZy1jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBEeFJlcG9ydERlc2lnbmVyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL2R4cmQtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IER4UmVwb3J0RGVzaWduZXJDYWxsYmFja3NDb21wb25lbnQgfSBmcm9tICcuL2R4cmQtY2FsbGJhY2tzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtcmVwb3J0LWRlc2lnbmVyJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgdGVtcGxhdGU6IGA8ZGl2ICNjb250cm9sIFtuZ0NsYXNzXT1cImNzc0NsYXNzXCIgW25nU3R5bGVdPVwieyd3aWR0aCc6IHdpZHRoLCAnaGVpZ2h0JzogaGVpZ2h0IH1cIj5cbiAgPGRpdiBkYXRhLWJpbmQ9XCJkeFJlcG9ydERlc2lnbmVyOiAkZGF0YVwiPjwvZGl2PlxuPC9kaXY+YCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBEeFJlcG9ydERlc2lnbmVyQ29tcG9uZW50IGV4dGVuZHMgRHhSZXBvcnRpbmdDb21wb25lbnQ8YW55PiB7XG4gIGtvUmVwb3J0VXJsID0ga28ub2JzZXJ2YWJsZSgpO1xuXG4gIEBDb250ZW50Q2hpbGQoRHhSZXBvcnREZXNpZ25lclJlcXVlc3RPcHRpb25zQ29tcG9uZW50KVxuICByZXF1ZXN0T3B0aW9uczogRHhSZXBvcnREZXNpZ25lclJlcXVlc3RPcHRpb25zQ29tcG9uZW50O1xuXG4gIEBDb250ZW50Q2hpbGQoRHhSZXBvcnREZXNpZ25lckNhbGxiYWNrc0NvbXBvbmVudClcbiAgY2FsbGJhY2tzQ29tcG9uZW50OiBEeFJlcG9ydERlc2lnbmVyQ2FsbGJhY2tzQ29tcG9uZW50O1xuICBcbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogT2JqZWN0KSB7IFxuICAgIHN1cGVyKHJlbmRlcmVyLCBwbGF0Zm9ybUlkKTtcbiAgfVxuICBnZXRDYWxsYmFja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tzQ29tcG9uZW50O1xuICB9XG4gIGdldEtvQmluZGluZyhvcHRpb25zOiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IERlc2lnbmVyLlJlcG9ydC5KU1JlcG9ydERlc2lnbmVyQmluZGluZyhvcHRpb25zLCB0aGlzLmdldEV2ZW50UmFpc2VyKCkpO1xuICB9XG4gIGdldENvbnRyb2xPcHRpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbGxvd01ESTogdGhpcy5hbGxvd01ESSxcbiAgICAgIHJlcG9ydFVybDogdGhpcy5rb1JlcG9ydFVybCxcbiAgICAgIHJlcXVlc3RPcHRpb25zOiB0aGlzLnJlcXVlc3RPcHRpb25zLFxuICAgICAgY2FsbGJhY2tzOiB7IGRlc2lnbmVyOiB7fSwgcHJldmlldzoge30gfVxuICAgIH07XG4gIH1cblxuICBHZXREZXNpZ25lck1vZGVsKCkge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdTZW5kZXIuR2V0RGVzaWduZXJNb2RlbCgpO1xuICB9XG5cbiAgR2V0UHJldmlld01vZGVsKCkge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdTZW5kZXIuR2V0UHJldmlld01vZGVsKCk7XG4gIH1cbiAgQElucHV0KCkgYWxsb3dNREk/OiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIGdldCByZXBvcnRVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMua29SZXBvcnRVcmwoKTtcbiAgfVxuICBzZXQgcmVwb3J0VXJsKHJlcG9ydFVybDogc3RyaW5nKSB7XG4gICAgdGhpcy5rb1JlcG9ydFVybChyZXBvcnRVcmwpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IER4UmVwb3J0RGVzaWduZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vZHgtcmVwb3J0LWRlc2lnbmVyL2R4cmQtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IER4UmVwb3J0RGVzaWduZXJDb21wb25lbnQgfSBmcm9tICcuL2R4LXJlcG9ydC1kZXNpZ25lci9keC1yZXBvcnQtZGVzaWduZXIuY29tcG9uZW50JztcbmltcG9ydCB7IER4UmVwb3J0RGVzaWduZXJDYWxsYmFja3NDb21wb25lbnQgfSBmcm9tICcuL2R4LXJlcG9ydC1kZXNpZ25lci9keHJkLWNhbGxiYWNrcyc7XG5cbkBOZ01vZHVsZSh7XG4gIGlkOiBcIkR4UmVwb3J0RGVzaWduZXJNb2R1bGVcIixcbiAgaW1wb3J0czogWyBDb21tb25Nb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRHhSZXBvcnREZXNpZ25lckNhbGxiYWNrc0NvbXBvbmVudCxcbiAgICBEeFJlcG9ydERlc2lnbmVyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQsXG4gICAgRHhSZXBvcnREZXNpZ25lckNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgRHhSZXBvcnREZXNpZ25lckNhbGxiYWNrc0NvbXBvbmVudCxcbiAgICBEeFJlcG9ydERlc2lnbmVyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQsXG4gICAgRHhSZXBvcnREZXNpZ25lckNvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0RGVzaWduZXJNb2R1bGUgeyB9XG4iXSwibmFtZXMiOlsia28uY2xlYW5Ob2RlIiwidHNsaWJfMS5fX2V4dGVuZHMiLCJrby5vYnNlcnZhYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0lBRUE7UUFLYyxzQkFBaUIsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQzVD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