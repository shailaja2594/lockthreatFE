/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Renderer2, ContentChild, Inject, PLATFORM_ID, ViewEncapsulation } from '@angular/core';
import * as ko from 'knockout';
import { Designer } from "devexpress-reporting/dx-reportdesigner";
import { DxReportingComponent } from '../dx-reporting-component';
import { DxReportDesignerRequestOptionsComponent } from './dxrd-request-options';
import { DxReportDesignerCallbacksComponent } from './dxrd-callbacks';
var DxReportDesignerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxReportDesignerComponent, _super);
    function DxReportDesignerComponent(renderer, platformId) {
        var _this = _super.call(this, renderer, platformId) || this;
        _this.koReportUrl = ko.observable();
        return _this;
    }
    /**
     * @return {?}
     */
    DxReportDesignerComponent.prototype.getCallbacks = /**
     * @return {?}
     */
    function () {
        return this.callbacksComponent;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    DxReportDesignerComponent.prototype.getKoBinding = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new Designer.Report.JSReportDesignerBinding(options, this.getEventRaiser());
    };
    /**
     * @return {?}
     */
    DxReportDesignerComponent.prototype.getControlOptions = /**
     * @return {?}
     */
    function () {
        return {
            allowMDI: this.allowMDI,
            reportUrl: this.koReportUrl,
            requestOptions: this.requestOptions,
            callbacks: { designer: {}, preview: {} }
        };
    };
    /**
     * @return {?}
     */
    DxReportDesignerComponent.prototype.GetDesignerModel = /**
     * @return {?}
     */
    function () {
        return this.bindingSender.GetDesignerModel();
    };
    /**
     * @return {?}
     */
    DxReportDesignerComponent.prototype.GetPreviewModel = /**
     * @return {?}
     */
    function () {
        return this.bindingSender.GetPreviewModel();
    };
    Object.defineProperty(DxReportDesignerComponent.prototype, "reportUrl", {
        get: /**
         * @return {?}
         */
        function () {
            return this.koReportUrl();
        },
        set: /**
         * @param {?} reportUrl
         * @return {?}
         */
        function (reportUrl) {
            this.koReportUrl(reportUrl);
        },
        enumerable: true,
        configurable: true
    });
    DxReportDesignerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dx-report-designer',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div #control [ngClass]=\"cssClass\" [ngStyle]=\"{'width': width, 'height': height }\">\n  <div data-bind=\"dxReportDesigner: $data\"></div>\n</div>",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    DxReportDesignerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    DxReportDesignerComponent.propDecorators = {
        requestOptions: [{ type: ContentChild, args: [DxReportDesignerRequestOptionsComponent,] }],
        callbacksComponent: [{ type: ContentChild, args: [DxReportDesignerCallbacksComponent,] }],
        allowMDI: [{ type: Input }],
        reportUrl: [{ type: Input }]
    };
    return DxReportDesignerComponent;
}(DxReportingComponent));
export { DxReportDesignerComponent };
if (false) {
    /** @type {?} */
    DxReportDesignerComponent.prototype.koReportUrl;
    /** @type {?} */
    DxReportDesignerComponent.prototype.requestOptions;
    /** @type {?} */
    DxReportDesignerComponent.prototype.callbacksComponent;
    /** @type {?} */
    DxReportDesignerComponent.prototype.allowMDI;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHgtcmVwb3J0LWRlc2lnbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZHgtcmVwb3J0LWRlc2lnbmVyL2R4LXJlcG9ydC1kZXNpZ25lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWpFLE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXRFO0lBUStDLHFEQUF5QjtJQVN0RSxtQ0FBWSxRQUFtQixFQUF1QixVQUFrQjtRQUF4RSxZQUNFLGtCQUFNLFFBQVEsRUFBRSxVQUFVLENBQUMsU0FDNUI7UUFWRCxpQkFBVyxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQzs7SUFVOUIsQ0FBQzs7OztJQUNELGdEQUFZOzs7SUFBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBQ0QsZ0RBQVk7Ozs7SUFBWixVQUFhLE9BQVk7UUFDdkIsT0FBTyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Ozs7SUFDRCxxREFBaUI7OztJQUFqQjtRQUNFLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzNCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztZQUNuQyxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7U0FDekMsQ0FBQztJQUNKLENBQUM7Ozs7SUFFRCxvREFBZ0I7OztJQUFoQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9DLENBQUM7Ozs7SUFFRCxtREFBZTs7O0lBQWY7UUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUdELHNCQUNJLGdEQUFTOzs7O1FBRGI7WUFFRSxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QixDQUFDOzs7OztRQUNELFVBQWMsU0FBaUI7WUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5QixDQUFDOzs7T0FIQTs7Z0JBL0NGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsUUFBUSxFQUFFLHNKQUVMO29CQUNMLE1BQU0sRUFBRSxFQUFFO2lCQUNYOzs7O2dCQWYwQixTQUFTO2dCQXlCZ0MsTUFBTSx1QkFBdEMsTUFBTSxTQUFDLFdBQVc7OztpQ0FObkQsWUFBWSxTQUFDLHVDQUF1QztxQ0FHcEQsWUFBWSxTQUFDLGtDQUFrQzsyQkE0Qi9DLEtBQUs7NEJBRUwsS0FBSzs7SUFPUixnQ0FBQztDQUFBLEFBbkRELENBUStDLG9CQUFvQixHQTJDbEU7U0EzQ1kseUJBQXlCOzs7SUFDcEMsZ0RBQThCOztJQUU5QixtREFDd0Q7O0lBRXhELHVEQUN1RDs7SUEyQnZELDZDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFJlbmRlcmVyMiwgQ29udGVudENoaWxkLCBJbmplY3QsIFBMQVRGT1JNX0lELCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMga28gZnJvbSAna25vY2tvdXQnO1xuaW1wb3J0IHsgRGVzaWduZXIgfSBmcm9tIFwiZGV2ZXhwcmVzcy1yZXBvcnRpbmcvZHgtcmVwb3J0ZGVzaWduZXJcIjtcbmltcG9ydCB7IER4UmVwb3J0aW5nQ29tcG9uZW50IH0gZnJvbSAnLi4vZHgtcmVwb3J0aW5nLWNvbXBvbmVudCc7XG5cbmltcG9ydCB7IER4UmVwb3J0RGVzaWduZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vZHhyZC1yZXF1ZXN0LW9wdGlvbnMnO1xuaW1wb3J0IHsgRHhSZXBvcnREZXNpZ25lckNhbGxiYWNrc0NvbXBvbmVudCB9IGZyb20gJy4vZHhyZC1jYWxsYmFja3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1yZXBvcnQtZGVzaWduZXInLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICB0ZW1wbGF0ZTogYDxkaXYgI2NvbnRyb2wgW25nQ2xhc3NdPVwiY3NzQ2xhc3NcIiBbbmdTdHlsZV09XCJ7J3dpZHRoJzogd2lkdGgsICdoZWlnaHQnOiBoZWlnaHQgfVwiPlxuICA8ZGl2IGRhdGEtYmluZD1cImR4UmVwb3J0RGVzaWduZXI6ICRkYXRhXCI+PC9kaXY+XG48L2Rpdj5gLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0RGVzaWduZXJDb21wb25lbnQgZXh0ZW5kcyBEeFJlcG9ydGluZ0NvbXBvbmVudDxhbnk+IHtcbiAga29SZXBvcnRVcmwgPSBrby5vYnNlcnZhYmxlKCk7XG5cbiAgQENvbnRlbnRDaGlsZChEeFJlcG9ydERlc2lnbmVyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQpXG4gIHJlcXVlc3RPcHRpb25zOiBEeFJlcG9ydERlc2lnbmVyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQ7XG5cbiAgQENvbnRlbnRDaGlsZChEeFJlcG9ydERlc2lnbmVyQ2FsbGJhY2tzQ29tcG9uZW50KVxuICBjYWxsYmFja3NDb21wb25lbnQ6IER4UmVwb3J0RGVzaWduZXJDYWxsYmFja3NDb21wb25lbnQ7XG4gIFxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QpIHsgXG4gICAgc3VwZXIocmVuZGVyZXIsIHBsYXRmb3JtSWQpO1xuICB9XG4gIGdldENhbGxiYWNrcygpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsYmFja3NDb21wb25lbnQ7XG4gIH1cbiAgZ2V0S29CaW5kaW5nKG9wdGlvbnM6IGFueSkge1xuICAgIHJldHVybiBuZXcgRGVzaWduZXIuUmVwb3J0LkpTUmVwb3J0RGVzaWduZXJCaW5kaW5nKG9wdGlvbnMsIHRoaXMuZ2V0RXZlbnRSYWlzZXIoKSk7XG4gIH1cbiAgZ2V0Q29udHJvbE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFsbG93TURJOiB0aGlzLmFsbG93TURJLFxuICAgICAgcmVwb3J0VXJsOiB0aGlzLmtvUmVwb3J0VXJsLFxuICAgICAgcmVxdWVzdE9wdGlvbnM6IHRoaXMucmVxdWVzdE9wdGlvbnMsXG4gICAgICBjYWxsYmFja3M6IHsgZGVzaWduZXI6IHt9LCBwcmV2aWV3OiB7fSB9XG4gICAgfTtcbiAgfVxuXG4gIEdldERlc2lnbmVyTW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ1NlbmRlci5HZXREZXNpZ25lck1vZGVsKCk7XG4gIH1cblxuICBHZXRQcmV2aWV3TW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ1NlbmRlci5HZXRQcmV2aWV3TW9kZWwoKTtcbiAgfVxuICBASW5wdXQoKSBhbGxvd01EST86IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgZ2V0IHJlcG9ydFVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5rb1JlcG9ydFVybCgpO1xuICB9XG4gIHNldCByZXBvcnRVcmwocmVwb3J0VXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmtvUmVwb3J0VXJsKHJlcG9ydFVybCk7XG4gIH1cbn1cbiJdfQ==