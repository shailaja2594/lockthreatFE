/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Renderer2, ContentChild, Inject, PLATFORM_ID, ViewEncapsulation } from '@angular/core';
import * as ko from 'knockout';
import { Report } from "devexpress-reporting/dx-webdocumentviewer";
import { DxReportingComponent } from '../dx-reporting-component';
import { DxReportViewerRequestOptionsComponent } from './dxrv-request-options';
import { DxReportViewerCallbacksComponent } from './dxrv-callbacks';
import { DxReportViewerMobileModeSettingsComponent } from './dxrv-mobile-mode-settings.component';
import { DxReportViewerRemoteSettingsComponent } from './dxrv-remote-settings.component';
import { DxReportViewerTabPanelSettingsComponent } from './dxrv-tabpanel-settings.component';
var DxReportViewerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxReportViewerComponent, _super);
    function DxReportViewerComponent(renderer, platformId) {
        var _this = _super.call(this, renderer, platformId) || this;
        _this.koReportUrl = ko.observable();
        return _this;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    DxReportViewerComponent.prototype.getKoBinding = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new Report.Preview.JSReportViewerBinding(options, this.getEventRaiser());
    };
    /**
     * @return {?}
     */
    DxReportViewerComponent.prototype.getCallbacks = /**
     * @return {?}
     */
    function () {
        return this.callbacksComponent;
    };
    /**
     * @return {?}
     */
    DxReportViewerComponent.prototype.getControlOptions = /**
     * @return {?}
     */
    function () {
        return {
            rtl: this.rtl,
            isMobile: this.isMobile,
            reportUrl: this.koReportUrl,
            requestOptions: this.requestOptionsComponent,
            mobileModeSettings: this.mobileModeSettingsComponent,
            remoteSettings: this.remoteSettingsComponent,
            tabPanelSettings: this.tabPanelSettingsComponent,
            callbacks: {}
        };
    };
    /**
     * @return {?}
     */
    DxReportViewerComponent.prototype.GetPreviewModel = /**
     * @return {?}
     */
    function () {
        return this.bindingSender.GetPreviewModel();
    };
    Object.defineProperty(DxReportViewerComponent.prototype, "reportUrl", {
        get: /**
         * @return {?}
         */
        function () {
            return this.koReportUrl();
        },
        set: /**
         * @param {?} reportUrl
         * @return {?}
         */
        function (reportUrl) {
            this.koReportUrl(reportUrl);
        },
        enumerable: true,
        configurable: true
    });
    DxReportViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dx-report-viewer',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div #control [ngClass]=\"cssClass\" [ngStyle]=\"{'width': width, 'height': height }\">\n  <div data-bind=\"dxReportViewer: $data\"></div>\n</div>",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    DxReportViewerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    DxReportViewerComponent.propDecorators = {
        requestOptionsComponent: [{ type: ContentChild, args: [DxReportViewerRequestOptionsComponent,] }],
        callbacksComponent: [{ type: ContentChild, args: [DxReportViewerCallbacksComponent,] }],
        mobileModeSettingsComponent: [{ type: ContentChild, args: [DxReportViewerMobileModeSettingsComponent,] }],
        remoteSettingsComponent: [{ type: ContentChild, args: [DxReportViewerRemoteSettingsComponent,] }],
        tabPanelSettingsComponent: [{ type: ContentChild, args: [DxReportViewerTabPanelSettingsComponent,] }],
        isMobile: [{ type: Input }],
        reportUrl: [{ type: Input }]
    };
    return DxReportViewerComponent;
}(DxReportingComponent));
export { DxReportViewerComponent };
if (false) {
    /** @type {?} */
    DxReportViewerComponent.prototype.koReportUrl;
    /** @type {?} */
    DxReportViewerComponent.prototype.requestOptionsComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.callbacksComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.mobileModeSettingsComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.remoteSettingsComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.tabPanelSettingsComponent;
    /** @type {?} */
    DxReportViewerComponent.prototype.isMobile;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHgtcmVwb3J0LXZpZXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kZXZleHByZXNzLXJlcG9ydGluZy1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2R4LXJlcG9ydC12aWV3ZXIvZHgtcmVwb3J0LXZpZXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWpFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXBFLE9BQU8sRUFBRSx5Q0FBeUMsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRTdGO0lBUTZDLG1EQUF5QjtJQWtCcEUsaUNBQVksUUFBbUIsRUFBdUIsVUFBa0I7UUFBeEUsWUFDRSxrQkFBTSxRQUFRLEVBQUUsVUFBVSxDQUFDLFNBQzVCO1FBbkJELGlCQUFXLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDOztJQW1COUIsQ0FBQzs7Ozs7SUFFRCw4Q0FBWTs7OztJQUFaLFVBQWEsT0FBWTtRQUN2QixPQUFPLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDbEYsQ0FBQzs7OztJQUNELDhDQUFZOzs7SUFBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7Ozs7SUFDRCxtREFBaUI7OztJQUFqQjtRQUNFLE9BQU87WUFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzNCLGNBQWMsRUFBRSxJQUFJLENBQUMsdUJBQXVCO1lBQzVDLGtCQUFrQixFQUFFLElBQUksQ0FBQywyQkFBMkI7WUFDcEQsY0FBYyxFQUFFLElBQUksQ0FBQyx1QkFBdUI7WUFDNUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLHlCQUF5QjtZQUNoRCxTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7SUFDSixDQUFDOzs7O0lBRUQsaURBQWU7OztJQUFmO1FBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFJRCxzQkFDSSw4Q0FBUzs7OztRQURiO1lBRUUsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUIsQ0FBQzs7Ozs7UUFDRCxVQUFjLFNBQWlCO1lBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUIsQ0FBQzs7O09BSEE7O2dCQTFERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLFFBQVEsRUFBRSxvSkFFTDtvQkFDTCxNQUFNLEVBQUUsRUFBRTtpQkFDWDs7OztnQkFuQjBCLFNBQVM7Z0JBc0NnQyxNQUFNLHVCQUF0QyxNQUFNLFNBQUMsV0FBVzs7OzBDQWZuRCxZQUFZLFNBQUMscUNBQXFDO3FDQUdsRCxZQUFZLFNBQUMsZ0NBQWdDOzhDQUc3QyxZQUFZLFNBQUMseUNBQXlDOzBDQUd0RCxZQUFZLFNBQUMscUNBQXFDOzRDQUdsRCxZQUFZLFNBQUMsdUNBQXVDOzJCQThCcEQsS0FBSzs0QkFFTCxLQUFLOztJQU9SLDhCQUFDO0NBQUEsQUE5REQsQ0FRNkMsb0JBQW9CLEdBc0RoRTtTQXREWSx1QkFBdUI7OztJQUNsQyw4Q0FBOEI7O0lBRTlCLDBEQUMrRDs7SUFFL0QscURBQ3FEOztJQUVyRCw4REFDdUU7O0lBRXZFLDBEQUMrRDs7SUFFL0QsNERBQ21FOztJQTZCbkUsMkNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgUmVuZGVyZXIyLCBDb250ZW50Q2hpbGQsIEluamVjdCwgUExBVEZPUk1fSUQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBrbyBmcm9tICdrbm9ja291dCc7XG5pbXBvcnQgeyBSZXBvcnQgfSBmcm9tIFwiZGV2ZXhwcmVzcy1yZXBvcnRpbmcvZHgtd2ViZG9jdW1lbnR2aWV3ZXJcIjtcbmltcG9ydCB7IER4UmVwb3J0aW5nQ29tcG9uZW50IH0gZnJvbSAnLi4vZHgtcmVwb3J0aW5nLWNvbXBvbmVudCc7XG5cbmltcG9ydCB7IER4UmVwb3J0Vmlld2VyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL2R4cnYtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IER4UmVwb3J0Vmlld2VyQ2FsbGJhY2tzQ29tcG9uZW50IH0gZnJvbSAnLi9keHJ2LWNhbGxiYWNrcyc7XG5cbmltcG9ydCB7IER4UmVwb3J0Vmlld2VyTW9iaWxlTW9kZVNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9keHJ2LW1vYmlsZS1tb2RlLXNldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeFJlcG9ydFZpZXdlclJlbW90ZVNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9keHJ2LXJlbW90ZS1zZXR0aW5ncy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRHhSZXBvcnRWaWV3ZXJUYWJQYW5lbFNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9keHJ2LXRhYnBhbmVsLXNldHRpbmdzLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXJlcG9ydC12aWV3ZXInLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICB0ZW1wbGF0ZTogYDxkaXYgI2NvbnRyb2wgW25nQ2xhc3NdPVwiY3NzQ2xhc3NcIiBbbmdTdHlsZV09XCJ7J3dpZHRoJzogd2lkdGgsICdoZWlnaHQnOiBoZWlnaHQgfVwiPlxuICA8ZGl2IGRhdGEtYmluZD1cImR4UmVwb3J0Vmlld2VyOiAkZGF0YVwiPjwvZGl2PlxuPC9kaXY+YCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBEeFJlcG9ydFZpZXdlckNvbXBvbmVudCBleHRlbmRzIER4UmVwb3J0aW5nQ29tcG9uZW50PGFueT4ge1xuICBrb1JlcG9ydFVybCA9IGtvLm9ic2VydmFibGUoKTtcbiAgXG4gIEBDb250ZW50Q2hpbGQoRHhSZXBvcnRWaWV3ZXJSZXF1ZXN0T3B0aW9uc0NvbXBvbmVudClcbiAgcmVxdWVzdE9wdGlvbnNDb21wb25lbnQ6IER4UmVwb3J0Vmlld2VyUmVxdWVzdE9wdGlvbnNDb21wb25lbnQ7XG4gIFxuICBAQ29udGVudENoaWxkKER4UmVwb3J0Vmlld2VyQ2FsbGJhY2tzQ29tcG9uZW50KVxuICBjYWxsYmFja3NDb21wb25lbnQ6IER4UmVwb3J0Vmlld2VyQ2FsbGJhY2tzQ29tcG9uZW50O1xuXG4gIEBDb250ZW50Q2hpbGQoRHhSZXBvcnRWaWV3ZXJNb2JpbGVNb2RlU2V0dGluZ3NDb21wb25lbnQpXG4gIG1vYmlsZU1vZGVTZXR0aW5nc0NvbXBvbmVudDogRHhSZXBvcnRWaWV3ZXJNb2JpbGVNb2RlU2V0dGluZ3NDb21wb25lbnQ7XG5cbiAgQENvbnRlbnRDaGlsZChEeFJlcG9ydFZpZXdlclJlbW90ZVNldHRpbmdzQ29tcG9uZW50KVxuICByZW1vdGVTZXR0aW5nc0NvbXBvbmVudDogRHhSZXBvcnRWaWV3ZXJSZW1vdGVTZXR0aW5nc0NvbXBvbmVudDtcblxuICBAQ29udGVudENoaWxkKER4UmVwb3J0Vmlld2VyVGFiUGFuZWxTZXR0aW5nc0NvbXBvbmVudClcbiAgdGFiUGFuZWxTZXR0aW5nc0NvbXBvbmVudDogRHhSZXBvcnRWaWV3ZXJUYWJQYW5lbFNldHRpbmdzQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IE9iamVjdCkgeyBcbiAgICBzdXBlcihyZW5kZXJlciwgcGxhdGZvcm1JZCk7XG4gIH1cbiAgXG4gIGdldEtvQmluZGluZyhvcHRpb25zOiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IFJlcG9ydC5QcmV2aWV3LkpTUmVwb3J0Vmlld2VyQmluZGluZyhvcHRpb25zLCB0aGlzLmdldEV2ZW50UmFpc2VyKCkpO1xuICB9XG4gIGdldENhbGxiYWNrcygpOiBhbnl7XG4gICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tzQ29tcG9uZW50O1xuICB9XG4gIGdldENvbnRyb2xPcHRpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBydGw6IHRoaXMucnRsLFxuICAgICAgaXNNb2JpbGU6IHRoaXMuaXNNb2JpbGUsXG4gICAgICByZXBvcnRVcmw6IHRoaXMua29SZXBvcnRVcmwsIFxuICAgICAgcmVxdWVzdE9wdGlvbnM6IHRoaXMucmVxdWVzdE9wdGlvbnNDb21wb25lbnQsXG4gICAgICBtb2JpbGVNb2RlU2V0dGluZ3M6IHRoaXMubW9iaWxlTW9kZVNldHRpbmdzQ29tcG9uZW50LFxuICAgICAgcmVtb3RlU2V0dGluZ3M6IHRoaXMucmVtb3RlU2V0dGluZ3NDb21wb25lbnQsXG4gICAgICB0YWJQYW5lbFNldHRpbmdzOiB0aGlzLnRhYlBhbmVsU2V0dGluZ3NDb21wb25lbnQsXG4gICAgICBjYWxsYmFja3M6IHt9XG4gICAgfTtcbiAgfVxuXG4gIEdldFByZXZpZXdNb2RlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5nU2VuZGVyLkdldFByZXZpZXdNb2RlbCgpO1xuICB9XG5cbiAgQElucHV0KCkgaXNNb2JpbGU6IGJvb2xlYW47XG4gXG4gIEBJbnB1dCgpXG4gIGdldCByZXBvcnRVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMua29SZXBvcnRVcmwoKTtcbiAgfVxuICBzZXQgcmVwb3J0VXJsKHJlcG9ydFVybDogc3RyaW5nKSB7XG4gICAgdGhpcy5rb1JlcG9ydFVybChyZXBvcnRVcmwpO1xuICB9XG59XG4iXX0=