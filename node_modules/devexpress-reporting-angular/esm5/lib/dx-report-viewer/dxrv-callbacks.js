/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter } from '@angular/core';
var DxReportViewerCallbacksComponent = /** @class */ (function () {
    function DxReportViewerCallbacksComponent() {
        this.CustomizeElements = new EventEmitter();
        this.PreviewClick = new EventEmitter();
        this.EditingFieldChanged = new EventEmitter();
        this.DocumentReady = new EventEmitter();
        this.CustomizeExportOptions = new EventEmitter();
        this.CustomizeParameterEditors = new EventEmitter();
        this.CustomizeParameterLookUpSource = new EventEmitter();
        this.ParametersReset = new EventEmitter();
        this.ParametersSubmitted = new EventEmitter();
        this.CustomizeMenuActions = new EventEmitter();
        this.CustomizeLocalization = new EventEmitter();
        this.BeforeRender = new EventEmitter();
        this.OnServerError = new EventEmitter();
    }
    DxReportViewerCallbacksComponent.decorators = [
        { type: Component, args: [{
                    template: '',
                    selector: 'dxrv-callbacks'
                },] },
    ];
    DxReportViewerCallbacksComponent.propDecorators = {
        CustomizeElements: [{ type: Output }],
        PreviewClick: [{ type: Output }],
        EditingFieldChanged: [{ type: Output }],
        DocumentReady: [{ type: Output }],
        CustomizeExportOptions: [{ type: Output }],
        CustomizeParameterEditors: [{ type: Output }],
        CustomizeParameterLookUpSource: [{ type: Output }],
        ParametersReset: [{ type: Output }],
        ParametersSubmitted: [{ type: Output }],
        CustomizeMenuActions: [{ type: Output }],
        CustomizeLocalization: [{ type: Output }],
        BeforeRender: [{ type: Output }],
        OnServerError: [{ type: Output }]
    };
    return DxReportViewerCallbacksComponent;
}());
export { DxReportViewerCallbacksComponent };
if (false) {
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.CustomizeElements;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.PreviewClick;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.EditingFieldChanged;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.DocumentReady;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.CustomizeExportOptions;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.CustomizeParameterEditors;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.CustomizeParameterLookUpSource;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.ParametersReset;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.ParametersSubmitted;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.CustomizeMenuActions;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.CustomizeLocalization;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.BeforeRender;
    /** @type {?} */
    DxReportViewerCallbacksComponent.prototype.OnServerError;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHhydi1jYWxsYmFja3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kZXZleHByZXNzLXJlcG9ydGluZy1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2R4LXJlcG9ydC12aWV3ZXIvZHhydi1jYWxsYmFja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVoRTtJQUFBO1FBS2Msc0JBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUM1QyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDdkMsd0JBQW1CLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUM5QyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDeEMsMkJBQXNCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUNqRCw4QkFBeUIsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3BELG1DQUE4QixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDekQsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQzFDLHdCQUFtQixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDOUMseUJBQW9CLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUMvQywwQkFBcUIsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ2hELGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUN2QyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFDdEQsQ0FBQzs7Z0JBbEJBLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsRUFBRTtvQkFDWixRQUFRLEVBQUUsZ0JBQWdCO2lCQUM3Qjs7O29DQUVJLE1BQU07K0JBQ04sTUFBTTtzQ0FDTixNQUFNO2dDQUNOLE1BQU07eUNBQ04sTUFBTTs0Q0FDTixNQUFNO2lEQUNOLE1BQU07a0NBQ04sTUFBTTtzQ0FDTixNQUFNO3VDQUNOLE1BQU07d0NBQ04sTUFBTTsrQkFDTixNQUFNO2dDQUNOLE1BQU07O0lBQ1gsdUNBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWRZLGdDQUFnQzs7O0lBQ3pDLDZEQUFzRDs7SUFDdEQsd0RBQWlEOztJQUNqRCwrREFBd0Q7O0lBQ3hELHlEQUFrRDs7SUFDbEQsa0VBQTJEOztJQUMzRCxxRUFBOEQ7O0lBQzlELDBFQUFtRTs7SUFDbkUsMkRBQW9EOztJQUNwRCwrREFBd0Q7O0lBQ3hELGdFQUF5RDs7SUFDekQsaUVBQTBEOztJQUMxRCx3REFBaUQ7O0lBQ2pELHlEQUFrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgdGVtcGxhdGU6ICcnLFxuICAgIHNlbGVjdG9yOiAnZHhydi1jYWxsYmFja3MnXG59KVxuZXhwb3J0IGNsYXNzIER4UmVwb3J0Vmlld2VyQ2FsbGJhY2tzQ29tcG9uZW50IHtcbiAgICBAT3V0cHV0KCkgQ3VzdG9taXplRWxlbWVudHMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgUHJldmlld0NsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEVkaXRpbmdGaWVsZENoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgRG9jdW1lbnRSZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBDdXN0b21pemVFeHBvcnRPcHRpb25zID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEN1c3RvbWl6ZVBhcmFtZXRlckVkaXRvcnMgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgQ3VzdG9taXplUGFyYW1ldGVyTG9va1VwU291cmNlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIFBhcmFtZXRlcnNSZXNldCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBQYXJhbWV0ZXJzU3VibWl0dGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEN1c3RvbWl6ZU1lbnVBY3Rpb25zID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIEN1c3RvbWl6ZUxvY2FsaXphdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBCZWZvcmVSZW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgT25TZXJ2ZXJFcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xufVxuIl19