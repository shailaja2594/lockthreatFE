/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Renderer2, ElementRef, ViewChild, Input, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as ko from "knockout";
/**
 * @abstract
 * @template T
 */
var DxReportingComponent = /** @class */ (function () {
    function DxReportingComponent(renderer, platformId) {
        this.renderer = renderer;
        this.platformId = platformId;
        this.height = '800px';
        this.width = '100%';
        this.cssClass = '';
    }
    /**
     * @return {?}
     */
    DxReportingComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            this.callbacks = this.getCallbacks();
            /** @type {?} */
            var options = this.getControlOptions();
            /** @type {?} */
            var binding = this.getKoBinding(options);
            this.bindingSender = binding.sender;
            binding.applyBindings(this.control.nativeElement);
        }
    };
    /**
     * @return {?}
     */
    DxReportingComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        ko.cleanNode(this.control.nativeElement);
    };
    /**
     * @return {?}
     */
    DxReportingComponent.prototype.getEventRaiser = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var component = this;
        return function (eventName, args) { return component.callbacks && component.callbacks[eventName] && component.callbacks[eventName].emit({ sender: component.bindingSender, args: args, component: component }); };
    };
    /** @nocollapse */
    DxReportingComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    DxReportingComponent.propDecorators = {
        control: [{ type: ViewChild, args: ["control",] }],
        height: [{ type: Input }],
        width: [{ type: Input }],
        cssClass: [{ type: Input }],
        rtl: [{ type: Input }]
    };
    return DxReportingComponent;
}());
export { DxReportingComponent };
if (false) {
    /** @type {?} */
    DxReportingComponent.prototype.bindingSender;
    /** @type {?} */
    DxReportingComponent.prototype.callbacks;
    /** @type {?} */
    DxReportingComponent.prototype.control;
    /** @type {?} */
    DxReportingComponent.prototype.height;
    /** @type {?} */
    DxReportingComponent.prototype.width;
    /** @type {?} */
    DxReportingComponent.prototype.cssClass;
    /** @type {?} */
    DxReportingComponent.prototype.rtl;
    /** @type {?} */
    DxReportingComponent.prototype.renderer;
    /** @type {?} */
    DxReportingComponent.prototype.platformId;
    /**
     * @abstract
     * @return {?}
     */
    DxReportingComponent.prototype.getControlOptions = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DxReportingComponent.prototype.getCallbacks = function () { };
    /**
     * @abstract
     * @param {?} options
     * @return {?}
     */
    DxReportingComponent.prototype.getKoBinding = function (options) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHgtcmVwb3J0aW5nLWNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RldmV4cHJlc3MtcmVwb3J0aW5nLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZHgtcmVwb3J0aW5nLWNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN2SCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFFL0I7SUFNRSw4QkFBb0IsUUFBbUIsRUFBK0IsVUFBa0I7UUFBcEUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUErQixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBdUIvRSxXQUFNLEdBQVcsT0FBTyxDQUFDO1FBQ3pCLFVBQUssR0FBVyxNQUFNLENBQUM7UUFDdkIsYUFBUSxHQUFXLEVBQUUsQ0FBQztJQXpCNkQsQ0FBQzs7OztJQUs3Riw4Q0FBZTs7O0lBQWY7UUFDRSxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7Z0JBQy9CLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7O2dCQUNwQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7WUFDeEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ3BDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7Ozs7SUFDRCwwQ0FBVzs7O0lBQVg7UUFDRSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELDZDQUFjOzs7SUFBZDs7WUFDTSxTQUFTLEdBQUcsSUFBSTtRQUNwQixPQUFPLFVBQUMsU0FBUyxFQUFFLElBQUssSUFBSyxPQUFBLFNBQVMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQW5LLENBQW1LLENBQUM7SUFDbk0sQ0FBQzs7O2dCQS9CcUIsU0FBUztnQkFVbUQsTUFBTSx1QkFBOUMsTUFBTSxTQUFDLFdBQVc7OzswQkFIM0QsU0FBUyxTQUFDLFNBQVM7eUJBMEJuQixLQUFLO3dCQUNMLEtBQUs7MkJBQ0wsS0FBSztzQkFDTCxLQUFLOztJQUNSLDJCQUFDO0NBQUEsQUFqQ0QsSUFpQ0M7U0FqQ3FCLG9CQUFvQjs7O0lBQ3hDLDZDQUFtQjs7SUFDbkIseUNBQWU7O0lBQ2YsdUNBQ29COztJQXlCcEIsc0NBQWtDOztJQUNsQyxxQ0FBZ0M7O0lBQ2hDLHdDQUErQjs7SUFDL0IsbUNBQXNCOztJQTFCVix3Q0FBMkI7O0lBQUUsMENBQStDOzs7OztJQUN4RixtRUFBZ0M7Ozs7O0lBQ2hDLDhEQUE2Qjs7Ozs7O0lBQzdCLHFFQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBJbnB1dCwgSW5qZWN0LCBQTEFURk9STV9JRCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgKiBhcyBrbyBmcm9tIFwia25vY2tvdXRcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER4UmVwb3J0aW5nQ29tcG9uZW50PFQ+IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgYmluZGluZ1NlbmRlcjogYW55O1xuICBjYWxsYmFja3M6IGFueTtcbiAgQFZpZXdDaGlsZChcImNvbnRyb2xcIilcbiAgY29udHJvbDogRWxlbWVudFJlZjtcbiAgXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QpIHsgfVxuICBhYnN0cmFjdCBnZXRDb250cm9sT3B0aW9ucygpOiBUO1xuICBhYnN0cmFjdCBnZXRDYWxsYmFja3MoKTogYW55O1xuICBhYnN0cmFjdCBnZXRLb0JpbmRpbmcob3B0aW9uczogVCk6IGFueTtcbiAgXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5jYWxsYmFja3MgPSB0aGlzLmdldENhbGxiYWNrcygpO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0Q29udHJvbE9wdGlvbnMoKTtcbiAgICAgIHZhciBiaW5kaW5nID0gdGhpcy5nZXRLb0JpbmRpbmcob3B0aW9ucyk7XG4gICAgICB0aGlzLmJpbmRpbmdTZW5kZXIgPSBiaW5kaW5nLnNlbmRlcjtcbiAgICAgIGJpbmRpbmcuYXBwbHlCaW5kaW5ncyh0aGlzLmNvbnRyb2wubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG4gIG5nT25EZXN0cm95KCkge1xuICAgIGtvLmNsZWFuTm9kZSh0aGlzLmNvbnRyb2wubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICBnZXRFdmVudFJhaXNlcigpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcztcbiAgICByZXR1cm4gKGV2ZW50TmFtZSwgYXJncz8pID0+IGNvbXBvbmVudC5jYWxsYmFja3MgJiYgY29tcG9uZW50LmNhbGxiYWNrc1tldmVudE5hbWVdICYmIGNvbXBvbmVudC5jYWxsYmFja3NbZXZlbnROYW1lXS5lbWl0KHsgc2VuZGVyOiBjb21wb25lbnQuYmluZGluZ1NlbmRlciwgYXJnczogYXJncywgY29tcG9uZW50OiBjb21wb25lbnQgfSk7XG4gIH1cblxuICBASW5wdXQoKSBoZWlnaHQ6IHN0cmluZyA9ICc4MDBweCc7XG4gIEBJbnB1dCgpIHdpZHRoOiBzdHJpbmcgPSAnMTAwJSc7XG4gIEBJbnB1dCgpIGNzc0NsYXNzOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgcnRsOiBib29sZWFuO1xufVxuIl19