(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('knockout'), require('devexpress-reporting/dx-webdocumentviewer'), require('devexpress-reporting/dx-reportdesigner')) :
    typeof define === 'function' && define.amd ? define('devexpress-reporting-angular', ['exports', '@angular/core', '@angular/common', 'knockout', 'devexpress-reporting/dx-webdocumentviewer', 'devexpress-reporting/dx-reportdesigner'], factory) :
    (factory((global['devexpress-reporting-angular'] = {}),global.ng.core,global.ng.common,null,null,null));
}(this, (function (exports,core,common,ko,dxWebdocumentviewer,dxReportdesigner) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportViewerCallbacksComponent = /** @class */ (function () {
        function DxReportViewerCallbacksComponent() {
            this.CustomizeElements = new core.EventEmitter();
            this.PreviewClick = new core.EventEmitter();
            this.EditingFieldChanged = new core.EventEmitter();
            this.DocumentReady = new core.EventEmitter();
            this.CustomizeExportOptions = new core.EventEmitter();
            this.CustomizeParameterEditors = new core.EventEmitter();
            this.CustomizeParameterLookUpSource = new core.EventEmitter();
            this.ParametersReset = new core.EventEmitter();
            this.ParametersSubmitted = new core.EventEmitter();
            this.CustomizeMenuActions = new core.EventEmitter();
            this.CustomizeLocalization = new core.EventEmitter();
            this.BeforeRender = new core.EventEmitter();
            this.OnServerError = new core.EventEmitter();
        }
        DxReportViewerCallbacksComponent.decorators = [
            { type: core.Component, args: [{
                        template: '',
                        selector: 'dxrv-callbacks'
                    },] },
        ];
        DxReportViewerCallbacksComponent.propDecorators = {
            CustomizeElements: [{ type: core.Output }],
            PreviewClick: [{ type: core.Output }],
            EditingFieldChanged: [{ type: core.Output }],
            DocumentReady: [{ type: core.Output }],
            CustomizeExportOptions: [{ type: core.Output }],
            CustomizeParameterEditors: [{ type: core.Output }],
            CustomizeParameterLookUpSource: [{ type: core.Output }],
            ParametersReset: [{ type: core.Output }],
            ParametersSubmitted: [{ type: core.Output }],
            CustomizeMenuActions: [{ type: core.Output }],
            CustomizeLocalization: [{ type: core.Output }],
            BeforeRender: [{ type: core.Output }],
            OnServerError: [{ type: core.Output }]
        };
        return DxReportViewerCallbacksComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportViewerRequestOptionsComponent = /** @class */ (function () {
        function DxReportViewerRequestOptionsComponent() {
            this.invokeAction = "/DXXRDV";
        }
        DxReportViewerRequestOptionsComponent.decorators = [
            { type: core.Component, args: [{
                        template: '',
                        selector: 'dxrv-request-options'
                    },] },
        ];
        DxReportViewerRequestOptionsComponent.propDecorators = {
            invokeAction: [{ type: core.Input }],
            getLocalizationAction: [{ type: core.Input }],
            host: [{ type: core.Input }]
        };
        return DxReportViewerRequestOptionsComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template T
     */
    var DxReportingComponent = /** @class */ (function () {
        function DxReportingComponent(renderer, platformId) {
            this.renderer = renderer;
            this.platformId = platformId;
            this.height = '800px';
            this.width = '100%';
            this.cssClass = '';
        }
        /**
         * @return {?}
         */
        DxReportingComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    this.callbacks = this.getCallbacks();
                    /** @type {?} */
                    var options = this.getControlOptions();
                    /** @type {?} */
                    var binding = this.getKoBinding(options);
                    this.bindingSender = binding.sender;
                    binding.applyBindings(this.control.nativeElement);
                }
            };
        /**
         * @return {?}
         */
        DxReportingComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                ko.cleanNode(this.control.nativeElement);
            };
        /**
         * @return {?}
         */
        DxReportingComponent.prototype.getEventRaiser = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var component = this;
                return function (eventName, args) { return component.callbacks && component.callbacks[eventName] && component.callbacks[eventName].emit({ sender: component.bindingSender, args: args, component: component }); };
            };
        /** @nocollapse */
        DxReportingComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        DxReportingComponent.propDecorators = {
            control: [{ type: core.ViewChild, args: ["control",] }],
            height: [{ type: core.Input }],
            width: [{ type: core.Input }],
            cssClass: [{ type: core.Input }],
            rtl: [{ type: core.Input }]
        };
        return DxReportingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportViewerMobileModeSettingsComponent = /** @class */ (function () {
        function DxReportViewerMobileModeSettingsComponent() {
        }
        DxReportViewerMobileModeSettingsComponent.decorators = [
            { type: core.Component, args: [{
                        template: '',
                        selector: 'dxrv-mobile-mode-settings'
                    },] },
        ];
        DxReportViewerMobileModeSettingsComponent.propDecorators = {
            readerMode: [{ type: core.Input }],
            animationEnabled: [{ type: core.Input }]
        };
        return DxReportViewerMobileModeSettingsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportViewerRemoteSettingsComponent = /** @class */ (function () {
        function DxReportViewerRemoteSettingsComponent() {
        }
        DxReportViewerRemoteSettingsComponent.decorators = [
            { type: core.Component, args: [{
                        template: '',
                        selector: 'dxrv-remote-settings'
                    },] },
        ];
        DxReportViewerRemoteSettingsComponent.propDecorators = {
            authToken: [{ type: core.Input }],
            serverUri: [{ type: core.Input }]
        };
        return DxReportViewerRemoteSettingsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportViewerTabPanelSettingsComponent = /** @class */ (function () {
        function DxReportViewerTabPanelSettingsComponent() {
        }
        DxReportViewerTabPanelSettingsComponent.decorators = [
            { type: core.Component, args: [{
                        template: '',
                        selector: 'dxrv-tabpanel-settings'
                    },] },
        ];
        DxReportViewerTabPanelSettingsComponent.propDecorators = {
            position: [{ type: core.Input }],
            width: [{ type: core.Input }]
        };
        return DxReportViewerTabPanelSettingsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportViewerComponent = /** @class */ (function (_super) {
        __extends(DxReportViewerComponent, _super);
        function DxReportViewerComponent(renderer, platformId) {
            var _this = _super.call(this, renderer, platformId) || this;
            _this.koReportUrl = ko.observable();
            return _this;
        }
        /**
         * @param {?} options
         * @return {?}
         */
        DxReportViewerComponent.prototype.getKoBinding = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return new dxWebdocumentviewer.Report.Preview.JSReportViewerBinding(options, this.getEventRaiser());
            };
        /**
         * @return {?}
         */
        DxReportViewerComponent.prototype.getCallbacks = /**
         * @return {?}
         */
            function () {
                return this.callbacksComponent;
            };
        /**
         * @return {?}
         */
        DxReportViewerComponent.prototype.getControlOptions = /**
         * @return {?}
         */
            function () {
                return {
                    rtl: this.rtl,
                    isMobile: this.isMobile,
                    reportUrl: this.koReportUrl,
                    requestOptions: this.requestOptionsComponent,
                    mobileModeSettings: this.mobileModeSettingsComponent,
                    remoteSettings: this.remoteSettingsComponent,
                    tabPanelSettings: this.tabPanelSettingsComponent,
                    callbacks: {}
                };
            };
        /**
         * @return {?}
         */
        DxReportViewerComponent.prototype.GetPreviewModel = /**
         * @return {?}
         */
            function () {
                return this.bindingSender.GetPreviewModel();
            };
        Object.defineProperty(DxReportViewerComponent.prototype, "reportUrl", {
            get: /**
             * @return {?}
             */ function () {
                return this.koReportUrl();
            },
            set: /**
             * @param {?} reportUrl
             * @return {?}
             */ function (reportUrl) {
                this.koReportUrl(reportUrl);
            },
            enumerable: true,
            configurable: true
        });
        DxReportViewerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'dx-report-viewer',
                        encapsulation: core.ViewEncapsulation.None,
                        template: "<div #control [ngClass]=\"cssClass\" [ngStyle]=\"{'width': width, 'height': height }\">\n  <div data-bind=\"dxReportViewer: $data\"></div>\n</div>",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        DxReportViewerComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        DxReportViewerComponent.propDecorators = {
            requestOptionsComponent: [{ type: core.ContentChild, args: [DxReportViewerRequestOptionsComponent,] }],
            callbacksComponent: [{ type: core.ContentChild, args: [DxReportViewerCallbacksComponent,] }],
            mobileModeSettingsComponent: [{ type: core.ContentChild, args: [DxReportViewerMobileModeSettingsComponent,] }],
            remoteSettingsComponent: [{ type: core.ContentChild, args: [DxReportViewerRemoteSettingsComponent,] }],
            tabPanelSettingsComponent: [{ type: core.ContentChild, args: [DxReportViewerTabPanelSettingsComponent,] }],
            isMobile: [{ type: core.Input }],
            reportUrl: [{ type: core.Input }]
        };
        return DxReportViewerComponent;
    }(DxReportingComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportViewerModule = /** @class */ (function () {
        function DxReportViewerModule() {
        }
        DxReportViewerModule.decorators = [
            { type: core.NgModule, args: [{
                        id: "DxReportViewerModule",
                        imports: [common.CommonModule],
                        declarations: [
                            DxReportViewerComponent,
                            DxReportViewerCallbacksComponent,
                            DxReportViewerMobileModeSettingsComponent,
                            DxReportViewerRemoteSettingsComponent,
                            DxReportViewerRequestOptionsComponent,
                            DxReportViewerTabPanelSettingsComponent
                        ],
                        exports: [
                            DxReportViewerComponent,
                            DxReportViewerCallbacksComponent,
                            DxReportViewerMobileModeSettingsComponent,
                            DxReportViewerRemoteSettingsComponent,
                            DxReportViewerRequestOptionsComponent,
                            DxReportViewerTabPanelSettingsComponent
                        ]
                    },] },
        ];
        return DxReportViewerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportDesignerRequestOptionsComponent = /** @class */ (function () {
        function DxReportDesignerRequestOptionsComponent() {
        }
        DxReportDesignerRequestOptionsComponent.decorators = [
            { type: core.Component, args: [{
                        template: '',
                        selector: 'dxrd-request-options'
                    },] },
        ];
        DxReportDesignerRequestOptionsComponent.propDecorators = {
            getDesignerModelAction: [{ type: core.Input }],
            getLocalizationAction: [{ type: core.Input }],
            host: [{ type: core.Input }]
        };
        return DxReportDesignerRequestOptionsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportDesignerCallbacksComponent = /** @class */ (function () {
        function DxReportDesignerCallbacksComponent() {
            this.CustomizeElements = new core.EventEmitter();
            this.ExitDesigner = new core.EventEmitter();
            this.ReportSaving = new core.EventEmitter();
            this.ReportSaved = new core.EventEmitter();
            this.ReportOpened = new core.EventEmitter();
            this.ReportOpening = new core.EventEmitter();
            this.TabChanged = new core.EventEmitter();
            this.ComponentAdded = new core.EventEmitter();
            this.CustomizeParameterEditors = new core.EventEmitter();
            this.CustomizeSaveDialog = new core.EventEmitter();
            this.CustomizeOpenDialog = new core.EventEmitter();
            this.CustomizeToolbox = new core.EventEmitter();
            this.CustomizeFieldListActions = new core.EventEmitter();
            this.CustomizeMenuActions = new core.EventEmitter();
            this.CustomizeLocalization = new core.EventEmitter();
            this.BeforeRender = new core.EventEmitter();
            this.OnServerError = new core.EventEmitter();
            this.PreviewClick = new core.EventEmitter();
            this.PreviewCustomizeElements = new core.EventEmitter();
            this.PreviewCustomizeMenuActions = new core.EventEmitter();
            this.PreviewEditingFieldChanged = new core.EventEmitter();
            this.PreviewDocumentReady = new core.EventEmitter();
            this.PreviewParametersReset = new core.EventEmitter();
            this.PreviewCustomizeExportOptions = new core.EventEmitter();
            this.ParametersSubmitted = new core.EventEmitter();
        }
        DxReportDesignerCallbacksComponent.decorators = [
            { type: core.Component, args: [{
                        template: '',
                        selector: 'dxrd-callbacks'
                    },] },
        ];
        DxReportDesignerCallbacksComponent.propDecorators = {
            CustomizeElements: [{ type: core.Output }],
            ExitDesigner: [{ type: core.Output }],
            ReportSaving: [{ type: core.Output }],
            ReportSaved: [{ type: core.Output }],
            ReportOpened: [{ type: core.Output }],
            ReportOpening: [{ type: core.Output }],
            TabChanged: [{ type: core.Output }],
            ComponentAdded: [{ type: core.Output }],
            CustomizeParameterEditors: [{ type: core.Output }],
            CustomizeSaveDialog: [{ type: core.Output }],
            CustomizeOpenDialog: [{ type: core.Output }],
            CustomizeToolbox: [{ type: core.Output }],
            CustomizeFieldListActions: [{ type: core.Output }],
            CustomizeMenuActions: [{ type: core.Output }],
            CustomizeLocalization: [{ type: core.Output }],
            BeforeRender: [{ type: core.Output }],
            OnServerError: [{ type: core.Output }],
            PreviewClick: [{ type: core.Output }],
            PreviewCustomizeElements: [{ type: core.Output }],
            PreviewCustomizeMenuActions: [{ type: core.Output }],
            PreviewEditingFieldChanged: [{ type: core.Output }],
            PreviewDocumentReady: [{ type: core.Output }],
            PreviewParametersReset: [{ type: core.Output }],
            PreviewCustomizeExportOptions: [{ type: core.Output }],
            ParametersSubmitted: [{ type: core.Output }]
        };
        return DxReportDesignerCallbacksComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportDesignerComponent = /** @class */ (function (_super) {
        __extends(DxReportDesignerComponent, _super);
        function DxReportDesignerComponent(renderer, platformId) {
            var _this = _super.call(this, renderer, platformId) || this;
            _this.koReportUrl = ko.observable();
            return _this;
        }
        /**
         * @return {?}
         */
        DxReportDesignerComponent.prototype.getCallbacks = /**
         * @return {?}
         */
            function () {
                return this.callbacksComponent;
            };
        /**
         * @param {?} options
         * @return {?}
         */
        DxReportDesignerComponent.prototype.getKoBinding = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return new dxReportdesigner.Designer.Report.JSReportDesignerBinding(options, this.getEventRaiser());
            };
        /**
         * @return {?}
         */
        DxReportDesignerComponent.prototype.getControlOptions = /**
         * @return {?}
         */
            function () {
                return {
                    allowMDI: this.allowMDI,
                    reportUrl: this.koReportUrl,
                    requestOptions: this.requestOptions,
                    callbacks: { designer: {}, preview: {} }
                };
            };
        /**
         * @return {?}
         */
        DxReportDesignerComponent.prototype.GetDesignerModel = /**
         * @return {?}
         */
            function () {
                return this.bindingSender.GetDesignerModel();
            };
        /**
         * @return {?}
         */
        DxReportDesignerComponent.prototype.GetPreviewModel = /**
         * @return {?}
         */
            function () {
                return this.bindingSender.GetPreviewModel();
            };
        Object.defineProperty(DxReportDesignerComponent.prototype, "reportUrl", {
            get: /**
             * @return {?}
             */ function () {
                return this.koReportUrl();
            },
            set: /**
             * @param {?} reportUrl
             * @return {?}
             */ function (reportUrl) {
                this.koReportUrl(reportUrl);
            },
            enumerable: true,
            configurable: true
        });
        DxReportDesignerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'dx-report-designer',
                        encapsulation: core.ViewEncapsulation.None,
                        template: "<div #control [ngClass]=\"cssClass\" [ngStyle]=\"{'width': width, 'height': height }\">\n  <div data-bind=\"dxReportDesigner: $data\"></div>\n</div>",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        DxReportDesignerComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        DxReportDesignerComponent.propDecorators = {
            requestOptions: [{ type: core.ContentChild, args: [DxReportDesignerRequestOptionsComponent,] }],
            callbacksComponent: [{ type: core.ContentChild, args: [DxReportDesignerCallbacksComponent,] }],
            allowMDI: [{ type: core.Input }],
            reportUrl: [{ type: core.Input }]
        };
        return DxReportDesignerComponent;
    }(DxReportingComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DxReportDesignerModule = /** @class */ (function () {
        function DxReportDesignerModule() {
        }
        DxReportDesignerModule.decorators = [
            { type: core.NgModule, args: [{
                        id: "DxReportDesignerModule",
                        imports: [common.CommonModule],
                        declarations: [
                            DxReportDesignerCallbacksComponent,
                            DxReportDesignerRequestOptionsComponent,
                            DxReportDesignerComponent
                        ],
                        exports: [
                            DxReportDesignerCallbacksComponent,
                            DxReportDesignerRequestOptionsComponent,
                            DxReportDesignerComponent
                        ]
                    },] },
        ];
        return DxReportDesignerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.DxReportViewerModule = DxReportViewerModule;
    exports.DxReportDesignerModule = DxReportDesignerModule;
    exports.DxReportDesignerComponent = DxReportDesignerComponent;
    exports.DxReportViewerComponent = DxReportViewerComponent;
    exports.ɵg = DxReportDesignerCallbacksComponent;
    exports.ɵh = DxReportDesignerRequestOptionsComponent;
    exports.ɵc = DxReportViewerCallbacksComponent;
    exports.ɵd = DxReportViewerMobileModeSettingsComponent;
    exports.ɵe = DxReportViewerRemoteSettingsComponent;
    exports.ɵb = DxReportViewerRequestOptionsComponent;
    exports.ɵf = DxReportViewerTabPanelSettingsComponent;
    exports.ɵa = DxReportingComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,