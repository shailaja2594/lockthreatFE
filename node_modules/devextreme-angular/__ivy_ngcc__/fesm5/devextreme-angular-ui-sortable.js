import { __extends, __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';
import DxSortable from 'devextreme/ui/sortable';
import { DxTemplateHost, WatcherHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxoCursorOffsetModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * Sortable is a user interface utility that allows a widget's items to be reordered via drag and drop gestures.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';

var _c0 = ["*"];
var DxSortableComponent = /** @class */ (function (_super) {
    __extends(DxSortableComponent, _super);
    function DxSortableComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
        _this._createEventEmitters([
            { subscribe: 'add', emit: 'onAdd' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'dragChange', emit: 'onDragChange' },
            { subscribe: 'dragEnd', emit: 'onDragEnd' },
            { subscribe: 'dragMove', emit: 'onDragMove' },
            { subscribe: 'dragStart', emit: 'onDragStart' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'remove', emit: 'onRemove' },
            { subscribe: 'reorder', emit: 'onReorder' },
            { emit: 'allowDropInsideItemChange' },
            { emit: 'allowReorderingChange' },
            { emit: 'autoScrollChange' },
            { emit: 'boundaryChange' },
            { emit: 'containerChange' },
            { emit: 'cursorOffsetChange' },
            { emit: 'dataChange' },
            { emit: 'dragDirectionChange' },
            { emit: 'dragTemplateChange' },
            { emit: 'dropFeedbackModeChange' },
            { emit: 'elementAttrChange' },
            { emit: 'filterChange' },
            { emit: 'groupChange' },
            { emit: 'handleChange' },
            { emit: 'heightChange' },
            { emit: 'itemOrientationChange' },
            { emit: 'moveItemOnDropChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'scrollSensitivityChange' },
            { emit: 'scrollSpeedChange' },
            { emit: 'widthChange' }
        ]);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxSortableComponent.prototype, "allowDropInsideItem", {
        /**
         * Allows a user to drop an item inside another item.
        
         */
        get: function () {
            return this._getOption('allowDropInsideItem');
        },
        set: function (value) {
            this._setOption('allowDropInsideItem', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "allowReordering", {
        /**
         * Allows a user to reorder sortable items.
        
         */
        get: function () {
            return this._getOption('allowReordering');
        },
        set: function (value) {
            this._setOption('allowReordering', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "autoScroll", {
        /**
         * Enables automatic scrolling while dragging an item beyond the viewport.
        
         */
        get: function () {
            return this._getOption('autoScroll');
        },
        set: function (value) {
            this._setOption('autoScroll', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "boundary", {
        /**
         * Specifies a DOM element that limits the dragging area.
        
         */
        get: function () {
            return this._getOption('boundary');
        },
        set: function (value) {
            this._setOption('boundary', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "container", {
        /**
         * Specifies a custom container in which the draggable item should be rendered.
        
         */
        get: function () {
            return this._getOption('container');
        },
        set: function (value) {
            this._setOption('container', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "cursorOffset", {
        /**
         * Specifies the cursor offset from the dragged item.
        
         */
        get: function () {
            return this._getOption('cursorOffset');
        },
        set: function (value) {
            this._setOption('cursorOffset', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "data", {
        /**
         * A container for custom data.
        
         */
        get: function () {
            return this._getOption('data');
        },
        set: function (value) {
            this._setOption('data', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "dragDirection", {
        /**
         * Specifies the directions in which an item can be dragged.
        
         */
        get: function () {
            return this._getOption('dragDirection');
        },
        set: function (value) {
            this._setOption('dragDirection', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "dragTemplate", {
        /**
         * Specifies custom markup to be shown instead of the item being dragged.
        
         */
        get: function () {
            return this._getOption('dragTemplate');
        },
        set: function (value) {
            this._setOption('dragTemplate', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "dropFeedbackMode", {
        /**
         * Specifies how to highlight the item's drop position.
        
         */
        get: function () {
            return this._getOption('dropFeedbackMode');
        },
        set: function (value) {
            this._setOption('dropFeedbackMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "elementAttr", {
        /**
         * Specifies the attributes to be attached to the widget's root element.
        
         */
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "filter", {
        /**
         * Specifies a CSS selector for the items that can be dragged.
        
         */
        get: function () {
            return this._getOption('filter');
        },
        set: function (value) {
            this._setOption('filter', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "group", {
        /**
         * Allows you to group several widgets, so that users can drag and drop items between them.
        
         */
        get: function () {
            return this._getOption('group');
        },
        set: function (value) {
            this._setOption('group', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "handle", {
        /**
         * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).
        
         */
        get: function () {
            return this._getOption('handle');
        },
        set: function (value) {
            this._setOption('handle', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "height", {
        /**
         * Specifies the widget's height.
        
         */
        get: function () {
            return this._getOption('height');
        },
        set: function (value) {
            this._setOption('height', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "itemOrientation", {
        /**
         * Notifies the widget of the items' orientation.
        
         */
        get: function () {
            return this._getOption('itemOrientation');
        },
        set: function (value) {
            this._setOption('itemOrientation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "moveItemOnDrop", {
        /**
         * Moves an element in the HTML markup when it is dropped.
        
         */
        get: function () {
            return this._getOption('moveItemOnDrop');
        },
        set: function (value) {
            this._setOption('moveItemOnDrop', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "rtlEnabled", {
        /**
         * Switches the widget to a right-to-left representation.
        
         */
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "scrollSensitivity", {
        /**
         * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.
        
         */
        get: function () {
            return this._getOption('scrollSensitivity');
        },
        set: function (value) {
            this._setOption('scrollSensitivity', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "scrollSpeed", {
        /**
         * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.
        
         */
        get: function () {
            return this._getOption('scrollSpeed');
        },
        set: function (value) {
            this._setOption('scrollSpeed', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSortableComponent.prototype, "width", {
        /**
         * Specifies the widget's width.
        
         */
        get: function () {
            return this._getOption('width');
        },
        set: function (value) {
            this._setOption('width', value);
        },
        enumerable: true,
        configurable: true
    });
    DxSortableComponent.prototype._createInstance = function (element, options) {
        return new DxSortable(element, options);
    };
    DxSortableComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxSortableComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: DxTemplateHost },
        { type: WatcherHelper },
        { type: NestedOptionHost },
        { type: TransferState },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSortableComponent.prototype, "allowDropInsideItem", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSortableComponent.prototype, "allowReordering", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSortableComponent.prototype, "autoScroll", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSortableComponent.prototype, "boundary", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSortableComponent.prototype, "container", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSortableComponent.prototype, "cursorOffset", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSortableComponent.prototype, "data", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSortableComponent.prototype, "dragDirection", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSortableComponent.prototype, "dragTemplate", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSortableComponent.prototype, "dropFeedbackMode", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSortableComponent.prototype, "elementAttr", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSortableComponent.prototype, "filter", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSortableComponent.prototype, "group", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSortableComponent.prototype, "handle", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSortableComponent.prototype, "height", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSortableComponent.prototype, "itemOrientation", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSortableComponent.prototype, "moveItemOnDrop", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSortableComponent.prototype, "rtlEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxSortableComponent.prototype, "scrollSensitivity", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxSortableComponent.prototype, "scrollSpeed", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSortableComponent.prototype, "width", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onAdd", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onDisposing", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onDragChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onDragEnd", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onDragMove", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onDragStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onInitialized", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onRemove", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "onReorder", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "allowDropInsideItemChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "allowReorderingChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "autoScrollChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "boundaryChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "containerChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "cursorOffsetChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "dataChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "dragDirectionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "dragTemplateChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "dropFeedbackModeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "filterChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "groupChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "handleChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "heightChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "itemOrientationChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "moveItemOnDropChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "rtlEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "scrollSensitivityChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "scrollSpeedChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSortableComponent.prototype, "widthChange", void 0);
    DxSortableComponent = __decorate([ __param(6, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            TransferState, Object])
    ], DxSortableComponent);
DxSortableComponent.ɵfac = function DxSortableComponent_Factory(t) { return new (t || DxSortableComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxSortableComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxSortableComponent, selectors: [["dx-sortable"]], inputs: { allowDropInsideItem: "allowDropInsideItem", allowReordering: "allowReordering", autoScroll: "autoScroll", boundary: "boundary", container: "container", cursorOffset: "cursorOffset", data: "data", dragDirection: "dragDirection", dragTemplate: "dragTemplate", dropFeedbackMode: "dropFeedbackMode", elementAttr: "elementAttr", filter: "filter", group: "group", handle: "handle", height: "height", itemOrientation: "itemOrientation", moveItemOnDrop: "moveItemOnDrop", rtlEnabled: "rtlEnabled", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed", width: "width" }, outputs: { onAdd: "onAdd", onDisposing: "onDisposing", onDragChange: "onDragChange", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onRemove: "onRemove", onReorder: "onReorder", allowDropInsideItemChange: "allowDropInsideItemChange", allowReorderingChange: "allowReorderingChange", autoScrollChange: "autoScrollChange", boundaryChange: "boundaryChange", containerChange: "containerChange", cursorOffsetChange: "cursorOffsetChange", dataChange: "dataChange", dragDirectionChange: "dragDirectionChange", dragTemplateChange: "dragTemplateChange", dropFeedbackModeChange: "dropFeedbackModeChange", elementAttrChange: "elementAttrChange", filterChange: "filterChange", groupChange: "groupChange", handleChange: "handleChange", heightChange: "heightChange", itemOrientationChange: "itemOrientationChange", moveItemOnDropChange: "moveItemOnDropChange", rtlEnabledChange: "rtlEnabledChange", scrollSensitivityChange: "scrollSensitivityChange", scrollSpeedChange: "scrollSpeedChange", widthChange: "widthChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSortableComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxSortableComponent, [{
        type: Component,
        args: [{
                selector: 'dx-sortable',
                template: '<ng-content></ng-content>',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { allowDropInsideItem: [{
            type: Input
        }], allowReordering: [{
            type: Input
        }], autoScroll: [{
            type: Input
        }], boundary: [{
            type: Input
        }], container: [{
            type: Input
        }], cursorOffset: [{
            type: Input
        }], data: [{
            type: Input
        }], dragDirection: [{
            type: Input
        }], dragTemplate: [{
            type: Input
        }], dropFeedbackMode: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], filter: [{
            type: Input
        }], group: [{
            type: Input
        }], handle: [{
            type: Input
        }], height: [{
            type: Input
        }], itemOrientation: [{
            type: Input
        }], moveItemOnDrop: [{
            type: Input
        }], rtlEnabled: [{
            type: Input
        }], scrollSensitivity: [{
            type: Input
        }], scrollSpeed: [{
            type: Input
        }], width: [{
            type: Input
        }], onAdd: [{
            type: Output
        }], onDisposing: [{
            type: Output
        }], onDragChange: [{
            type: Output
        }], onDragEnd: [{
            type: Output
        }], onDragMove: [{
            type: Output
        }], onDragStart: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onRemove: [{
            type: Output
        }], onReorder: [{
            type: Output
        }], allowDropInsideItemChange: [{
            type: Output
        }], allowReorderingChange: [{
            type: Output
        }], autoScrollChange: [{
            type: Output
        }], boundaryChange: [{
            type: Output
        }], containerChange: [{
            type: Output
        }], cursorOffsetChange: [{
            type: Output
        }], dataChange: [{
            type: Output
        }], dragDirectionChange: [{
            type: Output
        }], dragTemplateChange: [{
            type: Output
        }], dropFeedbackModeChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], filterChange: [{
            type: Output
        }], groupChange: [{
            type: Output
        }], handleChange: [{
            type: Output
        }], heightChange: [{
            type: Output
        }], itemOrientationChange: [{
            type: Output
        }], moveItemOnDropChange: [{
            type: Output
        }], rtlEnabledChange: [{
            type: Output
        }], scrollSensitivityChange: [{
            type: Output
        }], scrollSpeedChange: [{
            type: Output
        }], widthChange: [{
            type: Output
        }] }); })();
    return DxSortableComponent;
}(DxComponent));
var DxSortableModule = /** @class */ (function () {
    function DxSortableModule() {
    }
DxSortableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxSortableModule });
DxSortableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxSortableModule_Factory(t) { return new (t || DxSortableModule)(); }, imports: [[
            DxoCursorOffsetModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        DxoCursorOffsetModule,
        DxTemplateModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxSortableModule, { declarations: function () { return [DxSortableComponent]; }, imports: function () { return [DxoCursorOffsetModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxSortableComponent,
        DxoCursorOffsetModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxSortableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoCursorOffsetModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxSortableComponent
                ],
                exports: [
                    DxSortableComponent,
                    DxoCursorOffsetModule,
                    DxTemplateModule
                ]
            }]
    }], function () { return []; }, null); })();
    return DxSortableModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DxSortableComponent, DxSortableModule };

//# sourceMappingURL=devextreme-angular-ui-sortable.js.map