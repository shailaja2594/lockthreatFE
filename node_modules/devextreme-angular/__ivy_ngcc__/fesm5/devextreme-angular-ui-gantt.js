import { __extends, __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';
import DxGantt from 'devextreme/ui/gantt';
import { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxiColumnComponent, DxiStripLineComponent, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoContextMenuModule, DxiItemModule, DxoDependenciesModule, DxoEditingModule, DxoResourceAssignmentsModule, DxoResourcesModule, DxiStripLineModule, DxoTasksModule, DxoToolbarModule, DxoValidationModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The Gantt is a widget that displays the task flow and dependencies between tasks.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
var DxGanttComponent = /** @class */ (function (_super) {
    __extends(DxGanttComponent, _super);
    function DxGanttComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
        _this._watcherHelper = _watcherHelper;
        _this._idh = _idh;
        _this._createEventEmitters([
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },
            { subscribe: 'customCommand', emit: 'onCustomCommand' },
            { subscribe: 'dependencyDeleting', emit: 'onDependencyDeleting' },
            { subscribe: 'dependencyInserting', emit: 'onDependencyInserting' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'resourceAssigning', emit: 'onResourceAssigning' },
            { subscribe: 'resourceDeleting', emit: 'onResourceDeleting' },
            { subscribe: 'resourceInserting', emit: 'onResourceInserting' },
            { subscribe: 'resourceUnassigning', emit: 'onResourceUnassigning' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { subscribe: 'taskClick', emit: 'onTaskClick' },
            { subscribe: 'taskDblClick', emit: 'onTaskDblClick' },
            { subscribe: 'taskDeleting', emit: 'onTaskDeleting' },
            { subscribe: 'taskEditDialogShowing', emit: 'onTaskEditDialogShowing' },
            { subscribe: 'taskInserting', emit: 'onTaskInserting' },
            { subscribe: 'taskMoving', emit: 'onTaskMoving' },
            { subscribe: 'taskUpdating', emit: 'onTaskUpdating' },
            { emit: 'accessKeyChange' },
            { emit: 'activeStateEnabledChange' },
            { emit: 'allowSelectionChange' },
            { emit: 'columnsChange' },
            { emit: 'contextMenuChange' },
            { emit: 'dependenciesChange' },
            { emit: 'disabledChange' },
            { emit: 'editingChange' },
            { emit: 'elementAttrChange' },
            { emit: 'firstDayOfWeekChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'resourceAssignmentsChange' },
            { emit: 'resourcesChange' },
            { emit: 'rootValueChange' },
            { emit: 'scaleTypeChange' },
            { emit: 'selectedRowKeyChange' },
            { emit: 'showResourcesChange' },
            { emit: 'showRowLinesChange' },
            { emit: 'stripLinesChange' },
            { emit: 'tabIndexChange' },
            { emit: 'taskListWidthChange' },
            { emit: 'tasksChange' },
            { emit: 'taskTitlePositionChange' },
            { emit: 'taskTooltipContentTemplateChange' },
            { emit: 'toolbarChange' },
            { emit: 'validationChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' }
        ]);
        _this._idh.setHost(_this);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxGanttComponent.prototype, "accessKey", {
        /**
         * Specifies the shortcut key that sets focus on the widget.
        
         */
        get: function () {
            return this._getOption('accessKey');
        },
        set: function (value) {
            this._setOption('accessKey', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "activeStateEnabled", {
        /**
         * Specifies whether or not the widget changes its state when interacting with a user.
        
         */
        get: function () {
            return this._getOption('activeStateEnabled');
        },
        set: function (value) {
            this._setOption('activeStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "allowSelection", {
        /**
         * Specifies whether users can select tasks in the Gantt.
        
         */
        get: function () {
            return this._getOption('allowSelection');
        },
        set: function (value) {
            this._setOption('allowSelection', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "columns", {
        /**
         * An array of columns in the Gantt.
        
         */
        get: function () {
            return this._getOption('columns');
        },
        set: function (value) {
            this._setOption('columns', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "contextMenu", {
        /**
         * Configures the context menu settings.
        
         */
        get: function () {
            return this._getOption('contextMenu');
        },
        set: function (value) {
            this._setOption('contextMenu', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "dependencies", {
        /**
         * Configures dependencies.
        
         */
        get: function () {
            return this._getOption('dependencies');
        },
        set: function (value) {
            this._setOption('dependencies', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "disabled", {
        /**
         * Specifies whether the widget responds to user interaction.
        
         */
        get: function () {
            return this._getOption('disabled');
        },
        set: function (value) {
            this._setOption('disabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "editing", {
        /**
         * Configures edit options.
        
         */
        get: function () {
            return this._getOption('editing');
        },
        set: function (value) {
            this._setOption('editing', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "elementAttr", {
        /**
         * Specifies the attributes to be attached to the widget's root element.
        
         */
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "firstDayOfWeek", {
        /**
         * Specifies the first day of a week.
        
         */
        get: function () {
            return this._getOption('firstDayOfWeek');
        },
        set: function (value) {
            this._setOption('firstDayOfWeek', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "focusStateEnabled", {
        /**
         * Specifies whether the widget can be focused using keyboard navigation.
        
         */
        get: function () {
            return this._getOption('focusStateEnabled');
        },
        set: function (value) {
            this._setOption('focusStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "height", {
        /**
         * Specifies the widget's height.
        
         */
        get: function () {
            return this._getOption('height');
        },
        set: function (value) {
            this._setOption('height', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "hint", {
        /**
         * Specifies text for a hint that appears when a user pauses on the widget.
        
         */
        get: function () {
            return this._getOption('hint');
        },
        set: function (value) {
            this._setOption('hint', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "hoverStateEnabled", {
        /**
         * Specifies whether the widget changes its state when a user pauses on it.
        
         */
        get: function () {
            return this._getOption('hoverStateEnabled');
        },
        set: function (value) {
            this._setOption('hoverStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "resourceAssignments", {
        /**
         * Configures resource assignments.
        
         */
        get: function () {
            return this._getOption('resourceAssignments');
        },
        set: function (value) {
            this._setOption('resourceAssignments', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "resources", {
        /**
         * Configures task resources.
        
         */
        get: function () {
            return this._getOption('resources');
        },
        set: function (value) {
            this._setOption('resources', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "rootValue", {
        /**
         * Specifies the root task's identifier.
        
         */
        get: function () {
            return this._getOption('rootValue');
        },
        set: function (value) {
            this._setOption('rootValue', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "scaleType", {
        /**
         * Specifies the zoom level of tasks in the Gantt chart.
        
         */
        get: function () {
            return this._getOption('scaleType');
        },
        set: function (value) {
            this._setOption('scaleType', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "selectedRowKey", {
        /**
         * Allows you to select a row or determine which row is selected.
        
         */
        get: function () {
            return this._getOption('selectedRowKey');
        },
        set: function (value) {
            this._setOption('selectedRowKey', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "showResources", {
        /**
         * Specifies whether to display task resources.
        
         */
        get: function () {
            return this._getOption('showResources');
        },
        set: function (value) {
            this._setOption('showResources', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "showRowLines", {
        /**
         * Specifies whether to show/hide horizontal faint lines that separate tasks.
        
         */
        get: function () {
            return this._getOption('showRowLines');
        },
        set: function (value) {
            this._setOption('showRowLines', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "stripLines", {
        /**
         * Configures strip lines.
        
         */
        get: function () {
            return this._getOption('stripLines');
        },
        set: function (value) {
            this._setOption('stripLines', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "tabIndex", {
        /**
         * Specifies the number of the element when the Tab key is used for navigating.
        
         */
        get: function () {
            return this._getOption('tabIndex');
        },
        set: function (value) {
            this._setOption('tabIndex', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "taskListWidth", {
        /**
         * Specifies the width of the task list in pixels.
        
         */
        get: function () {
            return this._getOption('taskListWidth');
        },
        set: function (value) {
            this._setOption('taskListWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "tasks", {
        /**
         * Configures tasks.
        
         */
        get: function () {
            return this._getOption('tasks');
        },
        set: function (value) {
            this._setOption('tasks', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "taskTitlePosition", {
        /**
         * Specifies a task's title position.
        
         */
        get: function () {
            return this._getOption('taskTitlePosition');
        },
        set: function (value) {
            this._setOption('taskTitlePosition', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "taskTooltipContentTemplate", {
        /**
         * Specifies custom content for the task tooltip.
        
         */
        get: function () {
            return this._getOption('taskTooltipContentTemplate');
        },
        set: function (value) {
            this._setOption('taskTooltipContentTemplate', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "toolbar", {
        /**
         * Configures toolbar settings.
        
         */
        get: function () {
            return this._getOption('toolbar');
        },
        set: function (value) {
            this._setOption('toolbar', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "validation", {
        /**
         * Configures validation options.
        
         */
        get: function () {
            return this._getOption('validation');
        },
        set: function (value) {
            this._setOption('validation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "visible", {
        /**
         * Specifies whether the widget is visible.
        
         */
        get: function () {
            return this._getOption('visible');
        },
        set: function (value) {
            this._setOption('visible', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "width", {
        /**
         * Specifies the widget's width.
        
         */
        get: function () {
            return this._getOption('width');
        },
        set: function (value) {
            this._setOption('width', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "columnsChildren", {
        get: function () {
            return this._getOption('columns');
        },
        set: function (value) {
            this.setChildren('columns', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "stripLinesChildren", {
        get: function () {
            return this._getOption('stripLines');
        },
        set: function (value) {
            this.setChildren('stripLines', value);
        },
        enumerable: true,
        configurable: true
    });
    DxGanttComponent.prototype._createInstance = function (element, options) {
        return new DxGantt(element, options);
    };
    DxGanttComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxGanttComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        this.setupChanges('columns', changes);
        this.setupChanges('stripLines', changes);
    };
    DxGanttComponent.prototype.setupChanges = function (prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    };
    DxGanttComponent.prototype.ngDoCheck = function () {
        this._idh.doCheck('columns');
        this._idh.doCheck('stripLines');
        this._watcherHelper.checkWatchers();
        _super.prototype.ngDoCheck.call(this);
        _super.prototype.clearChangedOptions.call(this);
    };
    DxGanttComponent.prototype._setOption = function (name, value) {
        var isSetup = this._idh.setupSingle(name, value);
        var isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            _super.prototype._setOption.call(this, name, value);
        }
    };
    DxGanttComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: DxTemplateHost },
        { type: WatcherHelper },
        { type: IterableDifferHelper },
        { type: NestedOptionHost },
        { type: TransferState },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxGanttComponent.prototype, "accessKey", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "activeStateEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "allowSelection", null);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], DxGanttComponent.prototype, "columns", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "contextMenu", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "dependencies", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "editing", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "elementAttr", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "firstDayOfWeek", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "focusStateEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "height", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxGanttComponent.prototype, "hint", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "hoverStateEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "resourceAssignments", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "resources", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "rootValue", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxGanttComponent.prototype, "scaleType", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "selectedRowKey", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "showResources", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "showRowLines", null);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], DxGanttComponent.prototype, "stripLines", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxGanttComponent.prototype, "tabIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxGanttComponent.prototype, "taskListWidth", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "tasks", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxGanttComponent.prototype, "taskTitlePosition", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "taskTooltipContentTemplate", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "toolbar", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "validation", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "visible", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "width", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onContentReady", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onContextMenuPreparing", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onCustomCommand", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onDependencyDeleting", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onDependencyInserting", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onDisposing", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onInitialized", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onResourceAssigning", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onResourceDeleting", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onResourceInserting", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onResourceUnassigning", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onSelectionChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onTaskClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onTaskDblClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onTaskDeleting", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onTaskEditDialogShowing", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onTaskInserting", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onTaskMoving", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onTaskUpdating", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "accessKeyChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "activeStateEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "allowSelectionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "columnsChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "contextMenuChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "dependenciesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "disabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "editingChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "firstDayOfWeekChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "focusStateEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "heightChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "hintChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "hoverStateEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "resourceAssignmentsChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "resourcesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "rootValueChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "scaleTypeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "selectedRowKeyChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "showResourcesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "showRowLinesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "stripLinesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "tabIndexChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "taskListWidthChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "tasksChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "taskTitlePositionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "taskTooltipContentTemplateChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "toolbarChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "validationChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "visibleChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "widthChange", void 0);
    __decorate([
        ContentChildren(DxiColumnComponent),
        __metadata("design:type", QueryList),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "columnsChildren", null);
    __decorate([
        ContentChildren(DxiStripLineComponent),
        __metadata("design:type", QueryList),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "stripLinesChildren", null);
    DxGanttComponent = __decorate([ __param(7, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
            WatcherHelper,
            IterableDifferHelper,
            NestedOptionHost,
            TransferState, Object])
    ], DxGanttComponent);
DxGanttComponent.ɵfac = function DxGanttComponent_Factory(t) { return new (t || DxGanttComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxGanttComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxGanttComponent, selectors: [["dx-gantt"]], contentQueries: function DxGanttComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiColumnComponent, false);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiStripLineComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnsChildren = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripLinesChildren = _t);
    } }, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowSelection: "allowSelection", columns: "columns", contextMenu: "contextMenu", dependencies: "dependencies", disabled: "disabled", editing: "editing", elementAttr: "elementAttr", firstDayOfWeek: "firstDayOfWeek", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", resourceAssignments: "resourceAssignments", resources: "resources", rootValue: "rootValue", scaleType: "scaleType", selectedRowKey: "selectedRowKey", showResources: "showResources", showRowLines: "showRowLines", stripLines: "stripLines", tabIndex: "tabIndex", taskListWidth: "taskListWidth", tasks: "tasks", taskTitlePosition: "taskTitlePosition", taskTooltipContentTemplate: "taskTooltipContentTemplate", toolbar: "toolbar", validation: "validation", visible: "visible", width: "width" }, outputs: { onContentReady: "onContentReady", onContextMenuPreparing: "onContextMenuPreparing", onCustomCommand: "onCustomCommand", onDependencyDeleting: "onDependencyDeleting", onDependencyInserting: "onDependencyInserting", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResourceAssigning: "onResourceAssigning", onResourceDeleting: "onResourceDeleting", onResourceInserting: "onResourceInserting", onResourceUnassigning: "onResourceUnassigning", onSelectionChanged: "onSelectionChanged", onTaskClick: "onTaskClick", onTaskDblClick: "onTaskDblClick", onTaskDeleting: "onTaskDeleting", onTaskEditDialogShowing: "onTaskEditDialogShowing", onTaskInserting: "onTaskInserting", onTaskMoving: "onTaskMoving", onTaskUpdating: "onTaskUpdating", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowSelectionChange: "allowSelectionChange", columnsChange: "columnsChange", contextMenuChange: "contextMenuChange", dependenciesChange: "dependenciesChange", disabledChange: "disabledChange", editingChange: "editingChange", elementAttrChange: "elementAttrChange", firstDayOfWeekChange: "firstDayOfWeekChange", focusStateEnabledChange: "focusStateEnabledChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", resourceAssignmentsChange: "resourceAssignmentsChange", resourcesChange: "resourcesChange", rootValueChange: "rootValueChange", scaleTypeChange: "scaleTypeChange", selectedRowKeyChange: "selectedRowKeyChange", showResourcesChange: "showResourcesChange", showRowLinesChange: "showRowLinesChange", stripLinesChange: "stripLinesChange", tabIndexChange: "tabIndexChange", taskListWidthChange: "taskListWidthChange", tasksChange: "tasksChange", taskTitlePositionChange: "taskTitlePositionChange", taskTooltipContentTemplateChange: "taskTooltipContentTemplateChange", toolbarChange: "toolbarChange", validationChange: "validationChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxGanttComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxGanttComponent, [{
        type: Component,
        args: [{
                selector: 'dx-gantt',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { accessKey: [{
            type: Input
        }], activeStateEnabled: [{
            type: Input
        }], allowSelection: [{
            type: Input
        }], columns: [{
            type: Input
        }], contextMenu: [{
            type: Input
        }], dependencies: [{
            type: Input
        }], disabled: [{
            type: Input
        }], editing: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], firstDayOfWeek: [{
            type: Input
        }], focusStateEnabled: [{
            type: Input
        }], height: [{
            type: Input
        }], hint: [{
            type: Input
        }], hoverStateEnabled: [{
            type: Input
        }], resourceAssignments: [{
            type: Input
        }], resources: [{
            type: Input
        }], rootValue: [{
            type: Input
        }], scaleType: [{
            type: Input
        }], selectedRowKey: [{
            type: Input
        }], showResources: [{
            type: Input
        }], showRowLines: [{
            type: Input
        }], stripLines: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], taskListWidth: [{
            type: Input
        }], tasks: [{
            type: Input
        }], taskTitlePosition: [{
            type: Input
        }], taskTooltipContentTemplate: [{
            type: Input
        }], toolbar: [{
            type: Input
        }], validation: [{
            type: Input
        }], visible: [{
            type: Input
        }], width: [{
            type: Input
        }], columnsChildren: [{
            type: ContentChildren,
            args: [DxiColumnComponent]
        }], stripLinesChildren: [{
            type: ContentChildren,
            args: [DxiStripLineComponent]
        }], onContentReady: [{
            type: Output
        }], onContextMenuPreparing: [{
            type: Output
        }], onCustomCommand: [{
            type: Output
        }], onDependencyDeleting: [{
            type: Output
        }], onDependencyInserting: [{
            type: Output
        }], onDisposing: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onResourceAssigning: [{
            type: Output
        }], onResourceDeleting: [{
            type: Output
        }], onResourceInserting: [{
            type: Output
        }], onResourceUnassigning: [{
            type: Output
        }], onSelectionChanged: [{
            type: Output
        }], onTaskClick: [{
            type: Output
        }], onTaskDblClick: [{
            type: Output
        }], onTaskDeleting: [{
            type: Output
        }], onTaskEditDialogShowing: [{
            type: Output
        }], onTaskInserting: [{
            type: Output
        }], onTaskMoving: [{
            type: Output
        }], onTaskUpdating: [{
            type: Output
        }], accessKeyChange: [{
            type: Output
        }], activeStateEnabledChange: [{
            type: Output
        }], allowSelectionChange: [{
            type: Output
        }], columnsChange: [{
            type: Output
        }], contextMenuChange: [{
            type: Output
        }], dependenciesChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], editingChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], firstDayOfWeekChange: [{
            type: Output
        }], focusStateEnabledChange: [{
            type: Output
        }], heightChange: [{
            type: Output
        }], hintChange: [{
            type: Output
        }], hoverStateEnabledChange: [{
            type: Output
        }], resourceAssignmentsChange: [{
            type: Output
        }], resourcesChange: [{
            type: Output
        }], rootValueChange: [{
            type: Output
        }], scaleTypeChange: [{
            type: Output
        }], selectedRowKeyChange: [{
            type: Output
        }], showResourcesChange: [{
            type: Output
        }], showRowLinesChange: [{
            type: Output
        }], stripLinesChange: [{
            type: Output
        }], tabIndexChange: [{
            type: Output
        }], taskListWidthChange: [{
            type: Output
        }], tasksChange: [{
            type: Output
        }], taskTitlePositionChange: [{
            type: Output
        }], taskTooltipContentTemplateChange: [{
            type: Output
        }], toolbarChange: [{
            type: Output
        }], validationChange: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], widthChange: [{
            type: Output
        }] }); })();
    return DxGanttComponent;
}(DxComponent));
var DxGanttModule = /** @class */ (function () {
    function DxGanttModule() {
    }
DxGanttModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxGanttModule });
DxGanttModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxGanttModule_Factory(t) { return new (t || DxGanttModule)(); }, imports: [[
            DxiColumnModule,
            DxiButtonModule,
            DxoHeaderFilterModule,
            DxoLookupModule,
            DxoFormatModule,
            DxoFormItemModule,
            DxoLabelModule,
            DxiValidationRuleModule,
            DxoContextMenuModule,
            DxiItemModule,
            DxoDependenciesModule,
            DxoEditingModule,
            DxoResourceAssignmentsModule,
            DxoResourcesModule,
            DxiStripLineModule,
            DxoTasksModule,
            DxoToolbarModule,
            DxoValidationModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        DxiColumnModule,
        DxiButtonModule,
        DxoHeaderFilterModule,
        DxoLookupModule,
        DxoFormatModule,
        DxoFormItemModule,
        DxoLabelModule,
        DxiValidationRuleModule,
        DxoContextMenuModule,
        DxiItemModule,
        DxoDependenciesModule,
        DxoEditingModule,
        DxoResourceAssignmentsModule,
        DxoResourcesModule,
        DxiStripLineModule,
        DxoTasksModule,
        DxoToolbarModule,
        DxoValidationModule,
        DxTemplateModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxGanttModule, { declarations: function () { return [DxGanttComponent]; }, imports: function () { return [DxiColumnModule,
        DxiButtonModule,
        DxoHeaderFilterModule,
        DxoLookupModule,
        DxoFormatModule,
        DxoFormItemModule,
        DxoLabelModule,
        DxiValidationRuleModule,
        DxoContextMenuModule,
        DxiItemModule,
        DxoDependenciesModule,
        DxoEditingModule,
        DxoResourceAssignmentsModule,
        DxoResourcesModule,
        DxiStripLineModule,
        DxoTasksModule,
        DxoToolbarModule,
        DxoValidationModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxGanttComponent,
        DxiColumnModule,
        DxiButtonModule,
        DxoHeaderFilterModule,
        DxoLookupModule,
        DxoFormatModule,
        DxoFormItemModule,
        DxoLabelModule,
        DxiValidationRuleModule,
        DxoContextMenuModule,
        DxiItemModule,
        DxoDependenciesModule,
        DxoEditingModule,
        DxoResourceAssignmentsModule,
        DxoResourcesModule,
        DxiStripLineModule,
        DxoTasksModule,
        DxoToolbarModule,
        DxoValidationModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxGanttModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxiColumnModule,
                    DxiButtonModule,
                    DxoHeaderFilterModule,
                    DxoLookupModule,
                    DxoFormatModule,
                    DxoFormItemModule,
                    DxoLabelModule,
                    DxiValidationRuleModule,
                    DxoContextMenuModule,
                    DxiItemModule,
                    DxoDependenciesModule,
                    DxoEditingModule,
                    DxoResourceAssignmentsModule,
                    DxoResourcesModule,
                    DxiStripLineModule,
                    DxoTasksModule,
                    DxoToolbarModule,
                    DxoValidationModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxGanttComponent
                ],
                exports: [
                    DxGanttComponent,
                    DxiColumnModule,
                    DxiButtonModule,
                    DxoHeaderFilterModule,
                    DxoLookupModule,
                    DxoFormatModule,
                    DxoFormItemModule,
                    DxoLabelModule,
                    DxiValidationRuleModule,
                    DxoContextMenuModule,
                    DxiItemModule,
                    DxoDependenciesModule,
                    DxoEditingModule,
                    DxoResourceAssignmentsModule,
                    DxoResourcesModule,
                    DxiStripLineModule,
                    DxoTasksModule,
                    DxoToolbarModule,
                    DxoValidationModule,
                    DxTemplateModule
                ]
            }]
    }], function () { return []; }, null); })();
    return DxGanttModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DxGanttComponent, DxGanttModule };

//# sourceMappingURL=devextreme-angular-ui-gantt.js.map