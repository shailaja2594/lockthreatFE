import { __extends, __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';
import DxSparkline from 'devextreme/viz/sparkline';
import { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The Sparkline widget is a compact chart that contains only one series. Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
var DxSparklineComponent = /** @class */ (function (_super) {
    __extends(DxSparklineComponent, _super);
    function DxSparklineComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
        _this._watcherHelper = _watcherHelper;
        _this._idh = _idh;
        _this._createEventEmitters([
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'drawn', emit: 'onDrawn' },
            { subscribe: 'exported', emit: 'onExported' },
            { subscribe: 'exporting', emit: 'onExporting' },
            { subscribe: 'fileSaving', emit: 'onFileSaving' },
            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },
            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },
            { emit: 'argumentFieldChange' },
            { emit: 'barNegativeColorChange' },
            { emit: 'barPositiveColorChange' },
            { emit: 'dataSourceChange' },
            { emit: 'disabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'firstLastColorChange' },
            { emit: 'ignoreEmptyPointsChange' },
            { emit: 'lineColorChange' },
            { emit: 'lineWidthChange' },
            { emit: 'lossColorChange' },
            { emit: 'marginChange' },
            { emit: 'maxColorChange' },
            { emit: 'maxValueChange' },
            { emit: 'minColorChange' },
            { emit: 'minValueChange' },
            { emit: 'pathModifiedChange' },
            { emit: 'pointColorChange' },
            { emit: 'pointSizeChange' },
            { emit: 'pointSymbolChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'showFirstLastChange' },
            { emit: 'showMinMaxChange' },
            { emit: 'sizeChange' },
            { emit: 'themeChange' },
            { emit: 'tooltipChange' },
            { emit: 'typeChange' },
            { emit: 'valueFieldChange' },
            { emit: 'winColorChange' },
            { emit: 'winlossThresholdChange' }
        ]);
        _this._idh.setHost(_this);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxSparklineComponent.prototype, "argumentField", {
        /**
         * Specifies the data source field that provides arguments for a sparkline.
        
         */
        get: function () {
            return this._getOption('argumentField');
        },
        set: function (value) {
            this._setOption('argumentField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "barNegativeColor", {
        /**
         * Sets a color for the bars indicating negative values. Available for a sparkline of the bar type only.
        
         */
        get: function () {
            return this._getOption('barNegativeColor');
        },
        set: function (value) {
            this._setOption('barNegativeColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "barPositiveColor", {
        /**
         * Sets a color for the bars indicating positive values. Available for a sparkline of the bar type only.
        
         */
        get: function () {
            return this._getOption('barPositiveColor');
        },
        set: function (value) {
            this._setOption('barPositiveColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "dataSource", {
        /**
         * Binds the widget to data.
        
         */
        get: function () {
            return this._getOption('dataSource');
        },
        set: function (value) {
            this._setOption('dataSource', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "disabled", {
        /**
         * Specifies whether the widget responds to user interaction.
        
         */
        get: function () {
            return this._getOption('disabled');
        },
        set: function (value) {
            this._setOption('disabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "elementAttr", {
        /**
         * Specifies the attributes to be attached to the widget's root element.
        
         */
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "firstLastColor", {
        /**
         * Sets a color for the boundary of both the first and last points on a sparkline.
        
         */
        get: function () {
            return this._getOption('firstLastColor');
        },
        set: function (value) {
            this._setOption('firstLastColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "ignoreEmptyPoints", {
        /**
         * Specifies whether the sparkline should ignore null data points.
        
         */
        get: function () {
            return this._getOption('ignoreEmptyPoints');
        },
        set: function (value) {
            this._setOption('ignoreEmptyPoints', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "lineColor", {
        /**
         * Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types.
        
         */
        get: function () {
            return this._getOption('lineColor');
        },
        set: function (value) {
            this._setOption('lineColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "lineWidth", {
        /**
         * Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types.
        
         */
        get: function () {
            return this._getOption('lineWidth');
        },
        set: function (value) {
            this._setOption('lineWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "lossColor", {
        /**
         * Sets a color for the bars indicating the values that are less than the winloss threshold. Available for a sparkline of the winloss type only.
        
         */
        get: function () {
            return this._getOption('lossColor');
        },
        set: function (value) {
            this._setOption('lossColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "margin", {
        /**
         * Generates space around the widget.
        
         */
        get: function () {
            return this._getOption('margin');
        },
        set: function (value) {
            this._setOption('margin', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "maxColor", {
        /**
         * Sets a color for the boundary of the maximum point on a sparkline.
        
         */
        get: function () {
            return this._getOption('maxColor');
        },
        set: function (value) {
            this._setOption('maxColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "maxValue", {
        /**
         * Specifies the maximum value of the sparkline's value axis.
        
         */
        get: function () {
            return this._getOption('maxValue');
        },
        set: function (value) {
            this._setOption('maxValue', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "minColor", {
        /**
         * Sets a color for the boundary of the minimum point on a sparkline.
        
         */
        get: function () {
            return this._getOption('minColor');
        },
        set: function (value) {
            this._setOption('minColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "minValue", {
        /**
         * Specifies the minimum value of the sparkline value axis.
        
         */
        get: function () {
            return this._getOption('minValue');
        },
        set: function (value) {
            this._setOption('minValue', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "pathModified", {
        /**
         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.
        
         */
        get: function () {
            return this._getOption('pathModified');
        },
        set: function (value) {
            this._setOption('pathModified', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "pointColor", {
        /**
         * Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types.
        
         */
        get: function () {
            return this._getOption('pointColor');
        },
        set: function (value) {
            this._setOption('pointColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "pointSize", {
        /**
         * Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types.
        
         */
        get: function () {
            return this._getOption('pointSize');
        },
        set: function (value) {
            this._setOption('pointSize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "pointSymbol", {
        /**
         * Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types.
        
         */
        get: function () {
            return this._getOption('pointSymbol');
        },
        set: function (value) {
            this._setOption('pointSymbol', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "rtlEnabled", {
        /**
         * Switches the widget to a right-to-left representation.
        
         */
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "showFirstLast", {
        /**
         * Specifies whether or not to indicate both the first and last values on a sparkline.
        
         */
        get: function () {
            return this._getOption('showFirstLast');
        },
        set: function (value) {
            this._setOption('showFirstLast', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "showMinMax", {
        /**
         * Specifies whether or not to indicate both the minimum and maximum values on a sparkline.
        
         */
        get: function () {
            return this._getOption('showMinMax');
        },
        set: function (value) {
            this._setOption('showMinMax', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "size", {
        /**
         * Specifies the widget's size in pixels.
        
         */
        get: function () {
            return this._getOption('size');
        },
        set: function (value) {
            this._setOption('size', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "theme", {
        /**
         * Sets the name of the theme the widget uses.
        
         */
        get: function () {
            return this._getOption('theme');
        },
        set: function (value) {
            this._setOption('theme', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "tooltip", {
        /**
         * Configures the tooltip.
        
         */
        get: function () {
            return this._getOption('tooltip');
        },
        set: function (value) {
            this._setOption('tooltip', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "type", {
        /**
         * Determines the type of a sparkline.
        
         */
        get: function () {
            return this._getOption('type');
        },
        set: function (value) {
            this._setOption('type', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "valueField", {
        /**
         * Specifies the data source field that provides values for a sparkline.
        
         */
        get: function () {
            return this._getOption('valueField');
        },
        set: function (value) {
            this._setOption('valueField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "winColor", {
        /**
         * Sets a color for the bars indicating the values greater than a winloss threshold. Available for a sparkline of the winloss type only.
        
         */
        get: function () {
            return this._getOption('winColor');
        },
        set: function (value) {
            this._setOption('winColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxSparklineComponent.prototype, "winlossThreshold", {
        /**
         * Specifies a value that serves as a threshold for the sparkline of the winloss type.
        
         */
        get: function () {
            return this._getOption('winlossThreshold');
        },
        set: function (value) {
            this._setOption('winlossThreshold', value);
        },
        enumerable: true,
        configurable: true
    });
    DxSparklineComponent.prototype._createInstance = function (element, options) {
        return new DxSparkline(element, options);
    };
    DxSparklineComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxSparklineComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        this.setupChanges('dataSource', changes);
    };
    DxSparklineComponent.prototype.setupChanges = function (prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    };
    DxSparklineComponent.prototype.ngDoCheck = function () {
        this._idh.doCheck('dataSource');
        this._watcherHelper.checkWatchers();
        _super.prototype.ngDoCheck.call(this);
        _super.prototype.clearChangedOptions.call(this);
    };
    DxSparklineComponent.prototype._setOption = function (name, value) {
        var isSetup = this._idh.setupSingle(name, value);
        var isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            _super.prototype._setOption.call(this, name, value);
        }
    };
    DxSparklineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: DxTemplateHost },
        { type: WatcherHelper },
        { type: IterableDifferHelper },
        { type: NestedOptionHost },
        { type: TransferState },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "argumentField", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "barNegativeColor", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "barPositiveColor", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSparklineComponent.prototype, "dataSource", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSparklineComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSparklineComponent.prototype, "elementAttr", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "firstLastColor", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSparklineComponent.prototype, "ignoreEmptyPoints", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "lineColor", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxSparklineComponent.prototype, "lineWidth", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "lossColor", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSparklineComponent.prototype, "margin", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "maxColor", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxSparklineComponent.prototype, "maxValue", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "minColor", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxSparklineComponent.prototype, "minValue", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSparklineComponent.prototype, "pathModified", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "pointColor", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxSparklineComponent.prototype, "pointSize", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "pointSymbol", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSparklineComponent.prototype, "rtlEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSparklineComponent.prototype, "showFirstLast", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxSparklineComponent.prototype, "showMinMax", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSparklineComponent.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "theme", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxSparklineComponent.prototype, "tooltip", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "type", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "valueField", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxSparklineComponent.prototype, "winColor", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxSparklineComponent.prototype, "winlossThreshold", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onDisposing", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onDrawn", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onExported", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onExporting", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onFileSaving", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onIncidentOccurred", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onInitialized", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onTooltipHidden", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "onTooltipShown", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "argumentFieldChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "barNegativeColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "barPositiveColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "dataSourceChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "disabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "firstLastColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "ignoreEmptyPointsChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "lineColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "lineWidthChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "lossColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "marginChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "maxColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "maxValueChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "minColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "minValueChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "pathModifiedChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "pointColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "pointSizeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "pointSymbolChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "rtlEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "showFirstLastChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "showMinMaxChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "sizeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "themeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "tooltipChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "typeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "valueFieldChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "winColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxSparklineComponent.prototype, "winlossThresholdChange", void 0);
    DxSparklineComponent = __decorate([ __param(7, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
            WatcherHelper,
            IterableDifferHelper,
            NestedOptionHost,
            TransferState, Object])
    ], DxSparklineComponent);
DxSparklineComponent.ɵfac = function DxSparklineComponent_Factory(t) { return new (t || DxSparklineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxSparklineComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxSparklineComponent, selectors: [["dx-sparkline"]], inputs: { argumentField: "argumentField", barNegativeColor: "barNegativeColor", barPositiveColor: "barPositiveColor", dataSource: "dataSource", disabled: "disabled", elementAttr: "elementAttr", firstLastColor: "firstLastColor", ignoreEmptyPoints: "ignoreEmptyPoints", lineColor: "lineColor", lineWidth: "lineWidth", lossColor: "lossColor", margin: "margin", maxColor: "maxColor", maxValue: "maxValue", minColor: "minColor", minValue: "minValue", pathModified: "pathModified", pointColor: "pointColor", pointSize: "pointSize", pointSymbol: "pointSymbol", rtlEnabled: "rtlEnabled", showFirstLast: "showFirstLast", showMinMax: "showMinMax", size: "size", theme: "theme", tooltip: "tooltip", type: "type", valueField: "valueField", winColor: "winColor", winlossThreshold: "winlossThreshold" }, outputs: { onDisposing: "onDisposing", onDrawn: "onDrawn", onExported: "onExported", onExporting: "onExporting", onFileSaving: "onFileSaving", onIncidentOccurred: "onIncidentOccurred", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onTooltipHidden: "onTooltipHidden", onTooltipShown: "onTooltipShown", argumentFieldChange: "argumentFieldChange", barNegativeColorChange: "barNegativeColorChange", barPositiveColorChange: "barPositiveColorChange", dataSourceChange: "dataSourceChange", disabledChange: "disabledChange", elementAttrChange: "elementAttrChange", firstLastColorChange: "firstLastColorChange", ignoreEmptyPointsChange: "ignoreEmptyPointsChange", lineColorChange: "lineColorChange", lineWidthChange: "lineWidthChange", lossColorChange: "lossColorChange", marginChange: "marginChange", maxColorChange: "maxColorChange", maxValueChange: "maxValueChange", minColorChange: "minColorChange", minValueChange: "minValueChange", pathModifiedChange: "pathModifiedChange", pointColorChange: "pointColorChange", pointSizeChange: "pointSizeChange", pointSymbolChange: "pointSymbolChange", rtlEnabledChange: "rtlEnabledChange", showFirstLastChange: "showFirstLastChange", showMinMaxChange: "showMinMaxChange", sizeChange: "sizeChange", themeChange: "themeChange", tooltipChange: "tooltipChange", typeChange: "typeChange", valueFieldChange: "valueFieldChange", winColorChange: "winColorChange", winlossThresholdChange: "winlossThresholdChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxSparklineComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] {  display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxSparklineComponent, [{
        type: Component,
        args: [{
                selector: 'dx-sparkline',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ],
                styles: [' :host {  display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { argumentField: [{
            type: Input
        }], barNegativeColor: [{
            type: Input
        }], barPositiveColor: [{
            type: Input
        }], dataSource: [{
            type: Input
        }], disabled: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], firstLastColor: [{
            type: Input
        }], ignoreEmptyPoints: [{
            type: Input
        }], lineColor: [{
            type: Input
        }], lineWidth: [{
            type: Input
        }], lossColor: [{
            type: Input
        }], margin: [{
            type: Input
        }], maxColor: [{
            type: Input
        }], maxValue: [{
            type: Input
        }], minColor: [{
            type: Input
        }], minValue: [{
            type: Input
        }], pathModified: [{
            type: Input
        }], pointColor: [{
            type: Input
        }], pointSize: [{
            type: Input
        }], pointSymbol: [{
            type: Input
        }], rtlEnabled: [{
            type: Input
        }], showFirstLast: [{
            type: Input
        }], showMinMax: [{
            type: Input
        }], size: [{
            type: Input
        }], theme: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], type: [{
            type: Input
        }], valueField: [{
            type: Input
        }], winColor: [{
            type: Input
        }], winlossThreshold: [{
            type: Input
        }], onDisposing: [{
            type: Output
        }], onDrawn: [{
            type: Output
        }], onExported: [{
            type: Output
        }], onExporting: [{
            type: Output
        }], onFileSaving: [{
            type: Output
        }], onIncidentOccurred: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onTooltipHidden: [{
            type: Output
        }], onTooltipShown: [{
            type: Output
        }], argumentFieldChange: [{
            type: Output
        }], barNegativeColorChange: [{
            type: Output
        }], barPositiveColorChange: [{
            type: Output
        }], dataSourceChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], firstLastColorChange: [{
            type: Output
        }], ignoreEmptyPointsChange: [{
            type: Output
        }], lineColorChange: [{
            type: Output
        }], lineWidthChange: [{
            type: Output
        }], lossColorChange: [{
            type: Output
        }], marginChange: [{
            type: Output
        }], maxColorChange: [{
            type: Output
        }], maxValueChange: [{
            type: Output
        }], minColorChange: [{
            type: Output
        }], minValueChange: [{
            type: Output
        }], pathModifiedChange: [{
            type: Output
        }], pointColorChange: [{
            type: Output
        }], pointSizeChange: [{
            type: Output
        }], pointSymbolChange: [{
            type: Output
        }], rtlEnabledChange: [{
            type: Output
        }], showFirstLastChange: [{
            type: Output
        }], showMinMaxChange: [{
            type: Output
        }], sizeChange: [{
            type: Output
        }], themeChange: [{
            type: Output
        }], tooltipChange: [{
            type: Output
        }], typeChange: [{
            type: Output
        }], valueFieldChange: [{
            type: Output
        }], winColorChange: [{
            type: Output
        }], winlossThresholdChange: [{
            type: Output
        }] }); })();
    return DxSparklineComponent;
}(DxComponent));
var DxSparklineModule = /** @class */ (function () {
    function DxSparklineModule() {
    }
DxSparklineModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxSparklineModule });
DxSparklineModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxSparklineModule_Factory(t) { return new (t || DxSparklineModule)(); }, imports: [[
            DxoMarginModule,
            DxoSizeModule,
            DxoTooltipModule,
            DxoBorderModule,
            DxoFontModule,
            DxoFormatModule,
            DxoShadowModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        DxoMarginModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoBorderModule,
        DxoFontModule,
        DxoFormatModule,
        DxoShadowModule,
        DxTemplateModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxSparklineModule, { declarations: function () { return [DxSparklineComponent]; }, imports: function () { return [DxoMarginModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoBorderModule,
        DxoFontModule,
        DxoFormatModule,
        DxoShadowModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxSparklineComponent,
        DxoMarginModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoBorderModule,
        DxoFontModule,
        DxoFormatModule,
        DxoShadowModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxSparklineModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoMarginModule,
                    DxoSizeModule,
                    DxoTooltipModule,
                    DxoBorderModule,
                    DxoFontModule,
                    DxoFormatModule,
                    DxoShadowModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxSparklineComponent
                ],
                exports: [
                    DxSparklineComponent,
                    DxoMarginModule,
                    DxoSizeModule,
                    DxoTooltipModule,
                    DxoBorderModule,
                    DxoFontModule,
                    DxoFormatModule,
                    DxoShadowModule,
                    DxTemplateModule
                ]
            }]
    }], function () { return []; }, null); })();
    return DxSparklineModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DxSparklineComponent, DxSparklineModule };

//# sourceMappingURL=devextreme-angular-ui-sparkline.js.map