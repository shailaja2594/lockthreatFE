/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { dxHtmlEditorMediaResizing, dxHtmlEditorToolbar, dxHtmlEditorVariables } from 'devextreme/ui/html_editor';
import DxHtmlEditor from 'devextreme/ui/html_editor';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiMentionComponent } from 'devextreme-angular/ui/nested';
/**
 * [tags] ctp HtmlEditor is a WYSIWYG editor that allows you to format textual and visual content and to output it in HTML or Markdown. HtmlEditor is built on top of and requires the DevExtreme Quill. #include common-ctp-note with { component: 'HtmlEditor' }

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxHtmlEditorComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxHtmlEditor;
    /**
     * Specifies the shortcut key that sets focus on the widget.
    
     */
    accessKey: string;
    /**
     * Specifies whether or not the widget changes its state when interacting with a user.
    
     */
    activeStateEnabled: boolean;
    /**
     * Allows you to customize the DevExtreme Quill and 3rd-party modules.
    
     */
    customizeModules: Function;
    /**
     * Specifies whether the widget responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Specifies the attributes to be attached to the widget's root element.
    
     */
    elementAttr: any;
    /**
     * Specifies whether the widget can be focused using keyboard navigation.
    
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the widget's height.
    
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the widget.
    
     */
    hint: string;
    /**
     * Specifies whether the widget changes its state when a user pauses on it.
    
     */
    hoverStateEnabled: boolean;
    /**
     * Specifies or indicates whether the editor's value is valid.
    
     */
    isValid: boolean;
    /**
     * Configures media resizing.
    
     */
    mediaResizing: dxHtmlEditorMediaResizing;
    /**
     * Configures mentions.
    
     */
    mentions: Array<DevExpress.ui.dxHtmlEditorMention>;
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
    
     */
    name: string;
    /**
     * Specifies the text displayed when the input field is empty.
    
     */
    placeholder: string;
    /**
     * Specifies whether the editor is read-only.
    
     */
    readOnly: boolean;
    /**
     * Switches the widget to a right-to-left representation.
    
     */
    rtlEnabled: boolean;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    tabIndex: number;
    /**
     * Configures the widget's toolbar.
    
     */
    toolbar: dxHtmlEditorToolbar;
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    validationError: any;
    /**
     * An array of the validation rules that failed.
    
     */
    validationErrors: Array<any>;
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.
    
     */
    validationMessageMode: string;
    /**
     * Indicates or specifies the current validation status.
    
     */
    validationStatus: string;
    /**
     * Specifies the widget's value.
    
     */
    value: any;
    /**
     * Specifies in which markup language the value is stored.
    
     */
    valueType: string;
    /**
     * Configures variables, which are placeholders to be replaced with actual values when processing text.
    
     */
    variables: dxHtmlEditorVariables;
    /**
     * Specifies whether the widget is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the widget's width.
    
     */
    width: number | Function | string;
    /**
    
     * A function that is executed when the widget's content is ready and each time the content is changed.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the widget is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function that is executed when the widget gets focus.
    
    
     */
    onFocusIn: EventEmitter<any>;
    /**
    
     * A function that is executed when the widget loses focus.
    
    
     */
    onFocusOut: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the widget instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a widget option is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed after the widget's value is changed.
    
    
     */
    onValueChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeModulesChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mediaResizingChange: EventEmitter<dxHtmlEditorMediaResizing>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mentionsChange: EventEmitter<Array<DevExpress.ui.dxHtmlEditorMention>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    placeholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<dxHtmlEditorToolbar>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueTypeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    variablesChange: EventEmitter<dxHtmlEditorVariables>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    mentionsChildren: QueryList<DxiMentionComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxHtmlEditor;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxHtmlEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxHtmlEditorComponent, "dx-html-editor", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "customizeModules": "customizeModules"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "isValid": "isValid"; "mediaResizing": "mediaResizing"; "mentions": "mentions"; "name": "name"; "placeholder": "placeholder"; "readOnly": "readOnly"; "rtlEnabled": "rtlEnabled"; "tabIndex": "tabIndex"; "toolbar": "toolbar"; "validationError": "validationError"; "validationErrors": "validationErrors"; "validationMessageMode": "validationMessageMode"; "validationStatus": "validationStatus"; "value": "value"; "valueType": "valueType"; "variables": "variables"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onValueChanged": "onValueChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "customizeModulesChange": "customizeModulesChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "isValidChange": "isValidChange"; "mediaResizingChange": "mediaResizingChange"; "mentionsChange": "mentionsChange"; "nameChange": "nameChange"; "placeholderChange": "placeholderChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "tabIndexChange": "tabIndexChange"; "toolbarChange": "toolbarChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationMessageModeChange": "validationMessageModeChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "valueTypeChange": "valueTypeChange"; "variablesChange": "variablesChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "onBlur": "onBlur"; }, ["mentionsChildren"], ["*"]>;
}
export declare class DxHtmlEditorModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxHtmlEditorModule, [typeof DxHtmlEditorComponent], [typeof ɵngcc1.DxoMediaResizingModule, typeof ɵngcc1.DxiMentionModule, typeof ɵngcc1.DxoToolbarModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoVariablesModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxHtmlEditorComponent, typeof ɵngcc1.DxoMediaResizingModule, typeof ɵngcc1.DxiMentionModule, typeof ɵngcc1.DxoToolbarModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoVariablesModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxHtmlEditorModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,