/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { format } from 'devextreme/ui/widget/ui.widget';
import { Font } from 'devextreme/viz/core/base_widget';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiBreakComponent } from './break-dxi';
import { DxiConstantLineComponent } from './constant-line-dxi';
import { DxiStripComponent } from './strip-dxi';
import * as ɵngcc0 from '@angular/core';
export declare class DxoArgumentAxisComponent extends NestedOption implements OnDestroy, OnInit {
    aggregateByCategory: boolean;
    aggregationGroupWidth: number;
    aggregationInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    allowDecimals: boolean;
    argumentType: string;
    axisDivisionFactor: number;
    breaks: Array<DevExpress.viz.ScaleBreak>;
    breakStyle: {
        color?: string;
        line?: string;
        width?: number;
    };
    categories: Array<number | string | Date>;
    color: string;
    constantLines: Array<any | {
        color?: string;
        dashStyle?: string;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            position?: string;
            text?: string;
            verticalAlignment?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        value?: Date | number | string;
        width?: number;
    } | {
        color?: string;
        dashStyle?: string;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            text?: string;
            visible?: boolean;
        };
        value?: Date | number | string;
        width?: number;
    }>;
    constantLineStyle: {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            position?: string;
            verticalAlignment?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    } | {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    };
    customPosition: Date | number | string;
    customPositionAxis: string;
    discreteAxisDivisionMode: string;
    endOnTick: boolean;
    grid: {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    holidays: Array<Date | string | number>;
    hoverMode: string;
    inverted: boolean;
    label: {
        alignment?: string;
        customizeHint?: Function;
        customizeText?: Function;
        displayMode?: string;
        font?: Font;
        format?: format | string;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        position?: string;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    } | {
        customizeHint?: Function;
        customizeText?: Function;
        font?: Font;
        format?: format | string;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        visible?: boolean;
    };
    linearThreshold: number;
    logarithmBase: number;
    maxValueMargin: number;
    minorGrid: {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    minorTick: {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    minorTickCount: number;
    minorTickInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    minValueMargin: number;
    minVisualRangeLength: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    offset: number;
    opacity: number;
    placeholderSize: number;
    position: string;
    singleWorkdays: Array<Date | string | number>;
    strips: Array<any | {
        color?: string;
        endValue?: Date | number | string;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            text?: string;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        startValue?: Date | number | string;
    } | {
        color?: string;
        endValue?: Date | number | string;
        label?: {
            font?: Font;
            text?: string;
        };
        startValue?: Date | number | string;
    }>;
    stripStyle: {
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    } | {
        label?: {
            font?: Font;
        };
    };
    tick: {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    tickInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    title: string | {
        alignment?: string;
        font?: Font;
        margin?: number;
        text?: string;
        textOverflow?: string;
        wordWrap?: string;
    };
    type: string;
    valueMarginsEnabled: boolean;
    visible: boolean;
    visualRange: DevExpress.viz.VizRange | Array<number | string | Date>;
    visualRangeUpdateMode: string;
    wholeRange: DevExpress.viz.VizRange | Array<number | string | Date>;
    width: number;
    workdaysOnly: boolean;
    workWeek: Array<number>;
    firstPointOnStartAngle: boolean;
    originValue: number;
    period: number;
    startAngle: number;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visualRangeChange: EventEmitter<DevExpress.viz.VizRange | Array<number | string | Date>>;
    protected readonly _optionPath: string;
    breaksChildren: QueryList<DxiBreakComponent>;
    constantLinesChildren: QueryList<DxiConstantLineComponent>;
    stripsChildren: QueryList<DxiStripComponent>;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxoArgumentAxisComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxoArgumentAxisComponent, "dxo-argument-axis", never, { "aggregateByCategory": "aggregateByCategory"; "aggregationGroupWidth": "aggregationGroupWidth"; "aggregationInterval": "aggregationInterval"; "allowDecimals": "allowDecimals"; "argumentType": "argumentType"; "axisDivisionFactor": "axisDivisionFactor"; "breaks": "breaks"; "breakStyle": "breakStyle"; "categories": "categories"; "color": "color"; "constantLines": "constantLines"; "constantLineStyle": "constantLineStyle"; "customPosition": "customPosition"; "customPositionAxis": "customPositionAxis"; "discreteAxisDivisionMode": "discreteAxisDivisionMode"; "endOnTick": "endOnTick"; "grid": "grid"; "holidays": "holidays"; "hoverMode": "hoverMode"; "inverted": "inverted"; "label": "label"; "linearThreshold": "linearThreshold"; "logarithmBase": "logarithmBase"; "maxValueMargin": "maxValueMargin"; "minorGrid": "minorGrid"; "minorTick": "minorTick"; "minorTickCount": "minorTickCount"; "minorTickInterval": "minorTickInterval"; "minValueMargin": "minValueMargin"; "minVisualRangeLength": "minVisualRangeLength"; "offset": "offset"; "opacity": "opacity"; "placeholderSize": "placeholderSize"; "position": "position"; "singleWorkdays": "singleWorkdays"; "strips": "strips"; "stripStyle": "stripStyle"; "tick": "tick"; "tickInterval": "tickInterval"; "title": "title"; "type": "type"; "valueMarginsEnabled": "valueMarginsEnabled"; "visible": "visible"; "visualRange": "visualRange"; "visualRangeUpdateMode": "visualRangeUpdateMode"; "wholeRange": "wholeRange"; "width": "width"; "workdaysOnly": "workdaysOnly"; "workWeek": "workWeek"; "firstPointOnStartAngle": "firstPointOnStartAngle"; "originValue": "originValue"; "period": "period"; "startAngle": "startAngle"; }, { "visualRangeChange": "visualRangeChange"; }, ["breaksChildren", "constantLinesChildren", "stripsChildren"], never>;
}
export declare class DxoArgumentAxisModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxoArgumentAxisModule, [typeof DxoArgumentAxisComponent], never, [typeof DxoArgumentAxisComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxoArgumentAxisModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,