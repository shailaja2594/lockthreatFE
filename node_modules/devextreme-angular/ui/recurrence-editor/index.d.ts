/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DxRecurrenceEditor from 'devextreme/ui/recurrence_editor';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/**
 * A base class for editors.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
export declare class DxRecurrenceEditorComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxRecurrenceEditor;
    /**
     * Specifies the shortcut key that sets focus on the widget.
    
     */
    accessKey: string;
    /**
     * Specifies whether or not the widget changes its state when interacting with a user.
    
     */
    activeStateEnabled: boolean;
    /**
     * Specifies whether the widget responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Specifies the attributes to be attached to the widget's root element.
    
     */
    elementAttr: any;
    /**
     * Specifies whether the widget can be focused using keyboard navigation.
    
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the widget's height.
    
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the widget.
    
     */
    hint: string;
    /**
     * Specifies whether the widget changes its state when a user pauses on it.
    
     */
    hoverStateEnabled: boolean;
    /**
     * Specifies or indicates whether the editor's value is valid.
    
     */
    isValid: boolean;
    /**
     * Specifies whether the editor is read-only.
    
     */
    readOnly: boolean;
    /**
     * Switches the widget to a right-to-left representation.
    
     */
    rtlEnabled: boolean;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    tabIndex: number;
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    validationError: any;
    /**
     * An array of the validation rules that failed.
    
     */
    validationErrors: Array<any>;
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.
    
     */
    validationMessageMode: string;
    /**
     * Indicates or specifies the current validation status.
    
     */
    validationStatus: string;
    /**
     * Specifies the widget's value.
    
     */
    value: string;
    /**
     * Specifies whether the widget is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the widget's width.
    
     */
    width: number | Function | string;
    /**
    
     * A function that is executed when the widget's content is ready and each time the content is changed.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the widget is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the widget instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a widget option is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed after the widget's value is changed.
    
    
     */
    onValueChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxRecurrenceEditor;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxRecurrenceEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxRecurrenceEditorComponent, "dx-recurrence-editor", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "isValid": "isValid"; "readOnly": "readOnly"; "rtlEnabled": "rtlEnabled"; "tabIndex": "tabIndex"; "validationError": "validationError"; "validationErrors": "validationErrors"; "validationMessageMode": "validationMessageMode"; "validationStatus": "validationStatus"; "value": "value"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onValueChanged": "onValueChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "isValidChange": "isValidChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "tabIndexChange": "tabIndexChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationMessageModeChange": "validationMessageModeChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "onBlur": "onBlur"; }, never, never>;
}
export declare class DxRecurrenceEditorModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxRecurrenceEditorModule, [typeof DxRecurrenceEditorComponent], [typeof ɵngcc1.DxIntegrationModule, typeof ɵngcc1.DxTemplateModule, typeof ɵngcc2.BrowserTransferStateModule], [typeof DxRecurrenceEditorComponent, typeof ɵngcc1.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxRecurrenceEditorModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,