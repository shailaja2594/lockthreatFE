/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, NgZone, QueryList, SimpleChanges, EventEmitter, OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { DxTemplateDirective } from './template';
import { IDxTemplateHost, DxTemplateHost } from './template-host';
import { EmitterHelper } from './events-strategy';
import { WatcherHelper } from './watcher-helper';
import { INestedOptionContainer, ICollectionNestedOption, ICollectionNestedOptionContainer } from './nested-option';
import * as ɵngcc0 from '@angular/core';
export declare const getServerStateKey: () => any;
export declare abstract class DxComponent implements OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit, INestedOptionContainer, ICollectionNestedOptionContainer, IDxTemplateHost {
    protected element: ElementRef;
    private ngZone;
    private watcherHelper;
    private transferState;
    private platformId;
    private _initialOptions;
    protected _optionsToUpdate: any;
    private _collectionContainerImpl;
    eventHelper: EmitterHelper;
    optionChangedHandlers: EventEmitter<any>;
    templates: DxTemplateDirective[];
    instance: any;
    isLinked: boolean;
    changedOptions: {};
    removedNestedComponents: any[];
    recreatedNestedComponents: any[];
    widgetUpdateLocked: boolean;
    private _initTemplates;
    private _initEvents;
    private _initOptions;
    private _initPlatform;
    protected _createEventEmitters(events: any): void;
    _shouldOptionChange(name: string, value: any): boolean;
    clearChangedOptions(): void;
    protected _getOption(name: string): any;
    lockWidgetUpdate(): void;
    unlockWidgetUpdate(): void;
    protected _setOption(name: string, value: any): void;
    protected abstract _createInstance(element: any, options: any): any;
    protected _createWidget(element: any): void;
    protected _destroyWidget(): void;
    constructor(element: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, watcherHelper: WatcherHelper, transferState: TransferState, platformId: any);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    applyOptions(): void;
    resetOptions(collectionName?: string): void;
    isRecreated(name: string): boolean;
    setTemplate(template: DxTemplateDirective): void;
    setChildren<T extends ICollectionNestedOption>(propertyName: string, items: QueryList<T>): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DxComponent, never, never, {}, {}, never>;
}
export declare abstract class DxComponentExtension extends DxComponent implements OnInit, AfterViewInit {
    createInstance(element: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxComponentExtension, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DxComponentExtension, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxyXG4gKiBWZXJzaW9uOiAyMC4yLjRcclxuICogQnVpbGQgZGF0ZTogVHVlIERlYyAwMSAyMDIwXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqXHJcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcclxuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqL1xyXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBOZ1pvbmUsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcywgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgRG9DaGVjaywgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IER4VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3RlbXBsYXRlJztcclxuaW1wb3J0IHsgSUR4VGVtcGxhdGVIb3N0LCBEeFRlbXBsYXRlSG9zdCB9IGZyb20gJy4vdGVtcGxhdGUtaG9zdCc7XHJcbmltcG9ydCB7IEVtaXR0ZXJIZWxwZXIgfSBmcm9tICcuL2V2ZW50cy1zdHJhdGVneSc7XHJcbmltcG9ydCB7IFdhdGNoZXJIZWxwZXIgfSBmcm9tICcuL3dhdGNoZXItaGVscGVyJztcclxuaW1wb3J0IHsgSU5lc3RlZE9wdGlvbkNvbnRhaW5lciwgSUNvbGxlY3Rpb25OZXN0ZWRPcHRpb24sIElDb2xsZWN0aW9uTmVzdGVkT3B0aW9uQ29udGFpbmVyIH0gZnJvbSAnLi9uZXN0ZWQtb3B0aW9uJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZ2V0U2VydmVyU3RhdGVLZXk6ICgpID0+IGFueTtcclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgRHhDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgRG9DaGVjaywgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgSU5lc3RlZE9wdGlvbkNvbnRhaW5lciwgSUNvbGxlY3Rpb25OZXN0ZWRPcHRpb25Db250YWluZXIsIElEeFRlbXBsYXRlSG9zdCB7XHJcbiAgICBwcm90ZWN0ZWQgZWxlbWVudDogRWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgbmdab25lO1xyXG4gICAgcHJpdmF0ZSB3YXRjaGVySGVscGVyO1xyXG4gICAgcHJpdmF0ZSB0cmFuc2ZlclN0YXRlO1xyXG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xyXG4gICAgcHJpdmF0ZSBfaW5pdGlhbE9wdGlvbnM7XHJcbiAgICBwcm90ZWN0ZWQgX29wdGlvbnNUb1VwZGF0ZTogYW55O1xyXG4gICAgcHJpdmF0ZSBfY29sbGVjdGlvbkNvbnRhaW5lckltcGw7XHJcbiAgICBldmVudEhlbHBlcjogRW1pdHRlckhlbHBlcjtcclxuICAgIG9wdGlvbkNoYW5nZWRIYW5kbGVyczogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICB0ZW1wbGF0ZXM6IER4VGVtcGxhdGVEaXJlY3RpdmVbXTtcclxuICAgIGluc3RhbmNlOiBhbnk7XHJcbiAgICBpc0xpbmtlZDogYm9vbGVhbjtcclxuICAgIGNoYW5nZWRPcHRpb25zOiB7fTtcclxuICAgIHJlbW92ZWROZXN0ZWRDb21wb25lbnRzOiBhbnlbXTtcclxuICAgIHJlY3JlYXRlZE5lc3RlZENvbXBvbmVudHM6IGFueVtdO1xyXG4gICAgd2lkZ2V0VXBkYXRlTG9ja2VkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfaW5pdFRlbXBsYXRlcztcclxuICAgIHByaXZhdGUgX2luaXRFdmVudHM7XHJcbiAgICBwcml2YXRlIF9pbml0T3B0aW9ucztcclxuICAgIHByaXZhdGUgX2luaXRQbGF0Zm9ybTtcclxuICAgIHByb3RlY3RlZCBfY3JlYXRlRXZlbnRFbWl0dGVycyhldmVudHM6IGFueSk6IHZvaWQ7XHJcbiAgICBfc2hvdWxkT3B0aW9uQ2hhbmdlKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IGJvb2xlYW47XHJcbiAgICBjbGVhckNoYW5nZWRPcHRpb25zKCk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgX2dldE9wdGlvbihuYW1lOiBzdHJpbmcpOiBhbnk7XHJcbiAgICBsb2NrV2lkZ2V0VXBkYXRlKCk6IHZvaWQ7XHJcbiAgICB1bmxvY2tXaWRnZXRVcGRhdGUoKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBfc2V0T3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgX2NyZWF0ZUluc3RhbmNlKGVsZW1lbnQ6IGFueSwgb3B0aW9uczogYW55KTogYW55O1xyXG4gICAgcHJvdGVjdGVkIF9jcmVhdGVXaWRnZXQoZWxlbWVudDogYW55KTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBfZGVzdHJveVdpZGdldCgpOiB2b2lkO1xyXG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgbmdab25lOiBOZ1pvbmUsIHRlbXBsYXRlSG9zdDogRHhUZW1wbGF0ZUhvc3QsIHdhdGNoZXJIZWxwZXI6IFdhdGNoZXJIZWxwZXIsIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUsIHBsYXRmb3JtSWQ6IGFueSk7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBhcHBseU9wdGlvbnMoKTogdm9pZDtcclxuICAgIHJlc2V0T3B0aW9ucyhjb2xsZWN0aW9uTmFtZT86IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBpc1JlY3JlYXRlZChuYW1lOiBzdHJpbmcpOiBib29sZWFuO1xyXG4gICAgc2V0VGVtcGxhdGUodGVtcGxhdGU6IER4VGVtcGxhdGVEaXJlY3RpdmUpOiB2b2lkO1xyXG4gICAgc2V0Q2hpbGRyZW48VCBleHRlbmRzIElDb2xsZWN0aW9uTmVzdGVkT3B0aW9uPihwcm9wZXJ0eU5hbWU6IHN0cmluZywgaXRlbXM6IFF1ZXJ5TGlzdDxUPik6IGFueTtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBEeENvbXBvbmVudEV4dGVuc2lvbiBleHRlbmRzIER4Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICAgIGNyZWF0ZUluc3RhbmNlKGVsZW1lbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbn1cclxuIl19