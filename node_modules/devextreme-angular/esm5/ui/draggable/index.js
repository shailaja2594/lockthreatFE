/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
import { BrowserTransferStateModule } from '@angular/platform-browser';
import { TransferState } from '@angular/platform-browser';
import { Component, NgModule, ElementRef, NgZone, PLATFORM_ID, Inject, Input, Output, OnDestroy, EventEmitter } from '@angular/core';
import DxDraggable from 'devextreme/ui/draggable';
import { DxComponent, DxTemplateHost, DxIntegrationModule, DxTemplateModule, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import { DxoCursorOffsetModule } from 'devextreme-angular/ui/nested';
/**
 * Draggable is a user interface utility that allows widget elements to be dragged and dropped.

 */
var DxDraggableComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxDraggableComponent, _super);
    function DxDraggableComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
        _this._createEventEmitters([
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'dragEnd', emit: 'onDragEnd' },
            { subscribe: 'dragMove', emit: 'onDragMove' },
            { subscribe: 'dragStart', emit: 'onDragStart' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { emit: 'autoScrollChange' },
            { emit: 'boundaryChange' },
            { emit: 'cloneChange' },
            { emit: 'containerChange' },
            { emit: 'cursorOffsetChange' },
            { emit: 'dataChange' },
            { emit: 'dragDirectionChange' },
            { emit: 'dragTemplateChange' },
            { emit: 'elementAttrChange' },
            { emit: 'groupChange' },
            { emit: 'handleChange' },
            { emit: 'heightChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'scrollSensitivityChange' },
            { emit: 'scrollSpeedChange' },
            { emit: 'widthChange' }
        ]);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxDraggableComponent.prototype, "autoScroll", {
        /**
         * Enables automatic scrolling while dragging an item beyond the viewport.
        
         */
        get: function () {
            return this._getOption('autoScroll');
        },
        set: function (value) {
            this._setOption('autoScroll', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "boundary", {
        /**
         * Specifies a DOM element that limits the dragging area.
        
         */
        get: function () {
            return this._getOption('boundary');
        },
        set: function (value) {
            this._setOption('boundary', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "clone", {
        /**
         * Allows a user to drag clones of items instead of actual items.
        
         */
        get: function () {
            return this._getOption('clone');
        },
        set: function (value) {
            this._setOption('clone', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "container", {
        /**
         * Specifies a custom container in which the draggable item should be rendered.
        
         */
        get: function () {
            return this._getOption('container');
        },
        set: function (value) {
            this._setOption('container', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "cursorOffset", {
        /**
         * Specifies the cursor offset from the dragged item.
        
         */
        get: function () {
            return this._getOption('cursorOffset');
        },
        set: function (value) {
            this._setOption('cursorOffset', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "data", {
        /**
         * A container for custom data.
        
         */
        get: function () {
            return this._getOption('data');
        },
        set: function (value) {
            this._setOption('data', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "dragDirection", {
        /**
         * Specifies the directions in which an item can be dragged.
        
         */
        get: function () {
            return this._getOption('dragDirection');
        },
        set: function (value) {
            this._setOption('dragDirection', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "dragTemplate", {
        /**
         * Specifies custom markup to be shown instead of the item being dragged.
        
         */
        get: function () {
            return this._getOption('dragTemplate');
        },
        set: function (value) {
            this._setOption('dragTemplate', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "elementAttr", {
        /**
         * Specifies the attributes to be attached to the widget's root element.
        
         */
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "group", {
        /**
         * Allows you to group several widgets, so that users can drag and drop items between them.
        
         */
        get: function () {
            return this._getOption('group');
        },
        set: function (value) {
            this._setOption('group', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "handle", {
        /**
         * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).
        
         */
        get: function () {
            return this._getOption('handle');
        },
        set: function (value) {
            this._setOption('handle', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "height", {
        /**
         * Specifies the widget's height.
        
         */
        get: function () {
            return this._getOption('height');
        },
        set: function (value) {
            this._setOption('height', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "rtlEnabled", {
        /**
         * Switches the widget to a right-to-left representation.
        
         */
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "scrollSensitivity", {
        /**
         * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.
        
         */
        get: function () {
            return this._getOption('scrollSensitivity');
        },
        set: function (value) {
            this._setOption('scrollSensitivity', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "scrollSpeed", {
        /**
         * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.
        
         */
        get: function () {
            return this._getOption('scrollSpeed');
        },
        set: function (value) {
            this._setOption('scrollSpeed', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDraggableComponent.prototype, "width", {
        /**
         * Specifies the widget's width.
        
         */
        get: function () {
            return this._getOption('width');
        },
        set: function (value) {
            this._setOption('width', value);
        },
        enumerable: true,
        configurable: true
    });
    DxDraggableComponent.prototype._createInstance = function (element, options) {
        return new DxDraggable(element, options);
    };
    DxDraggableComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxDraggableComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: DxTemplateHost },
        { type: WatcherHelper },
        { type: NestedOptionHost },
        { type: TransferState },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxDraggableComponent.prototype, "autoScroll", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxDraggableComponent.prototype, "boundary", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxDraggableComponent.prototype, "clone", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxDraggableComponent.prototype, "container", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxDraggableComponent.prototype, "cursorOffset", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxDraggableComponent.prototype, "data", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxDraggableComponent.prototype, "dragDirection", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxDraggableComponent.prototype, "dragTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxDraggableComponent.prototype, "elementAttr", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxDraggableComponent.prototype, "group", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxDraggableComponent.prototype, "handle", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxDraggableComponent.prototype, "height", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxDraggableComponent.prototype, "rtlEnabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], DxDraggableComponent.prototype, "scrollSensitivity", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], DxDraggableComponent.prototype, "scrollSpeed", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxDraggableComponent.prototype, "width", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "onDisposing", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "onDragEnd", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "onDragMove", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "onDragStart", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "onInitialized", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "onOptionChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "autoScrollChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "boundaryChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "cloneChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "containerChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "cursorOffsetChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "dataChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "dragDirectionChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "dragTemplateChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "elementAttrChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "groupChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "handleChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "heightChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "rtlEnabledChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "scrollSensitivityChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "scrollSpeedChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxDraggableComponent.prototype, "widthChange", void 0);
    DxDraggableComponent = tslib_1.__decorate([
        Component({
            selector: 'dx-draggable',
            template: '<ng-content></ng-content>',
            providers: [
                DxTemplateHost,
                WatcherHelper,
                NestedOptionHost
            ]
        }),
        tslib_1.__param(6, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            TransferState, Object])
    ], DxDraggableComponent);
    return DxDraggableComponent;
}(DxComponent));
export { DxDraggableComponent };
var DxDraggableModule = /** @class */ (function () {
    function DxDraggableModule() {
    }
    DxDraggableModule = tslib_1.__decorate([
        NgModule({
            imports: [
                DxoCursorOffsetModule,
                DxIntegrationModule,
                DxTemplateModule,
                BrowserTransferStateModule
            ],
            declarations: [
                DxDraggableComponent
            ],
            exports: [
                DxDraggableComponent,
                DxoCursorOffsetModule,
                DxTemplateModule
            ]
        })
    ], DxDraggableModule);
    return DxDraggableModule;
}());
export { DxDraggableModule };
//# sourceMappingURL=data:application/json;base64,