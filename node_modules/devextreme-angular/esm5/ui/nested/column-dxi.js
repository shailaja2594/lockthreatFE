/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf, Output, EventEmitter, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiDataGridColumn } from './base/data-grid-column-dxi';
import { DxiButtonComponent } from './button-dxi';
import { DxiValidationRuleComponent } from './validation-rule-dxi';
var DxiColumnComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxiColumnComponent, _super);
    function DxiColumnComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        _this._createEventEmitters([
            { emit: 'filterValueChange' },
            { emit: 'filterValuesChange' },
            { emit: 'groupIndexChange' },
            { emit: 'selectedFilterOperationChange' },
            { emit: 'sortIndexChange' },
            { emit: 'sortOrderChange' },
            { emit: 'visibleChange' },
            { emit: 'visibleIndexChange' }
        ]);
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    DxiColumnComponent_1 = DxiColumnComponent;
    Object.defineProperty(DxiColumnComponent.prototype, "_optionPath", {
        get: function () {
            return 'columns';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxiColumnComponent.prototype, "buttonsChildren", {
        get: function () {
            return this._getOption('buttons');
        },
        set: function (value) {
            this.setChildren('buttons', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxiColumnComponent.prototype, "columnsChildren", {
        get: function () {
            return this._getOption('columns');
        },
        set: function (value) {
            this.setChildren('columns', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxiColumnComponent.prototype, "validationRulesChildren", {
        get: function () {
            return this._getOption('validationRules');
        },
        set: function (value) {
            this.setChildren('validationRules', value);
        },
        enumerable: true,
        configurable: true
    });
    DxiColumnComponent.prototype.ngOnDestroy = function () {
        this._deleteRemovedOptions(this._fullOptionPath());
    };
    var DxiColumnComponent_1;
    DxiColumnComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxiColumnComponent.prototype, "filterValueChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxiColumnComponent.prototype, "filterValuesChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxiColumnComponent.prototype, "groupIndexChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxiColumnComponent.prototype, "selectedFilterOperationChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxiColumnComponent.prototype, "sortIndexChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxiColumnComponent.prototype, "sortOrderChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxiColumnComponent.prototype, "visibleChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxiColumnComponent.prototype, "visibleIndexChange", void 0);
    tslib_1.__decorate([
        ContentChildren(forwardRef(function () { return DxiButtonComponent; })),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxiColumnComponent.prototype, "buttonsChildren", null);
    tslib_1.__decorate([
        ContentChildren(forwardRef(function () { return DxiColumnComponent_1; })),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxiColumnComponent.prototype, "columnsChildren", null);
    tslib_1.__decorate([
        ContentChildren(forwardRef(function () { return DxiValidationRuleComponent; })),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxiColumnComponent.prototype, "validationRulesChildren", null);
    DxiColumnComponent = DxiColumnComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'dxi-column',
            template: '',
            providers: [NestedOptionHost],
            inputs: [
                'alignment',
                'allowEditing',
                'allowExporting',
                'allowFiltering',
                'allowFixing',
                'allowGrouping',
                'allowHeaderFiltering',
                'allowHiding',
                'allowReordering',
                'allowResizing',
                'allowSearch',
                'allowSorting',
                'autoExpandGroup',
                'buttons',
                'calculateCellValue',
                'calculateDisplayValue',
                'calculateFilterExpression',
                'calculateGroupValue',
                'calculateSortValue',
                'caption',
                'cellTemplate',
                'columns',
                'cssClass',
                'customizeText',
                'dataField',
                'dataType',
                'editCellTemplate',
                'editorOptions',
                'encodeHtml',
                'falseText',
                'filterOperations',
                'filterType',
                'filterValue',
                'filterValues',
                'fixed',
                'fixedPosition',
                'format',
                'formItem',
                'groupCellTemplate',
                'groupIndex',
                'headerCellTemplate',
                'headerFilter',
                'hidingPriority',
                'isBand',
                'lookup',
                'minWidth',
                'name',
                'ownerBand',
                'renderAsync',
                'selectedFilterOperation',
                'setCellValue',
                'showEditorAlways',
                'showInColumnChooser',
                'showWhenGrouped',
                'sortIndex',
                'sortingMethod',
                'sortOrder',
                'trueText',
                'type',
                'validationRules',
                'visible',
                'visibleIndex',
                'width'
            ],
            styles: ['']
        }),
        tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxiColumnComponent);
    return DxiColumnComponent;
}(DxiDataGridColumn));
export { DxiColumnComponent };
var DxiColumnModule = /** @class */ (function () {
    function DxiColumnModule() {
    }
    DxiColumnModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                DxiColumnComponent
            ],
            exports: [
                DxiColumnComponent
            ],
        })
    ], DxiColumnModule);
    return DxiColumnModule;
}());
export { DxiColumnModule };
//# sourceMappingURL=data:application/json;base64,