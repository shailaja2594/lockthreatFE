/*!
 * devextreme-angular
 * Version: 20.2.4
 * Build date: Tue Dec 01 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { NestedOption } from 'devextreme-angular/core';
export class DxoPivotGridDataSource extends NestedOption {
    get fields() {
        return this._getOption('fields');
    }
    set fields(value) {
        this._setOption('fields', value);
    }
    get filter() {
        return this._getOption('filter');
    }
    set filter(value) {
        this._setOption('filter', value);
    }
    get onChanged() {
        return this._getOption('onChanged');
    }
    set onChanged(value) {
        this._setOption('onChanged', value);
    }
    get onFieldsPrepared() {
        return this._getOption('onFieldsPrepared');
    }
    set onFieldsPrepared(value) {
        this._setOption('onFieldsPrepared', value);
    }
    get onLoadError() {
        return this._getOption('onLoadError');
    }
    set onLoadError(value) {
        this._setOption('onLoadError', value);
    }
    get onLoadingChanged() {
        return this._getOption('onLoadingChanged');
    }
    set onLoadingChanged(value) {
        this._setOption('onLoadingChanged', value);
    }
    get remoteOperations() {
        return this._getOption('remoteOperations');
    }
    set remoteOperations(value) {
        this._setOption('remoteOperations', value);
    }
    get retrieveFields() {
        return this._getOption('retrieveFields');
    }
    set retrieveFields(value) {
        this._setOption('retrieveFields', value);
    }
    get store() {
        return this._getOption('store');
    }
    set store(value) {
        this._setOption('store', value);
    }
}
//# sourceMappingURL=data:application/json;base64,