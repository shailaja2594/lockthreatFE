import { OnInit, OnDestroy, SimpleChanges, OnChanges, ChangeDetectorRef, AfterViewChecked, EventEmitter, ElementRef } from '@angular/core';
import { ControlValueAccessor, Validator, FormControl } from '@angular/forms';
import { DropdownSettings } from './multiselect.interface';
import { ListFilterPipe } from './list-filter';
import { Item, Badge, Search } from './menu-item';
import { DataService } from './multiselect.service';
import { Subscription, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './clickOutside';
import * as ɵngcc2 from './list-filter';
import * as ɵngcc3 from './menu-item';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from './virtual-scroll/virtual-scroll';
export declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;
export declare const DROPDOWN_CONTROL_VALIDATION: any;
export declare class AngularMultiSelect implements OnInit, ControlValueAccessor, OnChanges, Validator, AfterViewChecked, OnDestroy {
    _elementRef: ElementRef;
    private cdr;
    private ds;
    data: Array<any>;
    settings: DropdownSettings;
    loading: boolean;
    onSelect: EventEmitter<any>;
    onDeSelect: EventEmitter<any>;
    onSelectAll: EventEmitter<Array<any>>;
    onDeSelectAll: EventEmitter<Array<any>>;
    onOpen: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onScrollToEnd: EventEmitter<any>;
    onFilterSelectAll: EventEmitter<Array<any>>;
    onFilterDeSelectAll: EventEmitter<Array<any>>;
    onAddFilterNewItem: EventEmitter<any>;
    onGroupSelect: EventEmitter<any>;
    onGroupDeSelect: EventEmitter<any>;
    itemTempl: Item;
    badgeTempl: Badge;
    searchTempl: Search;
    searchInput: ElementRef;
    selectedListElem: ElementRef;
    dropdownListElem: ElementRef;
    onEscapeDown(event: KeyboardEvent): void;
    virtualdata: any;
    searchTerm$: Subject<string>;
    filterPipe: ListFilterPipe;
    selectedItems: Array<any>;
    isActive: boolean;
    isSelectAll: boolean;
    isFilterSelectAll: boolean;
    isInfiniteFilterSelectAll: boolean;
    groupedData: Array<any>;
    filter: any;
    chunkArray: any[];
    scrollTop: any;
    chunkIndex: any[];
    cachedItems: any[];
    groupCachedItems: any[];
    totalRows: any;
    itemHeight: any;
    screenItemsLen: any;
    cachedItemsLen: any;
    totalHeight: any;
    scroller: any;
    maxBuffer: any;
    lastScrolled: any;
    lastRepaintY: any;
    selectedListHeight: any;
    filterLength: any;
    infiniteFilterLength: any;
    viewPortItems: any;
    item: any;
    dropdownListYOffset: number;
    subscription: Subscription;
    defaultSettings: DropdownSettings;
    randomSize: boolean;
    parseError: boolean;
    filteredList: any;
    virtualScroollInit: boolean;
    private virtualScroller;
    constructor(_elementRef: ElementRef, cdr: ChangeDetectorRef, ds: DataService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onItemClick(item: any, index: number, evt: Event): boolean;
    validate(c: FormControl): any;
    private onTouchedCallback;
    private onChangeCallback;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    trackByFn(index: number, item: any): any;
    isSelected(clickedItem: any): boolean;
    addSelected(item: any): void;
    removeSelected(clickedItem: any): void;
    toggleDropdown(evt: any): boolean;
    openDropdown(): boolean;
    closeDropdown(): void;
    closeDropdownOnClickOut(): void;
    toggleSelectAll(): void;
    filterGroupedList(): void;
    toggleFilterSelectAll(): void;
    toggleInfiniteFilterSelectAll(): void;
    clearSearch(): void;
    onFilterChange(data: any): void;
    cloneArray(arr: any): any;
    updateGroupInfo(item: any): void;
    transformData(arr: Array<any>, field: any): Array<any>;
    filterInfiniteList(evt: any): void;
    resetInfiniteSearch(): void;
    onScrollEnd(e: any): void;
    ngOnDestroy(): void;
    selectGroup(item: any): void;
    addFilterNewItem(): void;
    calculateDropdownDirection(): void;
    openTowardsTop(value: boolean): void;
    clearSelection(e: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularMultiSelect, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AngularMultiSelect, "angular2-multiselect", never, { "settings": "settings"; "data": "data"; "loading": "loading"; }, { "onSelect": "onSelect"; "onDeSelect": "onDeSelect"; "onSelectAll": "onSelectAll"; "onDeSelectAll": "onDeSelectAll"; "onOpen": "onOpen"; "onClose": "onClose"; "onScrollToEnd": "onScrollToEnd"; "onFilterSelectAll": "onFilterSelectAll"; "onFilterDeSelectAll": "onFilterDeSelectAll"; "onAddFilterNewItem": "onAddFilterNewItem"; "onGroupSelect": "onGroupSelect"; "onGroupDeSelect": "onGroupDeSelect"; }, ["itemTempl", "badgeTempl", "searchTempl"], never>;
}
export declare class AngularMultiSelectModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AngularMultiSelectModule, [typeof AngularMultiSelect, typeof ɵngcc1.ClickOutsideDirective, typeof ɵngcc1.ScrollDirective, typeof ɵngcc1.styleDirective, typeof ɵngcc2.ListFilterPipe, typeof ɵngcc3.Item, typeof ɵngcc3.TemplateRenderer, typeof ɵngcc3.Badge, typeof ɵngcc3.Search, typeof ɵngcc1.setPosition, typeof ɵngcc3.CIcon], [typeof ɵngcc4.CommonModule, typeof ɵngcc5.FormsModule, typeof ɵngcc6.VirtualScrollerModule], [typeof AngularMultiSelect, typeof ɵngcc1.ClickOutsideDirective, typeof ɵngcc1.ScrollDirective, typeof ɵngcc1.styleDirective, typeof ɵngcc2.ListFilterPipe, typeof ɵngcc3.Item, typeof ɵngcc3.TemplateRenderer, typeof ɵngcc3.Badge, typeof ɵngcc3.Search, typeof ɵngcc1.setPosition, typeof ɵngcc3.CIcon]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AngularMultiSelectModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm11bHRpc2VsZWN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgQ2hhbmdlRGV0ZWN0b3JSZWYsIEFmdGVyVmlld0NoZWNrZWQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciwgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEcm9wZG93blNldHRpbmdzIH0gZnJvbSAnLi9tdWx0aXNlbGVjdC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTGlzdEZpbHRlclBpcGUgfSBmcm9tICcuL2xpc3QtZmlsdGVyJztcbmltcG9ydCB7IEl0ZW0sIEJhZGdlLCBTZWFyY2ggfSBmcm9tICcuL21lbnUtaXRlbSc7XG5pbXBvcnQgeyBEYXRhU2VydmljZSB9IGZyb20gJy4vbXVsdGlzZWxlY3Quc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IERST1BET1dOX0NPTlRST0xfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IERST1BET1dOX0NPTlRST0xfVkFMSURBVElPTjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhck11bHRpU2VsZWN0IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25DaGFuZ2VzLCBWYWxpZGF0b3IsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG4gICAgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSBkcztcbiAgICBkYXRhOiBBcnJheTxhbnk+O1xuICAgIHNldHRpbmdzOiBEcm9wZG93blNldHRpbmdzO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uU2VsZWN0QWxsOiBFdmVudEVtaXR0ZXI8QXJyYXk8YW55Pj47XG4gICAgb25EZVNlbGVjdEFsbDogRXZlbnRFbWl0dGVyPEFycmF5PGFueT4+O1xuICAgIG9uT3BlbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25DbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TY3JvbGxUb0VuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25GaWx0ZXJTZWxlY3RBbGw6IEV2ZW50RW1pdHRlcjxBcnJheTxhbnk+PjtcbiAgICBvbkZpbHRlckRlU2VsZWN0QWxsOiBFdmVudEVtaXR0ZXI8QXJyYXk8YW55Pj47XG4gICAgb25BZGRGaWx0ZXJOZXdJdGVtOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkdyb3VwU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkdyb3VwRGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGl0ZW1UZW1wbDogSXRlbTtcbiAgICBiYWRnZVRlbXBsOiBCYWRnZTtcbiAgICBzZWFyY2hUZW1wbDogU2VhcmNoO1xuICAgIHNlYXJjaElucHV0OiBFbGVtZW50UmVmO1xuICAgIHNlbGVjdGVkTGlzdEVsZW06IEVsZW1lbnRSZWY7XG4gICAgZHJvcGRvd25MaXN0RWxlbTogRWxlbWVudFJlZjtcbiAgICBvbkVzY2FwZURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHZpcnR1YWxkYXRhOiBhbnk7XG4gICAgc2VhcmNoVGVybSQ6IFN1YmplY3Q8c3RyaW5nPjtcbiAgICBmaWx0ZXJQaXBlOiBMaXN0RmlsdGVyUGlwZTtcbiAgICBzZWxlY3RlZEl0ZW1zOiBBcnJheTxhbnk+O1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIGlzU2VsZWN0QWxsOiBib29sZWFuO1xuICAgIGlzRmlsdGVyU2VsZWN0QWxsOiBib29sZWFuO1xuICAgIGlzSW5maW5pdGVGaWx0ZXJTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgZ3JvdXBlZERhdGE6IEFycmF5PGFueT47XG4gICAgZmlsdGVyOiBhbnk7XG4gICAgY2h1bmtBcnJheTogYW55W107XG4gICAgc2Nyb2xsVG9wOiBhbnk7XG4gICAgY2h1bmtJbmRleDogYW55W107XG4gICAgY2FjaGVkSXRlbXM6IGFueVtdO1xuICAgIGdyb3VwQ2FjaGVkSXRlbXM6IGFueVtdO1xuICAgIHRvdGFsUm93czogYW55O1xuICAgIGl0ZW1IZWlnaHQ6IGFueTtcbiAgICBzY3JlZW5JdGVtc0xlbjogYW55O1xuICAgIGNhY2hlZEl0ZW1zTGVuOiBhbnk7XG4gICAgdG90YWxIZWlnaHQ6IGFueTtcbiAgICBzY3JvbGxlcjogYW55O1xuICAgIG1heEJ1ZmZlcjogYW55O1xuICAgIGxhc3RTY3JvbGxlZDogYW55O1xuICAgIGxhc3RSZXBhaW50WTogYW55O1xuICAgIHNlbGVjdGVkTGlzdEhlaWdodDogYW55O1xuICAgIGZpbHRlckxlbmd0aDogYW55O1xuICAgIGluZmluaXRlRmlsdGVyTGVuZ3RoOiBhbnk7XG4gICAgdmlld1BvcnRJdGVtczogYW55O1xuICAgIGl0ZW06IGFueTtcbiAgICBkcm9wZG93bkxpc3RZT2Zmc2V0OiBudW1iZXI7XG4gICAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgZGVmYXVsdFNldHRpbmdzOiBEcm9wZG93blNldHRpbmdzO1xuICAgIHJhbmRvbVNpemU6IGJvb2xlYW47XG4gICAgcGFyc2VFcnJvcjogYm9vbGVhbjtcbiAgICBmaWx0ZXJlZExpc3Q6IGFueTtcbiAgICB2aXJ0dWFsU2Nyb29sbEluaXQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSB2aXJ0dWFsU2Nyb2xsZXI7XG4gICAgY29uc3RydWN0b3IoX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRzOiBEYXRhU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBvbkl0ZW1DbGljayhpdGVtOiBhbnksIGluZGV4OiBudW1iZXIsIGV2dDogRXZlbnQpOiBib29sZWFuO1xuICAgIHZhbGlkYXRlKGM6IEZvcm1Db250cm9sKTogYW55O1xuICAgIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICB0cmFja0J5Rm4oaW5kZXg6IG51bWJlciwgaXRlbTogYW55KTogYW55O1xuICAgIGlzU2VsZWN0ZWQoY2xpY2tlZEl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgYWRkU2VsZWN0ZWQoaXRlbTogYW55KTogdm9pZDtcbiAgICByZW1vdmVTZWxlY3RlZChjbGlja2VkSXRlbTogYW55KTogdm9pZDtcbiAgICB0b2dnbGVEcm9wZG93bihldnQ6IGFueSk6IGJvb2xlYW47XG4gICAgb3BlbkRyb3Bkb3duKCk6IGJvb2xlYW47XG4gICAgY2xvc2VEcm9wZG93bigpOiB2b2lkO1xuICAgIGNsb3NlRHJvcGRvd25PbkNsaWNrT3V0KCk6IHZvaWQ7XG4gICAgdG9nZ2xlU2VsZWN0QWxsKCk6IHZvaWQ7XG4gICAgZmlsdGVyR3JvdXBlZExpc3QoKTogdm9pZDtcbiAgICB0b2dnbGVGaWx0ZXJTZWxlY3RBbGwoKTogdm9pZDtcbiAgICB0b2dnbGVJbmZpbml0ZUZpbHRlclNlbGVjdEFsbCgpOiB2b2lkO1xuICAgIGNsZWFyU2VhcmNoKCk6IHZvaWQ7XG4gICAgb25GaWx0ZXJDaGFuZ2UoZGF0YTogYW55KTogdm9pZDtcbiAgICBjbG9uZUFycmF5KGFycjogYW55KTogYW55O1xuICAgIHVwZGF0ZUdyb3VwSW5mbyhpdGVtOiBhbnkpOiB2b2lkO1xuICAgIHRyYW5zZm9ybURhdGEoYXJyOiBBcnJheTxhbnk+LCBmaWVsZDogYW55KTogQXJyYXk8YW55PjtcbiAgICBmaWx0ZXJJbmZpbml0ZUxpc3QoZXZ0OiBhbnkpOiB2b2lkO1xuICAgIHJlc2V0SW5maW5pdGVTZWFyY2goKTogdm9pZDtcbiAgICBvblNjcm9sbEVuZChlOiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgc2VsZWN0R3JvdXAoaXRlbTogYW55KTogdm9pZDtcbiAgICBhZGRGaWx0ZXJOZXdJdGVtKCk6IHZvaWQ7XG4gICAgY2FsY3VsYXRlRHJvcGRvd25EaXJlY3Rpb24oKTogdm9pZDtcbiAgICBvcGVuVG93YXJkc1RvcCh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgY2xlYXJTZWxlY3Rpb24oZTogYW55KTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJNdWx0aVNlbGVjdE1vZHVsZSB7XG59XG4iXX0=