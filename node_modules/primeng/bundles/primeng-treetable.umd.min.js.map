{"version":3,"sources":["ng://primeng/treetable/treetable.ts"],"names":["TreeTableService","this","sortSource","Subject","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","__decorate","Injectable","TreeTable","el","zone","tableService","lazy","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","virtualScroll","virtualScrollCallback","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","nodes_1","__values","nodes_1_1","done","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","nodes_2","nodes_2_1","sortMultipleNodes","multisortmeta","multisortField","nodes_3","nodes_3_1","isSorted","sorted","globalFilter","handleVirtualScroll","page","callback","run","virtualScrollTimer","clearTimeout","setTimeout","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","DomHandler","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","top","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollable","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","tableViewChild","containerWidth","element","removeClass","parent_1","parentElement","hasClass","table","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","isMultipleSelectionMode","__spread","rowIndex","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","data_1","data_1_1","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","index_1","equals","matchMode","filterTimeout","isFilterBlank","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","__assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","FilterUtils","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","NgZone","Input","Output","ViewChild","ContentChildren","PrimeTemplate","Component","selector","providers","TTBody","tt","TTScrollableView","loadingArray","subscription","subscribe","runOutsideAngular","alignScrollBar","scrollLoadingTableViewChild","totalRecordsSubscription","setVirtualScrollerHeight","fill","_scrollHeight","setScrollHeight","ngAfterViewChecked","ngAfterViewInit","bindEvents","frozen","scrollBodyViewChild","paddingBottom","calculateScrollbarWidth","frozenColumns","frozenWidth","frozenView","previousElementSibling","frozenSiblingBody","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollHeaderBoxViewChild","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","unbindEvents","marginLeft","scrollFooterBoxViewChild","scrollTop","viewport","getOuterHeight","tableHeight","scrollTableViewChild","pageHeight_1","pageCount","virtualScrollerViewChild","scrollBodyTop","parseFloat","page_1","floor","scrollHeight","indexOf","relativeHeight","visibility","containerHeight","includes","percentHeight","diffValue","scrollBodyHeight","maxHeight","hasVerticalOverflow","scrollBarWidth","marginRight","unsubscribe","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","HostListener","Directive","host","[class.ui-sortable-column]","[class.ui-state-highlight]","[attr.tabindex]","TTSortIcon","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","[class.ui-contextmenu-selected]","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","data_2","data_2_1","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","row","TreeTableToggler","TreeTableModule","NgModule","imports","CommonModule","PaginatorModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeNode } from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { SortMeta } from 'primeng/api';\nimport { BlockableUI } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport { FilterUtils } from 'primeng/utils';\n\n@Injectable()\nexport class TreeTableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private uiUpdateSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(node: any) {\n        this.contextMenuSource.next(node);\n    }\n\n    onUIUpdate(value: any) {\n        this.uiUpdateSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n}\n\n@Component({\n    selector: 'p-treeTable',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n                [ngClass]=\"{'ui-treetable ui-widget': true, 'ui-treetable-auto-layout': autoLayout, 'ui-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'ui-treetable-resizable': resizableColumns, 'ui-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit')}\">\n            <div class=\"ui-treetable-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n            <div class=\"ui-treetable-loading-content\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'ui-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"ui-treetable-caption ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            \n            <div class=\"ui-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table class=\"ui-treetable-table\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tfoot class=\"ui-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                </table>\n            </div>\n\n            <div class=\"ui-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"ui-treetable-scrollable-view ui-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"ui-treetable-scrollable-view\" [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"ui-treetable-summary ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TreeTableService]\n})\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\n\n    @Input() columns: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() autoLayout: boolean;\n\n    @Input() lazy: boolean = false;\n\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() first: number = 0;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n    \n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() customSort: boolean;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() rowHover: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() frozenWidth: string;\n\n    @Input() frozenColumns: any[];\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterMode: string = 'lenient';\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: TreeNode[] = [];\n\n    serializedValue: any[];\n\n    _totalRecords: number = 0;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    virtualScrollTimer: any;\n    \n    virtualScrollCallback: Function;\n\n    filteredNodes: any[];\n\n    filterTimeout: any;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    dropPosition: number;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    selectionKeys: any = {};\n\n    rowTouched: boolean;\n\n    editingCell: Element;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    initialized: boolean;\n\n    toggleRowIndex: number;\n\n    ngOnInit() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService) {}\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            if (this.virtualScroll && this.virtualScrollCallback) {\n                this.virtualScrollCallback();\n            }\n\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                \n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n\n            for(let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n        \n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        \n        this.tableService.onUIUpdate(this.value);\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            \n            this.sortMultiple();\n        }\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.resetPageOnSort) {\n                this.first = 0;\n            }\n\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n    \n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n    \n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        } \n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.sortOrder * result);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n               this.sortMultipleNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            \n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        } \n        \n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            this.value.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n       \n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta)Â {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field)Â {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.virtualScroll ? this.rows * 2 : this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    handleVirtualScroll(event) {\n        this.first = (event.page - 1) * this.rows;\n        this.virtualScrollCallback = event.callback;\n        \n        this.zone.run(() => {\n            if (this.virtualScrollTimer) {\n                clearTimeout(this.virtualScrollTimer);\n            }\n            \n            this.virtualScrollTimer = setTimeout(() => {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }, this.virtualScrollDelay);\n        });\n    }\n\n    isEmpty() {\n        let data = this.filteredNodes||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'ui-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n    \n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    handleRowClick(event) {\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection||[];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    \n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n    \n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n            }\n        }\n    }\n\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection||[];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({originalEvent: event, node: node});\n        }\n\n        this.tableService.onSelectionChange();\n    }\n\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n    }\n    \n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedChildCount: number = 0;\n            let childPartialSelected: boolean = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n            \n            if (select && selectedChildCount == node.children.length) {\n                this._selection =  [...this.selection||[], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {                \n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection =  this.selection.filter((val,i) => i!=index);\n\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n                \n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n                \n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n    \n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        \n        if (select && index == -1) {\n            this._selection =  [...this.selection||[],node]\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection =  this.selection.filter((val,i) => i!=index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        \n        node.partialSelected = false;\n        \n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(node: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        \n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        \n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n                \n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n\n                for (let node of this.value) {\n                    let copyNode = {...node};\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n    \n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = FilterUtils[filterMatchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                    localMatch = false;\n                            }\n    \n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n    \n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = {...copyNode};\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = FilterUtils[this.filters['global'].matchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                    globalMatch = true;\n                                    copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n    \n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\n                }\n    \n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n    \n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.first = 0;\n\n        const filteredValue = this.filteredNodes || this.value;\n        \n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            \n            if (matched) {\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue)) {\n            matched = true;\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredNodes = null;\n        this.filters = {};\n                \n        this.first = 0;\n        \n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    updateEditingCell(cell) {\n        this.editingCell = cell;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\n                    this.editingCell = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n            \n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n     \n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n\n}\n\n@Component({\n    selector: '[pTreeTableBody]',\n    template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns}\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TTBody {\n\n    @Input(\"pTreeTableBody\") columns: any[];\n\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\n\n    constructor(public tt: TreeTable) {}\n}\n\n@Component({\n    selector: '[ttScrollableView]',\n    template: `\n        <div #scrollHeader class=\"ui-treetable-scrollable-header ui-widget-header\">\n            <div #scrollHeaderBox class=\"ui-treetable-scrollable-header-box\">\n                <table class=\"ui-treetable-scrollable-header-table\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <div #scrollBody class=\"ui-treetable-scrollable-body\">\n            <table #scrollTable [ngClass]=\"{'ui-treetable-scrollable-body-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\"></tbody>\n            </table>\n            <table #loadingTable *ngIf=\"tt.virtualScroll && tt.loadingBodyTemplate != null\" [ngClass]=\"{'ui-treetable-scrollable-body-table ui-treetable-loading-virtual-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\">\n                <tbody class=\"ui-treetable-tbody\">\n                    <ng-template ngFor [ngForOf]=\"loadingArray\">\n                        <ng-container *ngTemplateOutlet=\"tt.loadingBodyTemplate; context: {columns: columns}\"></ng-container>\n                    </ng-template>\n                </tbody>\n            </table>\n            <div #virtualScroller class=\"ui-treetable-virtual-scroller\" *ngIf=\"tt.virtualScroll\"></div>\n        </div>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"ui-treetable-scrollable-footer ui-widget-header\">\n            <div #scrollFooterBox class=\"ui-treetable-scrollable-footer-box\">\n                <table class=\"ui-treetable-scrollable-footer-table\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"ui-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `\n})\nexport class TTScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {\n\n    @Input(\"ttScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('loadingTable') scrollLoadingTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('virtualScroller') virtualScrollerViewChild: ElementRef;\n\n    headerScrollListener: Function;\n\n    bodyScrollListener: Function;\n\n    footerScrollListener: Function;\n\n    frozenSiblingBody: Element;\n\n    _scrollHeight: string;\n\n    subscription: Subscription;\n\n    totalRecordsSubscription: Subscription;\n    \n    initialized: boolean;\n\n    loadingArray: number[] = [];\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                    this.initialized = true;\n\n                    if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                        this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\n                    }\n                }, 50);\n            });\n        });\n\n        if (this.tt.virtualScroll) {\n            this.totalRecordsSubscription = this.tt.tableService.totalRecordsSource$.subscribe(() => {\n                this.zone.runOutsideAngular(() => {\n                    setTimeout(() => {\n                        this.setVirtualScrollerHeight();\n                    }, 50);\n                });\n            });\n        }\n\n        this.loadingArray = Array(this.tt.rows).fill(1);\n\n        this.initialized = false;\n     }\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        this.setScrollHeight();\n    }\n    \n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.bindEvents();\n        this.setScrollHeight();\n        this.alignScrollBar();\n\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'ui-treetable-unfrozen-view');\n            }\n\n            if (this.tt.frozenWidth) {\n                this.el.nativeElement.style.left = this.tt.frozenWidth;\n                this.el.nativeElement.style.width = 'calc(100% - ' + this.tt.frozenWidth + ')';\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-treetable-scrollable-body');\n            }\n        }\n        else {\n            this.scrollBodyViewChild.nativeElement.style.paddingBottom = DomHandler.calculateScrollbarWidth() + 'px';\n        }\n\n        if (this.tt.virtualScroll) {\n            this.setVirtualScrollerHeight();\n\n            if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\n            }\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n                this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n    }\n\n    onHeaderScroll(event) {\n        this.scrollHeaderViewChild.nativeElement.scrollLeft = 0;\n    }\n\n    onFooterScroll(event) {\n        this.scrollFooterViewChild.nativeElement.scrollLeft = 0;\n    }\n\n    onBodyScroll(event) {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = this.scrollBodyViewChild.nativeElement.scrollTop;\n        }\n\n        if (this.tt.virtualScroll) {\n            let viewport = DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n            let tableHeight = DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement);\n            let pageHeight = this.tt.virtualRowHeight * this.tt.rows;\n            let virtualTableHeight = DomHandler.getOuterHeight(this.virtualScrollerViewChild.nativeElement);\n            let pageCount = (virtualTableHeight / pageHeight)||1;\n            let scrollBodyTop = this.scrollTableViewChild.nativeElement.style.top||'0';\n\n            if ((this.scrollBodyViewChild.nativeElement.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight) ||Â (this.scrollBodyViewChild.nativeElement.scrollTop < parseFloat(scrollBodyTop))) {\n                if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                    this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\n                    this.scrollLoadingTableViewChild.nativeElement.style.top = this.scrollBodyViewChild.nativeElement.scrollTop + 'px';\n                }\n                \n                let page = Math.floor((this.scrollBodyViewChild.nativeElement.scrollTop * pageCount) / (this.scrollBodyViewChild.nativeElement.scrollHeight)) + 1;\n                this.tt.handleVirtualScroll({\n                    page: page,\n                    callback: () => {\n                        if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                            this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\n                        }\n                        \n                        this.scrollTableViewChild.nativeElement.style.top = ((page - 1) * pageHeight) + 'px';\n\n                        if (this.frozenSiblingBody) {\n                            (<HTMLElement> this.frozenSiblingBody.children[0]).style.top = this.scrollTableViewChild.nativeElement.style.top;\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    setScrollHeight() {\n        if (this.scrollHeight && this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            if (this.scrollHeight.indexOf('%') !== -1) {\n                let relativeHeight;\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'hidden';\n                this.scrollBodyViewChild.nativeElement.style.height = '100px';     //temporary height to calculate static height\n                let containerHeight = DomHandler.getOuterHeight(this.tt.el.nativeElement.children[0]);\n                \n                if (this.scrollHeight.includes(\"calc\")) {\n                    let percentHeight = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"(\") + 1, this.scrollHeight.indexOf(\"%\")));\n                    let diffValue = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"-\") + 1, this.scrollHeight.indexOf(\")\")));\n                    relativeHeight = (DomHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * percentHeight / 100) - diffValue;\n                }\n                else {\n                    relativeHeight = DomHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * parseInt(this.scrollHeight) / 100;\n                }\n                \n                let staticHeight = containerHeight - 100;   //total height of headers, footers, paginators\n                let scrollBodyHeight = (relativeHeight - staticHeight);\n\n                if (this.frozen) {\n                    scrollBodyHeight -= DomHandler.calculateScrollbarWidth();\n                }\n                \n                this.scrollBodyViewChild.nativeElement.style.height = 'auto';\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = scrollBodyHeight + 'px';\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'visible';\n            }\n            else {\n                if (this.frozen)\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = (parseInt(this.scrollHeight) - DomHandler.calculateScrollbarWidth()) + 'px';\n                else\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = this.scrollHeight;\n            }\n        }\n    }\n\n    setVirtualScrollerHeight() {\n        if (this.virtualScrollerViewChild.nativeElement) {\n            this.virtualScrollerViewChild.nativeElement.style.height = this.tt.totalRecords * this.tt.virtualRowHeight + 'px';\n        }\n    }\n\n    hasVerticalOverflow() {\n        return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            \n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        if (this.totalRecordsSubscription) {\n            this.totalRecordsSubscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[ttSortableColumn]',\n    host: {\n        '[class.ui-sortable-column]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null'\n    }\n})\nexport class TTSortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"ttSortableColumn\") field: string;\n\n    @Input() ttSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n    \n    subscription: Subscription;\n\n    constructor(public tt: TreeTable) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-treeTableSortIcon',\n    template: `\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-up': sortOrder === 1, 'pi-sort-down': sortOrder === -1, 'pi-sort': sortOrder === 0}\"></i>\n    `\n})\nexport class TTSortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n    \n    @Input() ariaLabelDesc: string;\n    \n    @Input() ariaLabelAsc: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public tt: TreeTable) {\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n    \n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[ttResizableColumn]'\n})\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n    \n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: Event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n\n    onDocumentMouseMove(event: Event) {\n        this.tt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: Event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        \n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[ttReorderableColumn]'\n})\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRow]',\n    host: {\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRow\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onEnterKey(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRowDblClick]',\n    host: {\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttContextMenuRow]',\n    host: {\n        '[class.ui-contextmenu-selected]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class TTContextMenuRow {\n\n    @Input(\"ttContextMenuRow\") rowNode: any;\n\n    @Input() ttContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n\n            this.el.nativeElement.focus();\n\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-treetable-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TTCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input(\"value\") rowNode: any;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n   \n}\n\n@Component({\n    selector: 'p-treeTableHeaderCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-treetable-header-chkbox ui-widget\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TTHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    disabled: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n        \n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        let checked: boolean;\n        const data = this.tt.filteredNodes||this.tt.value;\n\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }   \n                else  {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n\n        return checked;\n    }\n   \n}\n\n@Directive({\n    selector: '[ttEditableColumn]'\n})\nexport class TTEditableColumn implements AfterViewInit {\n\n    @Input(\"ttEditableColumn\") data: any;\n\n    @Input(\"ttEditableColumnField\") field: any;\n\n    @Input() ttEditableColumnDisabled: boolean;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n        \n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement);\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n    \n                event.preventDefault();\n            }\n    \n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n    \n                event.preventDefault();\n            }\n    \n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                \n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCellEditor',\n    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TreeTableCellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\n\n@Directive({\n    selector: '[ttRow]',\n    host: {\n        '[attr.tabindex]': '\"0\"'\n    }\n})\nexport class TTRow {\n\n    @Input('ttRow') rowNode: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n        }\n    }\n\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.ui-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\n\n@Component({\n    selector: 'p-treeTableToggler',\n    template: `\n        <a class=\"ui-treetable-toggler ui-unselectable-text\" (click)=\"onClick($event)\"\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </a>\n    `\n})\nexport class TreeTableToggler {\n\n    @Input() rowNode: any;\n\n    constructor(public tt: TreeTable) {}\n\n    onClick(event: Event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        \n        event.preventDefault();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule],\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor],\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\n})\nexport class TreeTableModule { }"]}