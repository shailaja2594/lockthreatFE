{"version":3,"sources":["ng://primeng/spinner/spinner.ts"],"names":["SPINNER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Spinner","multi","el","cd","this","onChange","EventEmitter","onFocus","onBlur","_step","onModelChange","onModelTouched","keyPattern","negativeSeparator","Object","defineProperty","prototype","val","calculatedPrecision","step","toString","split","length","ngOnInit","formatInput","localeDecimalSeparator","toLocaleString","substring","localeThousandSeparator","thousandRegExp","RegExp","thousandSeparator","decimalSeparator","console","warn","repeat","event","interval","dir","_this","i","clearTimer","timer","setTimeout","spin","currentValue","precision","getPrecision","value","parseValue","parseFloat","toFixed","undefined","maxlength","min","max","formatValue","emit","power","Math","pow","String","round","onUpButtonMousedown","disabled","inputfieldViewChild","nativeElement","focus","updateFilledState","preventDefault","onUpButtonMouseup","onUpButtonMouseleave","onDownButtonMousedown","onDownButtonMouseup","onDownButtonMouseleave","onInputKeydown","which","onInputChange","onInput","target","onInputBlur","onInputFocus","trim","replace","parseInt","isNaN","maximumFractionDigits","join","formattedValue","clearInterval","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","filled","ElementRef","ChangeDetectorRef","__decorate","Output","Input","ViewChild","Component","selector","template","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","SpinnerModule","NgModule","imports","CommonModule","InputTextModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnInit,Input,Output,EventEmitter,forwardRef,ViewChild, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const SPINNER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Spinner),\n    multi: true\n};\n\n@Component({\n    selector: 'p-spinner',\n    template: `\n        <span class=\"ui-spinner ui-widget ui-corner-all\">\n            <input #inputfield type=\"text\" [attr.id]=\"inputId\" [value]=\"formattedValue||null\" [attr.name]=\"name\" [attr.aria-valumin]=\"min\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\" [attr.aria-labelledby]=\"ariaLabelledBy\"\n            [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\" [readonly]=\"readonly\" [attr.required]=\"required\"\n            (keydown)=\"onInputKeydown($event)\" (blur)=\"onInputBlur($event)\" (input)=\"onInput($event)\" (change)=\"onInputChange($event)\" (focus)=\"onInputFocus($event)\"\n            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [ngClass]=\"'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all'\">\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" tabindex=\"-1\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onUpButtonMouseleave($event)\" (mousedown)=\"onUpButtonMousedown($event)\" (mouseup)=\"onUpButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon pi pi-caret-up ui-clickable\"></span>\n            </button>\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" tabindex=\"-1\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onDownButtonMouseleave($event)\" (mousedown)=\"onDownButtonMousedown($event)\" (mouseup)=\"onDownButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon pi pi-caret-down ui-clickable\"></span>\n            </button>\n        </span>\n    `,\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n    },\n    providers: [SPINNER_VALUE_ACCESSOR]\n})\nexport class Spinner implements OnInit,ControlValueAccessor {\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Input() min: number;\n\n    @Input() max: number;\n    \n    @Input() maxlength: number;\n    \n    @Input() size: number;\n\n    @Input() placeholder: string;\n\n    @Input() inputId: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() readonly: boolean;\n\n    @Input() tabindex: number;\n            \n    @Input() required: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() inputStyle: any;\n\n    @Input() inputStyleClass: string;\n\n    @Input() formatInput: boolean;\n\n    @Input() decimalSeparator: string;\n\n    @Input() thousandSeparator: string;\n\n    @Input() precision: number;\n    \n    value: any;\n\n    _step: number = 1;\n\n    formattedValue: string;\n        \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    keyPattern: RegExp = /[0-9\\+\\-]/;\n        \n    public timer: any;\n    \n    public focus: boolean;\n    \n    public filled: boolean;\n    \n    public negativeSeparator = '-';\n\n    localeDecimalSeparator: string;\n\n    localeThousandSeparator: string;\n\n    thousandRegExp: RegExp;\n\n    calculatedPrecision: number;\n    \n    @ViewChild('inputfield') inputfieldViewChild: ElementRef;\n\n    @Input() get step(): number {\n        return this._step;\n    }\n    set step(val:number) {\n        this._step = val;\n        this.calculatedPrecision = this.step.toString().split(/[,]|[.]/)[1].length;\n    }\n    \n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        if (this.formatInput) {\n            this.localeDecimalSeparator = (1.1).toLocaleString().substring(1, 2);\n            this.localeThousandSeparator = (1000).toLocaleString().substring(1, 2);\n            this.thousandRegExp = new RegExp(`[${this.thousandSeparator || this.localeThousandSeparator}]`, 'gim');\n\n            if (this.decimalSeparator && this.thousandSeparator && this.decimalSeparator === this.thousandSeparator) {\n                console.warn(\"thousandSeparator and decimalSeparator cannot have the same value.\");\n            }\n        }\n    }\n\n    repeat(event: Event, interval: number, dir: number) {\n        let i = interval||500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n    \n    spin(event: Event, dir: number) {\n        let step = this.step * dir;\n        let currentValue: number;\n        let precision = this.getPrecision();\n\n        if (this.value)\n            currentValue = (typeof this.value === 'string') ? this.parseValue(this.value) : this.value;\n        else\n            currentValue = 0;\n        \n        if (precision)\n            this.value = parseFloat(this.toFixed(currentValue + step, precision));\n        else\n            this.value = currentValue + step;\n    \n        if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\n            this.value = currentValue;\n        }\n    \n        if (this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n        }\n\n        if (this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n        }\n        \n        this.formatValue();\n        this.onModelChange(this.value);\n        this.onChange.emit(event);\n    }\n\n    getPrecision() {\n        return this.precision === undefined ? this.calculatedPrecision : this.precision;\n    }\n    \n    toFixed(value: number, precision: number) {\n        let power = Math.pow(10, precision||0);\n        return String(Math.round(value * power) / power);\n    }\n    \n    onUpButtonMousedown(event: Event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, 1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onUpButtonMouseup(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onUpButtonMouseleave(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMousedown(event: Event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, -1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onDownButtonMouseup(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMouseleave(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onInputKeydown(event: KeyboardEvent) {\n        if (event.which == 38) {\n            this.spin(event, 1);\n            event.preventDefault();\n        }\n        else if (event.which == 40) {\n            this.spin(event, -1);\n            event.preventDefault();\n        }\n    }\n\n    onInputChange(event: Event) {\n        this.onChange.emit(event);\n    }\n\n    onInput(event: KeyboardEvent) {\n        this.value = this.parseValue((<HTMLInputElement> event.target).value);\n        this.onModelChange(this.value);\n        this.updateFilledState();\n    }\n        \n    onInputBlur(event) {\n        this.focus = false;\n        this.formatValue();\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    \n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n    \n    parseValue(val: string): number {\n        let value: number;\n        let precision = this.getPrecision();\n                \n        if (val.trim() === '') {\n            value = null;\n        }\n        else {\n            if (this.formatInput) {\n                val = val.replace(this.thousandRegExp, '');\n            }\n\n            if (precision) {\n                val = this.formatInput ? val.replace(this.decimalSeparator || this.localeDecimalSeparator, '.') : val.replace(',', '.');\n                value = parseFloat(val);\n            }\n            else {\n                value = parseInt(val, 10);\n            }\n            \n            if (!isNaN(value)) {\n                if (this.max !== null && value > this.max) {\n                    value = this.max;\n                }\n\n                if (this.min !== null && value < this.min) {\n                    value = this.min;\n                }\n            }\n            else {\n                value = null;\n            }\n        }\n        \n        return value;\n    }\n\n    formatValue() {\n        let value = this.value;\n        let precision = this.getPrecision();\n\n        if (value != null) {\n            if (this.formatInput) {\n                value = value.toLocaleString(undefined, {maximumFractionDigits: 20});\n    \n                if (this.decimalSeparator && this.thousandSeparator) {\n                    value = value.split(this.localeDecimalSeparator);\n    \n                    if (precision && value[1]) {\n                        value[1] = (this.decimalSeparator || this.localeDecimalSeparator) + value[1];\n                    }\n    \n                    if (this.thousandSeparator && value[0].length > 3) {\n                        value[0] = value[0].replace(new RegExp(`[${this.localeThousandSeparator}]`, 'gim'), this.thousandSeparator);\n                    }\n    \n                    value = value.join('');\n                }\n            }\n    \n            this.formattedValue = value.toString();\n        }\n        else {\n            this.formattedValue = null;\n        }\n\n        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {\n            this.inputfieldViewChild.nativeElement.value = this.formattedValue;\n        }\n    }\n            \n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.formatValue();\n        this.updateFilledState();\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    updateFilledState() {\n        this.filled = (this.value !== undefined && this.value != null);\n    }\n}\n\n\n@NgModule({\n    imports: [CommonModule,InputTextModule],\n    exports: [Spinner],\n    declarations: [Spinner]\n})\nexport class SpinnerModule { }\n"]}