import { AfterContentInit, OnDestroy, EventEmitter, OnInit, QueryList, TemplateRef, ElementRef } from '@angular/core';
import { TreeNode } from 'primeng/api';
import { TreeDragDropService } from 'primeng/api';
import { Subscription } from 'rxjs';
import { BlockableUI } from 'primeng/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
export declare class UITreeNode implements OnInit {
    static ICON_CLASS: string;
    node: TreeNode;
    parentNode: TreeNode;
    root: boolean;
    index: number;
    firstChild: boolean;
    lastChild: boolean;
    tree: Tree;
    constructor(tree: any);
    draghoverPrev: boolean;
    draghoverNext: boolean;
    draghoverNode: boolean;
    ngOnInit(): void;
    getIcon(): string;
    isLeaf(): boolean;
    toggle(event: Event): void;
    expand(event: Event): void;
    collapse(event: Event): void;
    onNodeClick(event: MouseEvent): void;
    onNodeKeydown(event: KeyboardEvent): void;
    onNodeTouchEnd(): void;
    onNodeRightClick(event: MouseEvent): void;
    isSelected(): boolean;
    onDropPoint(event: Event, position: number): void;
    processPointDrop(dragNode: any, dragNodeIndex: any, position: any): void;
    onDropPointDragOver(event: any): void;
    onDropPointDragEnter(event: Event, position: number): void;
    onDropPointDragLeave(event: Event): void;
    onDragStart(event: any): void;
    onDragStop(event: any): void;
    onDropNodeDragOver(event: any): void;
    onDropNode(event: any): void;
    processNodeDrop(dragNode: any): void;
    onDropNodeDragEnter(event: any): void;
    onDropNodeDragLeave(event: any): void;
    onKeyDown(event: KeyboardEvent): void;
    findNextSiblingOfAncestor(nodeElement: any): any;
    findLastVisibleDescendant(nodeElement: any): any;
    getParentNodeElement(nodeElement: any): any;
    focusNode(element: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UITreeNode, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<UITreeNode, "p-treeNode", never, { "node": "node"; "parentNode": "parentNode"; "root": "root"; "index": "index"; "firstChild": "firstChild"; "lastChild": "lastChild"; }, {}, never, never>;
}
export declare class Tree implements OnInit, AfterContentInit, OnDestroy, BlockableUI {
    el: ElementRef;
    dragDropService: TreeDragDropService;
    value: TreeNode[];
    selectionMode: string;
    selection: any;
    selectionChange: EventEmitter<any>;
    onNodeSelect: EventEmitter<any>;
    onNodeUnselect: EventEmitter<any>;
    onNodeExpand: EventEmitter<any>;
    onNodeCollapse: EventEmitter<any>;
    onNodeContextMenuSelect: EventEmitter<any>;
    onNodeDrop: EventEmitter<any>;
    style: any;
    styleClass: string;
    contextMenu: any;
    layout: string;
    draggableScope: any;
    droppableScope: any;
    draggableNodes: boolean;
    droppableNodes: boolean;
    metaKeySelection: boolean;
    propagateSelectionUp: boolean;
    propagateSelectionDown: boolean;
    loading: boolean;
    loadingIcon: string;
    emptyMessage: string;
    ariaLabel: string;
    ariaLabelledBy: string;
    validateDrop: boolean;
    filter: boolean;
    filterBy: string;
    filterMode: string;
    filterPlaceholder: string;
    nodeTrackBy: Function;
    templates: QueryList<any>;
    templateMap: any;
    nodeTouched: boolean;
    dragNodeTree: Tree;
    dragNode: TreeNode;
    dragNodeSubNodes: TreeNode[];
    dragNodeIndex: number;
    dragNodeScope: any;
    dragHover: boolean;
    dragStartSubscription: Subscription;
    dragStopSubscription: Subscription;
    filteredNodes: TreeNode[];
    constructor(el: ElementRef, dragDropService: TreeDragDropService);
    ngOnInit(): void;
    readonly horizontal: boolean;
    ngAfterContentInit(): void;
    onNodeClick(event: any, node: TreeNode): void;
    onNodeTouchEnd(): void;
    onNodeRightClick(event: MouseEvent, node: TreeNode): void;
    findIndexInSelection(node: TreeNode): number;
    syncNodeOption(node: any, parentNodes: any, option: any, value?: any): void;
    hasFilteredNodes(): number;
    getNodeWithKey(key: string, nodes: TreeNode[]): any;
    propagateUp(node: TreeNode, select: boolean): void;
    propagateDown(node: TreeNode, select: boolean): void;
    isSelected(node: TreeNode): boolean;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    isCheckboxSelectionMode(): boolean;
    isNodeLeaf(node: any): boolean;
    getRootNode(): TreeNode[];
    getTemplateForNode(node: TreeNode): TemplateRef<any>;
    onDragOver(event: any): void;
    onDrop(event: any): void;
    onDragEnter(event: any): void;
    onDragLeave(event: any): void;
    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean;
    isValidDragScope(dragScope: any): boolean;
    onFilter(event: any): void;
    findFilteredNodes(node: any, paramsWithoutNode: any): boolean;
    isFilterMatched(node: any, { searchFields, filterText, isStrictMode }: {
        searchFields: any;
        filterText: any;
        isStrictMode: any;
    }): boolean;
    getBlockableElement(): HTMLElement;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Tree, [null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Tree, "p-tree", never, { "layout": "layout"; "metaKeySelection": "metaKeySelection"; "propagateSelectionUp": "propagateSelectionUp"; "propagateSelectionDown": "propagateSelectionDown"; "loadingIcon": "loadingIcon"; "emptyMessage": "emptyMessage"; "filterBy": "filterBy"; "filterMode": "filterMode"; "nodeTrackBy": "nodeTrackBy"; "selection": "selection"; "value": "value"; "selectionMode": "selectionMode"; "style": "style"; "styleClass": "styleClass"; "contextMenu": "contextMenu"; "draggableScope": "draggableScope"; "droppableScope": "droppableScope"; "draggableNodes": "draggableNodes"; "droppableNodes": "droppableNodes"; "loading": "loading"; "ariaLabel": "ariaLabel"; "ariaLabelledBy": "ariaLabelledBy"; "validateDrop": "validateDrop"; "filter": "filter"; "filterPlaceholder": "filterPlaceholder"; }, { "selectionChange": "selectionChange"; "onNodeSelect": "onNodeSelect"; "onNodeUnselect": "onNodeUnselect"; "onNodeExpand": "onNodeExpand"; "onNodeCollapse": "onNodeCollapse"; "onNodeContextMenuSelect": "onNodeContextMenuSelect"; "onNodeDrop": "onNodeDrop"; }, ["templates"], never>;
}
export declare class TreeModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TreeModule, [typeof Tree, typeof UITreeNode], [typeof ɵngcc1.CommonModule], [typeof Tree, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TreeModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5kLnRzIiwic291cmNlcyI6WyJ0cmVlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBUcmVlRHJhZ0Ryb3BTZXJ2aWNlIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCbG9ja2FibGVVSSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFVJVHJlZU5vZGUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHN0YXRpYyBJQ09OX0NMQVNTOiBzdHJpbmc7XG4gICAgbm9kZTogVHJlZU5vZGU7XG4gICAgcGFyZW50Tm9kZTogVHJlZU5vZGU7XG4gICAgcm9vdDogYm9vbGVhbjtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIGZpcnN0Q2hpbGQ6IGJvb2xlYW47XG4gICAgbGFzdENoaWxkOiBib29sZWFuO1xuICAgIHRyZWU6IFRyZWU7XG4gICAgY29uc3RydWN0b3IodHJlZTogYW55KTtcbiAgICBkcmFnaG92ZXJQcmV2OiBib29sZWFuO1xuICAgIGRyYWdob3Zlck5leHQ6IGJvb2xlYW47XG4gICAgZHJhZ2hvdmVyTm9kZTogYm9vbGVhbjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIGdldEljb24oKTogc3RyaW5nO1xuICAgIGlzTGVhZigpOiBib29sZWFuO1xuICAgIHRvZ2dsZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIGV4cGFuZChldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIGNvbGxhcHNlKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgb25Ob2RlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIG9uTm9kZUtleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIG9uTm9kZVRvdWNoRW5kKCk6IHZvaWQ7XG4gICAgb25Ob2RlUmlnaHRDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgaXNTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIG9uRHJvcFBvaW50KGV2ZW50OiBFdmVudCwgcG9zaXRpb246IG51bWJlcik6IHZvaWQ7XG4gICAgcHJvY2Vzc1BvaW50RHJvcChkcmFnTm9kZTogYW55LCBkcmFnTm9kZUluZGV4OiBhbnksIHBvc2l0aW9uOiBhbnkpOiB2b2lkO1xuICAgIG9uRHJvcFBvaW50RHJhZ092ZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Ecm9wUG9pbnREcmFnRW50ZXIoZXZlbnQ6IEV2ZW50LCBwb3NpdGlvbjogbnVtYmVyKTogdm9pZDtcbiAgICBvbkRyb3BQb2ludERyYWdMZWF2ZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG9uRHJhZ1N0YXJ0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uRHJhZ1N0b3AoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Ecm9wTm9kZURyYWdPdmVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uRHJvcE5vZGUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJvY2Vzc05vZGVEcm9wKGRyYWdOb2RlOiBhbnkpOiB2b2lkO1xuICAgIG9uRHJvcE5vZGVEcmFnRW50ZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Ecm9wTm9kZURyYWdMZWF2ZShldmVudDogYW55KTogdm9pZDtcbiAgICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGZpbmROZXh0U2libGluZ09mQW5jZXN0b3Iobm9kZUVsZW1lbnQ6IGFueSk6IGFueTtcbiAgICBmaW5kTGFzdFZpc2libGVEZXNjZW5kYW50KG5vZGVFbGVtZW50OiBhbnkpOiBhbnk7XG4gICAgZ2V0UGFyZW50Tm9kZUVsZW1lbnQobm9kZUVsZW1lbnQ6IGFueSk6IGFueTtcbiAgICBmb2N1c05vZGUoZWxlbWVudDogYW55KTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRyZWUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgQmxvY2thYmxlVUkge1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIGRyYWdEcm9wU2VydmljZTogVHJlZURyYWdEcm9wU2VydmljZTtcbiAgICB2YWx1ZTogVHJlZU5vZGVbXTtcbiAgICBzZWxlY3Rpb25Nb2RlOiBzdHJpbmc7XG4gICAgc2VsZWN0aW9uOiBhbnk7XG4gICAgc2VsZWN0aW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbk5vZGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uTm9kZVVuc2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbk5vZGVFeHBhbmQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uTm9kZUNvbGxhcHNlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbk5vZGVDb250ZXh0TWVudVNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Ob2RlRHJvcDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgY29udGV4dE1lbnU6IGFueTtcbiAgICBsYXlvdXQ6IHN0cmluZztcbiAgICBkcmFnZ2FibGVTY29wZTogYW55O1xuICAgIGRyb3BwYWJsZVNjb3BlOiBhbnk7XG4gICAgZHJhZ2dhYmxlTm9kZXM6IGJvb2xlYW47XG4gICAgZHJvcHBhYmxlTm9kZXM6IGJvb2xlYW47XG4gICAgbWV0YUtleVNlbGVjdGlvbjogYm9vbGVhbjtcbiAgICBwcm9wYWdhdGVTZWxlY3Rpb25VcDogYm9vbGVhbjtcbiAgICBwcm9wYWdhdGVTZWxlY3Rpb25Eb3duOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgbG9hZGluZ0ljb246IHN0cmluZztcbiAgICBlbXB0eU1lc3NhZ2U6IHN0cmluZztcbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICBhcmlhTGFiZWxsZWRCeTogc3RyaW5nO1xuICAgIHZhbGlkYXRlRHJvcDogYm9vbGVhbjtcbiAgICBmaWx0ZXI6IGJvb2xlYW47XG4gICAgZmlsdGVyQnk6IHN0cmluZztcbiAgICBmaWx0ZXJNb2RlOiBzdHJpbmc7XG4gICAgZmlsdGVyUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBub2RlVHJhY2tCeTogRnVuY3Rpb247XG4gICAgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8YW55PjtcbiAgICB0ZW1wbGF0ZU1hcDogYW55O1xuICAgIG5vZGVUb3VjaGVkOiBib29sZWFuO1xuICAgIGRyYWdOb2RlVHJlZTogVHJlZTtcbiAgICBkcmFnTm9kZTogVHJlZU5vZGU7XG4gICAgZHJhZ05vZGVTdWJOb2RlczogVHJlZU5vZGVbXTtcbiAgICBkcmFnTm9kZUluZGV4OiBudW1iZXI7XG4gICAgZHJhZ05vZGVTY29wZTogYW55O1xuICAgIGRyYWdIb3ZlcjogYm9vbGVhbjtcbiAgICBkcmFnU3RhcnRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBkcmFnU3RvcFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIGZpbHRlcmVkTm9kZXM6IFRyZWVOb2RlW107XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIGRyYWdEcm9wU2VydmljZTogVHJlZURyYWdEcm9wU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICByZWFkb25seSBob3Jpem9udGFsOiBib29sZWFuO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG9uTm9kZUNsaWNrKGV2ZW50OiBhbnksIG5vZGU6IFRyZWVOb2RlKTogdm9pZDtcbiAgICBvbk5vZGVUb3VjaEVuZCgpOiB2b2lkO1xuICAgIG9uTm9kZVJpZ2h0Q2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIG5vZGU6IFRyZWVOb2RlKTogdm9pZDtcbiAgICBmaW5kSW5kZXhJblNlbGVjdGlvbihub2RlOiBUcmVlTm9kZSk6IG51bWJlcjtcbiAgICBzeW5jTm9kZU9wdGlvbihub2RlOiBhbnksIHBhcmVudE5vZGVzOiBhbnksIG9wdGlvbjogYW55LCB2YWx1ZT86IGFueSk6IHZvaWQ7XG4gICAgaGFzRmlsdGVyZWROb2RlcygpOiBudW1iZXI7XG4gICAgZ2V0Tm9kZVdpdGhLZXkoa2V5OiBzdHJpbmcsIG5vZGVzOiBUcmVlTm9kZVtdKTogYW55O1xuICAgIHByb3BhZ2F0ZVVwKG5vZGU6IFRyZWVOb2RlLCBzZWxlY3Q6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHByb3BhZ2F0ZURvd24obm9kZTogVHJlZU5vZGUsIHNlbGVjdDogYm9vbGVhbik6IHZvaWQ7XG4gICAgaXNTZWxlY3RlZChub2RlOiBUcmVlTm9kZSk6IGJvb2xlYW47XG4gICAgaXNTaW5nbGVTZWxlY3Rpb25Nb2RlKCk6IGJvb2xlYW47XG4gICAgaXNNdWx0aXBsZVNlbGVjdGlvbk1vZGUoKTogYm9vbGVhbjtcbiAgICBpc0NoZWNrYm94U2VsZWN0aW9uTW9kZSgpOiBib29sZWFuO1xuICAgIGlzTm9kZUxlYWYobm9kZTogYW55KTogYm9vbGVhbjtcbiAgICBnZXRSb290Tm9kZSgpOiBUcmVlTm9kZVtdO1xuICAgIGdldFRlbXBsYXRlRm9yTm9kZShub2RlOiBUcmVlTm9kZSk6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgb25EcmFnT3ZlcihldmVudDogYW55KTogdm9pZDtcbiAgICBvbkRyb3AoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25EcmFnRW50ZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25EcmFnTGVhdmUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgYWxsb3dEcm9wKGRyYWdOb2RlOiBUcmVlTm9kZSwgZHJvcE5vZGU6IFRyZWVOb2RlLCBkcmFnTm9kZVNjb3BlOiBhbnkpOiBib29sZWFuO1xuICAgIGlzVmFsaWREcmFnU2NvcGUoZHJhZ1Njb3BlOiBhbnkpOiBib29sZWFuO1xuICAgIG9uRmlsdGVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGZpbmRGaWx0ZXJlZE5vZGVzKG5vZGU6IGFueSwgcGFyYW1zV2l0aG91dE5vZGU6IGFueSk6IGJvb2xlYW47XG4gICAgaXNGaWx0ZXJNYXRjaGVkKG5vZGU6IGFueSwgeyBzZWFyY2hGaWVsZHMsIGZpbHRlclRleHQsIGlzU3RyaWN0TW9kZSB9OiB7XG4gICAgICAgIHNlYXJjaEZpZWxkczogYW55O1xuICAgICAgICBmaWx0ZXJUZXh0OiBhbnk7XG4gICAgICAgIGlzU3RyaWN0TW9kZTogYW55O1xuICAgIH0pOiBib29sZWFuO1xuICAgIGdldEJsb2NrYWJsZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRyZWVNb2R1bGUge1xufVxuIl19