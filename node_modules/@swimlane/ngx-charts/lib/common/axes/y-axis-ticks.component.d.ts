import { OnChanges, ElementRef, EventEmitter, AfterViewInit, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class YAxisTicksComponent implements OnChanges, AfterViewInit {
    scale: any;
    orient: any;
    tickArguments: number[];
    tickValues: any[];
    tickStroke: string;
    trimTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    showGridLines: boolean;
    gridLineWidth: any;
    height: any;
    referenceLines: any;
    showRefLabels: boolean;
    showRefLines: boolean;
    dimensionsChanged: EventEmitter<any>;
    innerTickSize: any;
    tickPadding: any;
    tickSpacing: any;
    verticalSpacing: number;
    textAnchor: any;
    dy: any;
    x1: any;
    x2: any;
    y1: any;
    y2: any;
    adjustedScale: any;
    transform: (o: any) => string;
    tickFormat: (o: any) => string;
    ticks: any;
    width: number;
    outerTickSize: number;
    rotateLabels: boolean;
    refMax: number;
    refMin: number;
    referenceLineLength: number;
    referenceAreaPath: string;
    ticksElement: ElementRef;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    updateDims(): void;
    update(): void;
    setReferencelines(): void;
    getTicks(): any;
    getMaxTicks(tickHeight: number): number;
    tickTransform(tick: any): string;
    gridLineTransform(): string;
    tickTrim(label: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YAxisTicksComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<YAxisTicksComponent, "g[ngx-charts-y-axis-ticks]", never, { "tickArguments": "tickArguments"; "tickStroke": "tickStroke"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "showGridLines": "showGridLines"; "showRefLabels": "showRefLabels"; "showRefLines": "showRefLines"; "scale": "scale"; "orient": "orient"; "tickValues": "tickValues"; "tickFormatting": "tickFormatting"; "gridLineWidth": "gridLineWidth"; "height": "height"; "referenceLines": "referenceLines"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieS1heGlzLXRpY2tzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ5LWF4aXMtdGlja3MuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uQ2hhbmdlcywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBBZnRlclZpZXdJbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBZQXhpc1RpY2tzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcbiAgICBzY2FsZTogYW55O1xuICAgIG9yaWVudDogYW55O1xuICAgIHRpY2tBcmd1bWVudHM6IG51bWJlcltdO1xuICAgIHRpY2tWYWx1ZXM6IGFueVtdO1xuICAgIHRpY2tTdHJva2U6IHN0cmluZztcbiAgICB0cmltVGlja3M6IGJvb2xlYW47XG4gICAgbWF4VGlja0xlbmd0aDogbnVtYmVyO1xuICAgIHRpY2tGb3JtYXR0aW5nOiBhbnk7XG4gICAgc2hvd0dyaWRMaW5lczogYm9vbGVhbjtcbiAgICBncmlkTGluZVdpZHRoOiBhbnk7XG4gICAgaGVpZ2h0OiBhbnk7XG4gICAgcmVmZXJlbmNlTGluZXM6IGFueTtcbiAgICBzaG93UmVmTGFiZWxzOiBib29sZWFuO1xuICAgIHNob3dSZWZMaW5lczogYm9vbGVhbjtcbiAgICBkaW1lbnNpb25zQ2hhbmdlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaW5uZXJUaWNrU2l6ZTogYW55O1xuICAgIHRpY2tQYWRkaW5nOiBhbnk7XG4gICAgdGlja1NwYWNpbmc6IGFueTtcbiAgICB2ZXJ0aWNhbFNwYWNpbmc6IG51bWJlcjtcbiAgICB0ZXh0QW5jaG9yOiBhbnk7XG4gICAgZHk6IGFueTtcbiAgICB4MTogYW55O1xuICAgIHgyOiBhbnk7XG4gICAgeTE6IGFueTtcbiAgICB5MjogYW55O1xuICAgIGFkanVzdGVkU2NhbGU6IGFueTtcbiAgICB0cmFuc2Zvcm06IChvOiBhbnkpID0+IHN0cmluZztcbiAgICB0aWNrRm9ybWF0OiAobzogYW55KSA9PiBzdHJpbmc7XG4gICAgdGlja3M6IGFueTtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIG91dGVyVGlja1NpemU6IG51bWJlcjtcbiAgICByb3RhdGVMYWJlbHM6IGJvb2xlYW47XG4gICAgcmVmTWF4OiBudW1iZXI7XG4gICAgcmVmTWluOiBudW1iZXI7XG4gICAgcmVmZXJlbmNlTGluZUxlbmd0aDogbnVtYmVyO1xuICAgIHJlZmVyZW5jZUFyZWFQYXRoOiBzdHJpbmc7XG4gICAgdGlja3NFbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHVwZGF0ZURpbXMoKTogdm9pZDtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICBzZXRSZWZlcmVuY2VsaW5lcygpOiB2b2lkO1xuICAgIGdldFRpY2tzKCk6IGFueTtcbiAgICBnZXRNYXhUaWNrcyh0aWNrSGVpZ2h0OiBudW1iZXIpOiBudW1iZXI7XG4gICAgdGlja1RyYW5zZm9ybSh0aWNrOiBhbnkpOiBzdHJpbmc7XG4gICAgZ3JpZExpbmVUcmFuc2Zvcm0oKTogc3RyaW5nO1xuICAgIHRpY2tUcmltKGxhYmVsOiBzdHJpbmcpOiBzdHJpbmc7XG59XG4iXX0=