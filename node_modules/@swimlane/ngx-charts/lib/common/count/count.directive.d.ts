import { EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';
/**
 * Count up component
 *
 * Loosely inspired by:
 *  - https://github.com/izupet/angular2-counto
 *  - https://inorganik.github.io/countUp.js/
 *
 * @export
 */
import * as ɵngcc0 from '@angular/core';
export declare class CountUpDirective implements OnDestroy {
    private cd;
    countDuration: number;
    countPrefix: string;
    countSuffix: string;
    valueFormatting: any;
    countDecimals: number;
    countTo: any;
    countFrom: any;
    countChange: EventEmitter<any>;
    countFinish: EventEmitter<any>;
    nativeElement: any;
    value: any;
    formattedValue: string;
    private animationReq;
    private _countDecimals;
    private _countTo;
    private _countFrom;
    constructor(cd: ChangeDetectorRef, element: ElementRef);
    ngOnDestroy(): void;
    start(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CountUpDirective, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CountUpDirective, "[ngx-charts-count-up]", never, { "countDuration": "countDuration"; "countPrefix": "countPrefix"; "countSuffix": "countSuffix"; "countDecimals": "countDecimals"; "countTo": "countTo"; "countFrom": "countFrom"; "valueFormatting": "valueFormatting"; }, { "countChange": "countChange"; "countFinish": "countFinish"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNvdW50LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogQ291bnQgdXAgY29tcG9uZW50XG4gKlxuICogTG9vc2VseSBpbnNwaXJlZCBieTpcbiAqICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9penVwZXQvYW5ndWxhcjItY291bnRvXG4gKiAgLSBodHRwczovL2lub3JnYW5pay5naXRodWIuaW8vY291bnRVcC5qcy9cbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENvdW50VXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2Q7XG4gICAgY291bnREdXJhdGlvbjogbnVtYmVyO1xuICAgIGNvdW50UHJlZml4OiBzdHJpbmc7XG4gICAgY291bnRTdWZmaXg6IHN0cmluZztcbiAgICB2YWx1ZUZvcm1hdHRpbmc6IGFueTtcbiAgICBjb3VudERlY2ltYWxzOiBudW1iZXI7XG4gICAgY291bnRUbzogYW55O1xuICAgIGNvdW50RnJvbTogYW55O1xuICAgIGNvdW50Q2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb3VudEZpbmlzaDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmF0aXZlRWxlbWVudDogYW55O1xuICAgIHZhbHVlOiBhbnk7XG4gICAgZm9ybWF0dGVkVmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIGFuaW1hdGlvblJlcTtcbiAgICBwcml2YXRlIF9jb3VudERlY2ltYWxzO1xuICAgIHByaXZhdGUgX2NvdW50VG87XG4gICAgcHJpdmF0ZSBfY291bnRGcm9tO1xuICAgIGNvbnN0cnVjdG9yKGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgZWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBzdGFydCgpOiB2b2lkO1xufVxuIl19