import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, ViewContainerRef, Type } from '@angular/core';
/**
 * Injection service is a helper to append components
 * dynamically to a known location in the DOM, most
 * noteably for dialogs/tooltips appending to body.
 *
 * @export
 */
import * as ɵngcc0 from '@angular/core';
export declare class InjectionService {
    private applicationRef;
    private componentFactoryResolver;
    private injector;
    static globalRootViewContainer: ViewContainerRef;
    /**
     * Sets a default global root view container. This is useful for
     * things like ngUpgrade that doesn't have a ApplicationRef root.
     *
     * @param container
     */
    static setGlobalRootViewContainer(container: ViewContainerRef): void;
    private _container;
    constructor(applicationRef: ApplicationRef, componentFactoryResolver: ComponentFactoryResolver, injector: Injector);
    /**
     * Gets the root view container to inject the component to.
     *
     * @memberOf InjectionService
     */
    getRootViewContainer(): ViewContainerRef | ComponentRef<any>;
    /**
     * Overrides the default root view container. This is useful for
     * things like ngUpgrade that doesn't have a ApplicationRef root.
     *
     * @param container
     *
     * @memberOf InjectionService
     */
    setRootViewContainer(container: ViewContainerRef): void;
    /**
     * Gets the html element for a component ref.
     *
     * @param componentRef
     *
     * @memberOf InjectionService
     */
    getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement;
    /**
     * Gets the root component container html element.
     *
     * @memberOf InjectionService
     */
    getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement;
    /**
     * Projects the bindings onto the component
     *
     * @param component
     * @param options
     *
     * @memberOf InjectionService
     */
    projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any>;
    /**
     * Appends a component to a adjacent location
     *
     * @param componentClass
     * @param [options={}]
     * @param [location]
     *
     * @memberOf InjectionService
     */
    appendComponent<T>(componentClass: Type<T>, bindings?: any, location?: any): ComponentRef<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InjectionService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<InjectionService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiaW5qZWN0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBJbmplY3RvciwgVmlld0NvbnRhaW5lclJlZiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBJbmplY3Rpb24gc2VydmljZSBpcyBhIGhlbHBlciB0byBhcHBlbmQgY29tcG9uZW50c1xuICogZHluYW1pY2FsbHkgdG8gYSBrbm93biBsb2NhdGlvbiBpbiB0aGUgRE9NLCBtb3N0XG4gKiBub3RlYWJseSBmb3IgZGlhbG9ncy90b29sdGlwcyBhcHBlbmRpbmcgdG8gYm9keS5cbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEluamVjdGlvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgYXBwbGljYXRpb25SZWY7XG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBzdGF0aWMgZ2xvYmFsUm9vdFZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XG4gICAgLyoqXG4gICAgICogU2V0cyBhIGRlZmF1bHQgZ2xvYmFsIHJvb3QgdmlldyBjb250YWluZXIuIFRoaXMgaXMgdXNlZnVsIGZvclxuICAgICAqIHRoaW5ncyBsaWtlIG5nVXBncmFkZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhIEFwcGxpY2F0aW9uUmVmIHJvb3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyXG4gICAgICovXG4gICAgc3RhdGljIHNldEdsb2JhbFJvb3RWaWV3Q29udGFpbmVyKGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZik6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfY29udGFpbmVyO1xuICAgIGNvbnN0cnVjdG9yKGFwcGxpY2F0aW9uUmVmOiBBcHBsaWNhdGlvblJlZiwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGluamVjdG9yOiBJbmplY3Rvcik7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcm9vdCB2aWV3IGNvbnRhaW5lciB0byBpbmplY3QgdGhlIGNvbXBvbmVudCB0by5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBJbmplY3Rpb25TZXJ2aWNlXG4gICAgICovXG4gICAgZ2V0Um9vdFZpZXdDb250YWluZXIoKTogVmlld0NvbnRhaW5lclJlZiB8IENvbXBvbmVudFJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCByb290IHZpZXcgY29udGFpbmVyLiBUaGlzIGlzIHVzZWZ1bCBmb3JcbiAgICAgKiB0aGluZ3MgbGlrZSBuZ1VwZ3JhZGUgdGhhdCBkb2Vzbid0IGhhdmUgYSBBcHBsaWNhdGlvblJlZiByb290LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRhaW5lclxuICAgICAqXG4gICAgICogQG1lbWJlck9mIEluamVjdGlvblNlcnZpY2VcbiAgICAgKi9cbiAgICBzZXRSb290Vmlld0NvbnRhaW5lcihjb250YWluZXI6IFZpZXdDb250YWluZXJSZWYpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGh0bWwgZWxlbWVudCBmb3IgYSBjb21wb25lbnQgcmVmLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbXBvbmVudFJlZlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIEluamVjdGlvblNlcnZpY2VcbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRSb290Tm9kZShjb21wb25lbnQ6IFZpZXdDb250YWluZXJSZWYgfCBDb21wb25lbnRSZWY8YW55Pik6IEhUTUxFbGVtZW50O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJvb3QgY29tcG9uZW50IGNvbnRhaW5lciBodG1sIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgSW5qZWN0aW9uU2VydmljZVxuICAgICAqL1xuICAgIGdldFJvb3RWaWV3Q29udGFpbmVyTm9kZShjb21wb25lbnQ6IFZpZXdDb250YWluZXJSZWYgfCBDb21wb25lbnRSZWY8YW55Pik6IEhUTUxFbGVtZW50O1xuICAgIC8qKlxuICAgICAqIFByb2plY3RzIHRoZSBiaW5kaW5ncyBvbnRvIHRoZSBjb21wb25lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqXG4gICAgICogQG1lbWJlck9mIEluamVjdGlvblNlcnZpY2VcbiAgICAgKi9cbiAgICBwcm9qZWN0Q29tcG9uZW50QmluZGluZ3MoY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PiwgYmluZGluZ3M6IGFueSk6IENvbXBvbmVudFJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgYSBjb21wb25lbnQgdG8gYSBhZGphY2VudCBsb2NhdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbXBvbmVudENsYXNzXG4gICAgICogQHBhcmFtIFtvcHRpb25zPXt9XVxuICAgICAqIEBwYXJhbSBbbG9jYXRpb25dXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgSW5qZWN0aW9uU2VydmljZVxuICAgICAqL1xuICAgIGFwcGVuZENvbXBvbmVudDxUPihjb21wb25lbnRDbGFzczogVHlwZTxUPiwgYmluZGluZ3M/OiBhbnksIGxvY2F0aW9uPzogYW55KTogQ29tcG9uZW50UmVmPGFueT47XG59XG4iXX0=