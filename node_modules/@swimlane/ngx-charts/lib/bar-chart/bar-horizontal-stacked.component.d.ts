import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class BarHorizontalStackedComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    tooltipDisabled: boolean;
    gradient: boolean;
    showGridLines: boolean;
    activeEntries: any[];
    schemeType: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    barPadding: number;
    roundDomains: boolean;
    xScaleMax: number;
    showDataLabel: boolean;
    dataLabelFormatting: any;
    noBarWhenZero: boolean;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    groupDomain: any[];
    innerDomain: any[];
    valueDomain: any[];
    xScale: any;
    yScale: any;
    transform: string;
    colors: ColorHelper;
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    legendOptions: any;
    dataLabelMaxWidth: any;
    update(): void;
    getGroupDomain(): any[];
    getInnerDomain(): any[];
    getValueDomain(): any[];
    getYScale(): any;
    getXScale(): any;
    groupTransform(group: any): string;
    onClick(data: any, group?: any): void;
    trackBy(index: any, item: any): string;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onDataLabelMaxWidthChanged(event: any, groupIndex: any): void;
    onActivate(event: any, group: any, fromLegend?: boolean): void;
    onDeactivate(event: any, group: any, fromLegend?: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarHorizontalStackedComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarHorizontalStackedComponent, "ngx-charts-bar-horizontal-stacked", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "tooltipDisabled": "tooltipDisabled"; "gradient": "gradient"; "showGridLines": "showGridLines"; "schemeType": "schemeType"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "xScaleMax": "xScaleMax"; "showDataLabel": "showDataLabel"; "dataLabelFormatting": "dataLabelFormatting"; "noBarWhenZero": "noBarWhenZero"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFyLWhvcml6b250YWwtc3RhY2tlZC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYmFyLWhvcml6b250YWwtc3RhY2tlZC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlld0RpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21tb24vdmlldy1kaW1lbnNpb25zLmhlbHBlcic7XG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xuaW1wb3J0IHsgQmFzZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL2Jhc2UtY2hhcnQuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJhckhvcml6b250YWxTdGFja2VkQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNoYXJ0Q29tcG9uZW50IHtcbiAgICBsZWdlbmQ6IGJvb2xlYW47XG4gICAgbGVnZW5kVGl0bGU6IHN0cmluZztcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xuICAgIHhBeGlzOiBhbnk7XG4gICAgeUF4aXM6IGFueTtcbiAgICBzaG93WEF4aXNMYWJlbDogYW55O1xuICAgIHNob3dZQXhpc0xhYmVsOiBhbnk7XG4gICAgeEF4aXNMYWJlbDogYW55O1xuICAgIHlBeGlzTGFiZWw6IGFueTtcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgZ3JhZGllbnQ6IGJvb2xlYW47XG4gICAgc2hvd0dyaWRMaW5lczogYm9vbGVhbjtcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcbiAgICBzY2hlbWVUeXBlOiBzdHJpbmc7XG4gICAgdHJpbVhBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgcm90YXRlWEF4aXNUaWNrczogYm9vbGVhbjtcbiAgICBtYXhYQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcbiAgICB4QXhpc1RpY2tGb3JtYXR0aW5nOiBhbnk7XG4gICAgeUF4aXNUaWNrRm9ybWF0dGluZzogYW55O1xuICAgIHhBeGlzVGlja3M6IGFueVtdO1xuICAgIHlBeGlzVGlja3M6IGFueVtdO1xuICAgIGJhclBhZGRpbmc6IG51bWJlcjtcbiAgICByb3VuZERvbWFpbnM6IGJvb2xlYW47XG4gICAgeFNjYWxlTWF4OiBudW1iZXI7XG4gICAgc2hvd0RhdGFMYWJlbDogYm9vbGVhbjtcbiAgICBkYXRhTGFiZWxGb3JtYXR0aW5nOiBhbnk7XG4gICAgbm9CYXJXaGVuWmVybzogYm9vbGVhbjtcbiAgICBhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGVhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGRpbXM6IFZpZXdEaW1lbnNpb25zO1xuICAgIGdyb3VwRG9tYWluOiBhbnlbXTtcbiAgICBpbm5lckRvbWFpbjogYW55W107XG4gICAgdmFsdWVEb21haW46IGFueVtdO1xuICAgIHhTY2FsZTogYW55O1xuICAgIHlTY2FsZTogYW55O1xuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xuICAgIGNvbG9yczogQ29sb3JIZWxwZXI7XG4gICAgbWFyZ2luOiBudW1iZXJbXTtcbiAgICB4QXhpc0hlaWdodDogbnVtYmVyO1xuICAgIHlBeGlzV2lkdGg6IG51bWJlcjtcbiAgICBsZWdlbmRPcHRpb25zOiBhbnk7XG4gICAgZGF0YUxhYmVsTWF4V2lkdGg6IGFueTtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICBnZXRHcm91cERvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRJbm5lckRvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRWYWx1ZURvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRZU2NhbGUoKTogYW55O1xuICAgIGdldFhTY2FsZSgpOiBhbnk7XG4gICAgZ3JvdXBUcmFuc2Zvcm0oZ3JvdXA6IGFueSk6IHN0cmluZztcbiAgICBvbkNsaWNrKGRhdGE6IGFueSwgZ3JvdXA/OiBhbnkpOiB2b2lkO1xuICAgIHRyYWNrQnkoaW5kZXg6IGFueSwgaXRlbTogYW55KTogc3RyaW5nO1xuICAgIHNldENvbG9ycygpOiB2b2lkO1xuICAgIGdldExlZ2VuZE9wdGlvbnMoKToge1xuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcbiAgICAgICAgY29sb3JzOiBhbnk7XG4gICAgICAgIGRvbWFpbjogYW55W107XG4gICAgICAgIHRpdGxlOiBhbnk7XG4gICAgICAgIHBvc2l0aW9uOiBzdHJpbmc7XG4gICAgfTtcbiAgICB1cGRhdGVZQXhpc1dpZHRoKHsgd2lkdGggfToge1xuICAgICAgICB3aWR0aDogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIHVwZGF0ZVhBeGlzSGVpZ2h0KHsgaGVpZ2h0IH06IHtcbiAgICAgICAgaGVpZ2h0OiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgb25EYXRhTGFiZWxNYXhXaWR0aENoYW5nZWQoZXZlbnQ6IGFueSwgZ3JvdXBJbmRleDogYW55KTogdm9pZDtcbiAgICBvbkFjdGl2YXRlKGV2ZW50OiBhbnksIGdyb3VwOiBhbnksIGZyb21MZWdlbmQ/OiBib29sZWFuKTogdm9pZDtcbiAgICBvbkRlYWN0aXZhdGUoZXZlbnQ6IGFueSwgZ3JvdXA6IGFueSwgZnJvbUxlZ2VuZD86IGJvb2xlYW4pOiB2b2lkO1xufVxuIl19