import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class BarVerticalStackedComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    tooltipDisabled: boolean;
    gradient: boolean;
    showGridLines: boolean;
    activeEntries: any[];
    schemeType: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    barPadding: number;
    roundDomains: boolean;
    yScaleMax: number;
    showDataLabel: boolean;
    dataLabelFormatting: any;
    noBarWhenZero: boolean;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    groupDomain: any[];
    innerDomain: any[];
    valueDomain: any[];
    xScale: any;
    yScale: any;
    transform: string;
    tickFormatting: (label: string) => string;
    colors: ColorHelper;
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    legendOptions: any;
    dataLabelMaxHeight: any;
    update(): void;
    getGroupDomain(): any[];
    getInnerDomain(): any[];
    getValueDomain(): number[];
    getXScale(): any;
    getYScale(): any;
    onDataLabelMaxHeightChanged(event: any, groupIndex: any): void;
    groupTransform(group: any): string;
    onClick(data: any, group?: any): void;
    trackBy(index: any, item: any): any;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(event: any, group: any, fromLegend?: boolean): void;
    onDeactivate(event: any, group: any, fromLegend?: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarVerticalStackedComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarVerticalStackedComponent, "ngx-charts-bar-vertical-stacked", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "tooltipDisabled": "tooltipDisabled"; "gradient": "gradient"; "showGridLines": "showGridLines"; "schemeType": "schemeType"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "yScaleMax": "yScaleMax"; "showDataLabel": "showDataLabel"; "dataLabelFormatting": "dataLabelFormatting"; "noBarWhenZero": "noBarWhenZero"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFyLXZlcnRpY2FsLXN0YWNrZWQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJhci12ZXJ0aWNhbC1zdGFja2VkLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xuaW1wb3J0IHsgQ29sb3JIZWxwZXIgfSBmcm9tICcuLi9jb21tb24vY29sb3IuaGVscGVyJztcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWNoYXJ0LmNvbXBvbmVudCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCYXJWZXJ0aWNhbFN0YWNrZWRDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ2hhcnRDb21wb25lbnQge1xuICAgIGxlZ2VuZDogYm9vbGVhbjtcbiAgICBsZWdlbmRUaXRsZTogc3RyaW5nO1xuICAgIGxlZ2VuZFBvc2l0aW9uOiBzdHJpbmc7XG4gICAgeEF4aXM6IGFueTtcbiAgICB5QXhpczogYW55O1xuICAgIHNob3dYQXhpc0xhYmVsOiBhbnk7XG4gICAgc2hvd1lBeGlzTGFiZWw6IGFueTtcbiAgICB4QXhpc0xhYmVsOiBhbnk7XG4gICAgeUF4aXNMYWJlbDogYW55O1xuICAgIHRvb2x0aXBEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBncmFkaWVudDogYm9vbGVhbjtcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xuICAgIGFjdGl2ZUVudHJpZXM6IGFueVtdO1xuICAgIHNjaGVtZVR5cGU6IHN0cmluZztcbiAgICB0cmltWEF4aXNUaWNrczogYm9vbGVhbjtcbiAgICB0cmltWUF4aXNUaWNrczogYm9vbGVhbjtcbiAgICByb3RhdGVYQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIG1heFhBeGlzVGlja0xlbmd0aDogbnVtYmVyO1xuICAgIG1heFlBeGlzVGlja0xlbmd0aDogbnVtYmVyO1xuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcbiAgICB5QXhpc1RpY2tGb3JtYXR0aW5nOiBhbnk7XG4gICAgeEF4aXNUaWNrczogYW55W107XG4gICAgeUF4aXNUaWNrczogYW55W107XG4gICAgYmFyUGFkZGluZzogbnVtYmVyO1xuICAgIHJvdW5kRG9tYWluczogYm9vbGVhbjtcbiAgICB5U2NhbGVNYXg6IG51bWJlcjtcbiAgICBzaG93RGF0YUxhYmVsOiBib29sZWFuO1xuICAgIGRhdGFMYWJlbEZvcm1hdHRpbmc6IGFueTtcbiAgICBub0JhcldoZW5aZXJvOiBib29sZWFuO1xuICAgIGFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBkZWFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB0b29sdGlwVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgZGltczogVmlld0RpbWVuc2lvbnM7XG4gICAgZ3JvdXBEb21haW46IGFueVtdO1xuICAgIGlubmVyRG9tYWluOiBhbnlbXTtcbiAgICB2YWx1ZURvbWFpbjogYW55W107XG4gICAgeFNjYWxlOiBhbnk7XG4gICAgeVNjYWxlOiBhbnk7XG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XG4gICAgdGlja0Zvcm1hdHRpbmc6IChsYWJlbDogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgY29sb3JzOiBDb2xvckhlbHBlcjtcbiAgICBtYXJnaW46IG51bWJlcltdO1xuICAgIHhBeGlzSGVpZ2h0OiBudW1iZXI7XG4gICAgeUF4aXNXaWR0aDogbnVtYmVyO1xuICAgIGxlZ2VuZE9wdGlvbnM6IGFueTtcbiAgICBkYXRhTGFiZWxNYXhIZWlnaHQ6IGFueTtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICBnZXRHcm91cERvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRJbm5lckRvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRWYWx1ZURvbWFpbigpOiBudW1iZXJbXTtcbiAgICBnZXRYU2NhbGUoKTogYW55O1xuICAgIGdldFlTY2FsZSgpOiBhbnk7XG4gICAgb25EYXRhTGFiZWxNYXhIZWlnaHRDaGFuZ2VkKGV2ZW50OiBhbnksIGdyb3VwSW5kZXg6IGFueSk6IHZvaWQ7XG4gICAgZ3JvdXBUcmFuc2Zvcm0oZ3JvdXA6IGFueSk6IHN0cmluZztcbiAgICBvbkNsaWNrKGRhdGE6IGFueSwgZ3JvdXA/OiBhbnkpOiB2b2lkO1xuICAgIHRyYWNrQnkoaW5kZXg6IGFueSwgaXRlbTogYW55KTogYW55O1xuICAgIHNldENvbG9ycygpOiB2b2lkO1xuICAgIGdldExlZ2VuZE9wdGlvbnMoKToge1xuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcbiAgICAgICAgY29sb3JzOiBhbnk7XG4gICAgICAgIGRvbWFpbjogYW55W107XG4gICAgICAgIHRpdGxlOiBhbnk7XG4gICAgICAgIHBvc2l0aW9uOiBzdHJpbmc7XG4gICAgfTtcbiAgICB1cGRhdGVZQXhpc1dpZHRoKHsgd2lkdGggfToge1xuICAgICAgICB3aWR0aDogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIHVwZGF0ZVhBeGlzSGVpZ2h0KHsgaGVpZ2h0IH06IHtcbiAgICAgICAgaGVpZ2h0OiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgb25BY3RpdmF0ZShldmVudDogYW55LCBncm91cDogYW55LCBmcm9tTGVnZW5kPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgb25EZWFjdGl2YXRlKGV2ZW50OiBhbnksIGdyb3VwOiBhbnksIGZyb21MZWdlbmQ/OiBib29sZWFuKTogdm9pZDtcbn1cbiJdfQ==