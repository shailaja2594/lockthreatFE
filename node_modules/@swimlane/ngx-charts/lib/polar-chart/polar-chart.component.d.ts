import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class PolarChartComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: boolean;
    yAxis: boolean;
    showXAxisLabel: boolean;
    showYAxisLabel: boolean;
    xAxisLabel: string;
    yAxisLabel: string;
    autoScale: boolean;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    rangeFillOpacity: number;
    trimYAxisTicks: boolean;
    maxYAxisTickLength: number;
    xAxisTickFormatting: (o: any) => any;
    yAxisTickFormatting: (o: any) => any;
    roundDomains: boolean;
    tooltipDisabled: boolean;
    showSeriesOnHover: boolean;
    gradient: boolean;
    yAxisMinScale: number;
    labelTrim: boolean;
    labelTrimSize: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    yAxisDims: ViewDimensions;
    labelOffset: number;
    xDomain: any;
    yDomain: any;
    seriesDomain: any;
    yScale: any;
    xScale: any;
    yAxisScale: any;
    colors: ColorHelper;
    scaleType: string;
    transform: string;
    transformPlot: string;
    transformYAxis: string;
    transformXAxis: string;
    series: any;
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    thetaTicks: any[];
    radiusTicks: number[];
    outerRadius: number;
    update(): void;
    setDims(): void;
    setScales(): void;
    setTicks(): void;
    getXValues(): any[];
    getXDomain(values?: any[]): any[];
    getYValues(): any[];
    getYDomain(domain?: any[]): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    onClick(data: any, series?: any): void;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: ColorHelper;
        domain: any;
        title: string;
        position: string;
    } | {
        scaleType: string;
        colors: any;
        domain: any;
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    trackBy(index: any, item: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolarChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PolarChartComponent, "ngx-charts-polar-chart", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "autoScale": "autoScale"; "showGridLines": "showGridLines"; "curve": "curve"; "schemeType": "schemeType"; "rangeFillOpacity": "rangeFillOpacity"; "trimYAxisTicks": "trimYAxisTicks"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showSeriesOnHover": "showSeriesOnHover"; "gradient": "gradient"; "yAxisMinScale": "yAxisMinScale"; "labelTrim": "labelTrim"; "labelTrimSize": "labelTrimSize"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9sYXItY2hhcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvbGFyLWNoYXJ0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaWV3RGltZW5zaW9ucyB9IGZyb20gJy4uL2NvbW1vbi92aWV3LWRpbWVuc2lvbnMuaGVscGVyJztcbmltcG9ydCB7IENvbG9ySGVscGVyIH0gZnJvbSAnLi4vY29tbW9uL2NvbG9yLmhlbHBlcic7XG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9sYXJDaGFydENvbXBvbmVudCBleHRlbmRzIEJhc2VDaGFydENvbXBvbmVudCB7XG4gICAgbGVnZW5kOiBib29sZWFuO1xuICAgIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XG4gICAgbGVnZW5kUG9zaXRpb246IHN0cmluZztcbiAgICB4QXhpczogYm9vbGVhbjtcbiAgICB5QXhpczogYm9vbGVhbjtcbiAgICBzaG93WEF4aXNMYWJlbDogYm9vbGVhbjtcbiAgICBzaG93WUF4aXNMYWJlbDogYm9vbGVhbjtcbiAgICB4QXhpc0xhYmVsOiBzdHJpbmc7XG4gICAgeUF4aXNMYWJlbDogc3RyaW5nO1xuICAgIGF1dG9TY2FsZTogYm9vbGVhbjtcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xuICAgIGN1cnZlOiBhbnk7XG4gICAgYWN0aXZlRW50cmllczogYW55W107XG4gICAgc2NoZW1lVHlwZTogc3RyaW5nO1xuICAgIHJhbmdlRmlsbE9wYWNpdHk6IG51bWJlcjtcbiAgICB0cmltWUF4aXNUaWNrczogYm9vbGVhbjtcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcbiAgICB4QXhpc1RpY2tGb3JtYXR0aW5nOiAobzogYW55KSA9PiBhbnk7XG4gICAgeUF4aXNUaWNrRm9ybWF0dGluZzogKG86IGFueSkgPT4gYW55O1xuICAgIHJvdW5kRG9tYWluczogYm9vbGVhbjtcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgc2hvd1Nlcmllc09uSG92ZXI6IGJvb2xlYW47XG4gICAgZ3JhZGllbnQ6IGJvb2xlYW47XG4gICAgeUF4aXNNaW5TY2FsZTogbnVtYmVyO1xuICAgIGxhYmVsVHJpbTogYm9vbGVhbjtcbiAgICBsYWJlbFRyaW1TaXplOiBudW1iZXI7XG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRvb2x0aXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBkaW1zOiBWaWV3RGltZW5zaW9ucztcbiAgICB5QXhpc0RpbXM6IFZpZXdEaW1lbnNpb25zO1xuICAgIGxhYmVsT2Zmc2V0OiBudW1iZXI7XG4gICAgeERvbWFpbjogYW55O1xuICAgIHlEb21haW46IGFueTtcbiAgICBzZXJpZXNEb21haW46IGFueTtcbiAgICB5U2NhbGU6IGFueTtcbiAgICB4U2NhbGU6IGFueTtcbiAgICB5QXhpc1NjYWxlOiBhbnk7XG4gICAgY29sb3JzOiBDb2xvckhlbHBlcjtcbiAgICBzY2FsZVR5cGU6IHN0cmluZztcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcbiAgICB0cmFuc2Zvcm1QbG90OiBzdHJpbmc7XG4gICAgdHJhbnNmb3JtWUF4aXM6IHN0cmluZztcbiAgICB0cmFuc2Zvcm1YQXhpczogc3RyaW5nO1xuICAgIHNlcmllczogYW55O1xuICAgIG1hcmdpbjogbnVtYmVyW107XG4gICAgeEF4aXNIZWlnaHQ6IG51bWJlcjtcbiAgICB5QXhpc1dpZHRoOiBudW1iZXI7XG4gICAgZmlsdGVyZWREb21haW46IGFueTtcbiAgICBsZWdlbmRPcHRpb25zOiBhbnk7XG4gICAgdGhldGFUaWNrczogYW55W107XG4gICAgcmFkaXVzVGlja3M6IG51bWJlcltdO1xuICAgIG91dGVyUmFkaXVzOiBudW1iZXI7XG4gICAgdXBkYXRlKCk6IHZvaWQ7XG4gICAgc2V0RGltcygpOiB2b2lkO1xuICAgIHNldFNjYWxlcygpOiB2b2lkO1xuICAgIHNldFRpY2tzKCk6IHZvaWQ7XG4gICAgZ2V0WFZhbHVlcygpOiBhbnlbXTtcbiAgICBnZXRYRG9tYWluKHZhbHVlcz86IGFueVtdKTogYW55W107XG4gICAgZ2V0WVZhbHVlcygpOiBhbnlbXTtcbiAgICBnZXRZRG9tYWluKGRvbWFpbj86IGFueVtdKTogYW55W107XG4gICAgZ2V0U2VyaWVzRG9tYWluKCk6IGFueVtdO1xuICAgIGdldFhTY2FsZShkb21haW46IGFueSwgd2lkdGg6IGFueSk6IGFueTtcbiAgICBnZXRZU2NhbGUoZG9tYWluOiBhbnksIGhlaWdodDogYW55KTogYW55O1xuICAgIG9uQ2xpY2soZGF0YTogYW55LCBzZXJpZXM/OiBhbnkpOiB2b2lkO1xuICAgIHNldENvbG9ycygpOiB2b2lkO1xuICAgIGdldExlZ2VuZE9wdGlvbnMoKToge1xuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcbiAgICAgICAgY29sb3JzOiBDb2xvckhlbHBlcjtcbiAgICAgICAgZG9tYWluOiBhbnk7XG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICAgIHBvc2l0aW9uOiBzdHJpbmc7XG4gICAgfSB8IHtcbiAgICAgICAgc2NhbGVUeXBlOiBzdHJpbmc7XG4gICAgICAgIGNvbG9yczogYW55O1xuICAgICAgICBkb21haW46IGFueTtcbiAgICAgICAgdGl0bGU6IGFueTtcbiAgICAgICAgcG9zaXRpb246IHN0cmluZztcbiAgICB9O1xuICAgIHVwZGF0ZVlBeGlzV2lkdGgoeyB3aWR0aCB9OiB7XG4gICAgICAgIHdpZHRoOiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgdXBkYXRlWEF4aXNIZWlnaHQoeyBoZWlnaHQgfToge1xuICAgICAgICBoZWlnaHQ6IGFueTtcbiAgICB9KTogdm9pZDtcbiAgICBvbkFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgb25EZWFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgZGVhY3RpdmF0ZUFsbCgpOiB2b2lkO1xuICAgIHRyYWNrQnkoaW5kZXg6IGFueSwgaXRlbTogYW55KTogYW55O1xufVxuIl19