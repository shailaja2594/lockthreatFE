import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class LineChartComponent extends BaseChartComponent {
    legend: any;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    autoScale: any;
    timeline: any;
    gradient: boolean;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    rangeFillOpacity: number;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    tooltipDisabled: boolean;
    showRefLines: boolean;
    referenceLines: any;
    showRefLabels: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: number;
    yScaleMax: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    seriesTooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    xSet: any;
    xDomain: any;
    yDomain: any;
    seriesDomain: any;
    yScale: any;
    xScale: any;
    colors: ColorHelper;
    scaleType: string;
    transform: string;
    clipPath: string;
    clipPathId: string;
    series: any;
    areaPath: any;
    margin: number[];
    hoveredVertical: any;
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    hasRange: boolean;
    timelineWidth: any;
    timelineHeight: number;
    timelineXScale: any;
    timelineYScale: any;
    timelineXDomain: any;
    timelineTransform: any;
    timelinePadding: number;
    update(): void;
    updateTimeline(): void;
    getXDomain(): any[];
    getYDomain(): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    updateDomain(domain: any): void;
    updateHoveredVertical(item: any): void;
    hideCircles(): void;
    onClick(data: any): void;
    trackBy(index: any, item: any): string;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LineChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LineChartComponent, "ngx-charts-line-chart", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "autoScale": "autoScale"; "timeline": "timeline"; "gradient": "gradient"; "showGridLines": "showGridLines"; "curve": "curve"; "schemeType": "schemeType"; "rangeFillOpacity": "rangeFillOpacity"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showRefLines": "showRefLines"; "referenceLines": "referenceLines"; "showRefLabels": "showRefLabels"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1jaGFydC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibGluZS1jaGFydC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaWV3RGltZW5zaW9ucyB9IGZyb20gJy4uL2NvbW1vbi92aWV3LWRpbWVuc2lvbnMuaGVscGVyJztcbmltcG9ydCB7IENvbG9ySGVscGVyIH0gZnJvbSAnLi4vY29tbW9uL2NvbG9yLmhlbHBlcic7XG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGluZUNoYXJ0Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNoYXJ0Q29tcG9uZW50IHtcbiAgICBsZWdlbmQ6IGFueTtcbiAgICBsZWdlbmRUaXRsZTogc3RyaW5nO1xuICAgIGxlZ2VuZFBvc2l0aW9uOiBzdHJpbmc7XG4gICAgeEF4aXM6IGFueTtcbiAgICB5QXhpczogYW55O1xuICAgIHNob3dYQXhpc0xhYmVsOiBhbnk7XG4gICAgc2hvd1lBeGlzTGFiZWw6IGFueTtcbiAgICB4QXhpc0xhYmVsOiBhbnk7XG4gICAgeUF4aXNMYWJlbDogYW55O1xuICAgIGF1dG9TY2FsZTogYW55O1xuICAgIHRpbWVsaW5lOiBhbnk7XG4gICAgZ3JhZGllbnQ6IGJvb2xlYW47XG4gICAgc2hvd0dyaWRMaW5lczogYm9vbGVhbjtcbiAgICBjdXJ2ZTogYW55O1xuICAgIGFjdGl2ZUVudHJpZXM6IGFueVtdO1xuICAgIHNjaGVtZVR5cGU6IHN0cmluZztcbiAgICByYW5nZUZpbGxPcGFjaXR5OiBudW1iZXI7XG4gICAgdHJpbVhBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgcm90YXRlWEF4aXNUaWNrczogYm9vbGVhbjtcbiAgICBtYXhYQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcbiAgICB4QXhpc1RpY2tGb3JtYXR0aW5nOiBhbnk7XG4gICAgeUF4aXNUaWNrRm9ybWF0dGluZzogYW55O1xuICAgIHhBeGlzVGlja3M6IGFueVtdO1xuICAgIHlBeGlzVGlja3M6IGFueVtdO1xuICAgIHJvdW5kRG9tYWluczogYm9vbGVhbjtcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgc2hvd1JlZkxpbmVzOiBib29sZWFuO1xuICAgIHJlZmVyZW5jZUxpbmVzOiBhbnk7XG4gICAgc2hvd1JlZkxhYmVsczogYm9vbGVhbjtcbiAgICB4U2NhbGVNaW46IGFueTtcbiAgICB4U2NhbGVNYXg6IGFueTtcbiAgICB5U2NhbGVNaW46IG51bWJlcjtcbiAgICB5U2NhbGVNYXg6IG51bWJlcjtcbiAgICBhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGVhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHNlcmllc1Rvb2x0aXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBkaW1zOiBWaWV3RGltZW5zaW9ucztcbiAgICB4U2V0OiBhbnk7XG4gICAgeERvbWFpbjogYW55O1xuICAgIHlEb21haW46IGFueTtcbiAgICBzZXJpZXNEb21haW46IGFueTtcbiAgICB5U2NhbGU6IGFueTtcbiAgICB4U2NhbGU6IGFueTtcbiAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xuICAgIHNjYWxlVHlwZTogc3RyaW5nO1xuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xuICAgIGNsaXBQYXRoOiBzdHJpbmc7XG4gICAgY2xpcFBhdGhJZDogc3RyaW5nO1xuICAgIHNlcmllczogYW55O1xuICAgIGFyZWFQYXRoOiBhbnk7XG4gICAgbWFyZ2luOiBudW1iZXJbXTtcbiAgICBob3ZlcmVkVmVydGljYWw6IGFueTtcbiAgICB4QXhpc0hlaWdodDogbnVtYmVyO1xuICAgIHlBeGlzV2lkdGg6IG51bWJlcjtcbiAgICBmaWx0ZXJlZERvbWFpbjogYW55O1xuICAgIGxlZ2VuZE9wdGlvbnM6IGFueTtcbiAgICBoYXNSYW5nZTogYm9vbGVhbjtcbiAgICB0aW1lbGluZVdpZHRoOiBhbnk7XG4gICAgdGltZWxpbmVIZWlnaHQ6IG51bWJlcjtcbiAgICB0aW1lbGluZVhTY2FsZTogYW55O1xuICAgIHRpbWVsaW5lWVNjYWxlOiBhbnk7XG4gICAgdGltZWxpbmVYRG9tYWluOiBhbnk7XG4gICAgdGltZWxpbmVUcmFuc2Zvcm06IGFueTtcbiAgICB0aW1lbGluZVBhZGRpbmc6IG51bWJlcjtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICB1cGRhdGVUaW1lbGluZSgpOiB2b2lkO1xuICAgIGdldFhEb21haW4oKTogYW55W107XG4gICAgZ2V0WURvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRTZXJpZXNEb21haW4oKTogYW55W107XG4gICAgZ2V0WFNjYWxlKGRvbWFpbjogYW55LCB3aWR0aDogYW55KTogYW55O1xuICAgIGdldFlTY2FsZShkb21haW46IGFueSwgaGVpZ2h0OiBhbnkpOiBhbnk7XG4gICAgdXBkYXRlRG9tYWluKGRvbWFpbjogYW55KTogdm9pZDtcbiAgICB1cGRhdGVIb3ZlcmVkVmVydGljYWwoaXRlbTogYW55KTogdm9pZDtcbiAgICBoaWRlQ2lyY2xlcygpOiB2b2lkO1xuICAgIG9uQ2xpY2soZGF0YTogYW55KTogdm9pZDtcbiAgICB0cmFja0J5KGluZGV4OiBhbnksIGl0ZW06IGFueSk6IHN0cmluZztcbiAgICBzZXRDb2xvcnMoKTogdm9pZDtcbiAgICBnZXRMZWdlbmRPcHRpb25zKCk6IHtcbiAgICAgICAgc2NhbGVUeXBlOiBzdHJpbmc7XG4gICAgICAgIGNvbG9yczogYW55O1xuICAgICAgICBkb21haW46IGFueVtdO1xuICAgICAgICB0aXRsZTogYW55O1xuICAgICAgICBwb3NpdGlvbjogc3RyaW5nO1xuICAgIH07XG4gICAgdXBkYXRlWUF4aXNXaWR0aCh7IHdpZHRoIH06IHtcbiAgICAgICAgd2lkdGg6IGFueTtcbiAgICB9KTogdm9pZDtcbiAgICB1cGRhdGVYQXhpc0hlaWdodCh7IGhlaWdodCB9OiB7XG4gICAgICAgIGhlaWdodDogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIG9uQWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcbiAgICBvbkRlYWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcbiAgICBkZWFjdGl2YXRlQWxsKCk6IHZvaWQ7XG59XG4iXX0=