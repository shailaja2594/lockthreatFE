{"version":3,"file":"button.es5.js","sources":["../../../src/material/button/button.ts","../../../src/material/button/button-module.ts"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAM,0BAA0B,GAAG,QAAQ,CAA3C;AAAC;AAAI;AAG2B;AAAgC;AAChE;AAEA,IAAM,sBAAsB,GAAG;AAC/B,IAAE,YAAY;AACd,IAAE,iBAAiB;AACnB,IAAE,iBAAiB;AACnB,IAAE,mBAAmB;AACrB,IAAE,oBAAoB;AACtB,IAAE,cAAc;AAChB,IAAE,SAAS;AACX,CAAC,CAAD;AAAC;AAE6C;AAC7C;AAAkB;AACnB;AAAK;AAC2B;AAAI;AAGlC;AAAI;AAA6C,IAHjD,SAAF,aAAA,CAAqB,WAAuB,EAA5C;AAAE,QAAmB,IAArB,CAAA,WAAgC,GAAX,WAAW,CAAY;AAAC,KAAG;AAChD,IAAA,OAAA,aAAC,CAAD;AAAC,CAAA,EAAD,CAAA,CAAC;AACD;AACA,IAAM,mBAAmB,GACE,UAAU,CAAC,aAAa,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,CADvF;AAAC;AAAI;AAA2B;AAMhC,IAAA,SAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAgB6BA,SAA/B,CAAA,SAAA,EAAA,MAAA,CAAA,CAAkD;AAClD,IAWE,SAAF,SAAA,CAAc,UAAsB,EACd,aAA2B,EACe,cAAsB,EAFtF;AAAE,QAAA,IAAF,KAAA,GAGI,MAHJ,CAAA,IAAA,CAAA,IAAA,EAGU,UAAU,CAAC,IAHrB,IAAA,CAuBG;AACH,QAvBsB,KAAtB,CAAA,aAAmC,GAAb,aAAa,CAAc;AAAC,QACc,KAAhE,CAAA,cAA8E,GAAd,cAAc,CAAQ;AAAC;AAC9E;AAEgB;AAAY,QAb1B,KAAX,CAAA,aAAwB,GAAY,KAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;AACvF;AACW;AACE;AAAY,QAAd,KAAX,CAAA,YAAuB,GAAY,KAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AAC9E;AAEqB;AAED,QAOhB,KAAmB,IAAvB,EAAA,GAAA,CAA6C,EAAtB,wBAAvB,GAAA,sBAA6C,EAAtB,EAAvB,GAAA,wBAAA,CAAA,MAA6C,EAAtB,EAAvB,EAA6C,EAAE;AAC/C,YADS,IAAM,IAAI,GAAnB,wBAAA,CAAA,EAAA,CAAmB,CAAnB;AAAC,YACK,IAAI,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;AACzC,gBAAQ,oBAAC,KAAI,CAAC,eAAe,EAAE,IAAiB,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACpE,aAAO;AACP,SAAK;AACL;AAEG;AACI;AACI,QAAP,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;AAC9D,QACI,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AACvD,QACI,IAAI,KAAI,CAAC,aAAa,EAAE;AAC5B,YAAM,KAAI,CAAC,KAAK,GAAG,0BAA0B,CAAC;AAC9C,SAAK;AACL;AAEiB,KAFd;AACH;AACO;AACC;AAAQ,IADd,SAAF,CAAA,SAAA,CAAA,WAAa;AACX;AAAmB;AAAQ,IAD3B,YAAF;AAAE,QACE,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxD,KAAG,CAAH;AAAC;AAE0B;AACrB;AAA2B;AAA0B;AAC9C;AAAmB;AAAQ,IADtC,SAAF,CAAA,SAAA,CAAA,KAAO;AAAO;AAA2B;AAA0B;AAC9C;AAAmB;AAAQ,IAD9C,UAAM,MAA+B,EAAE,OAAsB,EAA/D;AAAE,QAAM,IAAR,MAAA,KAAA,KAAA,CAAA,EAAQ,EAAA,MAAR,GAAA,SAAuC,CAAvC,EAAA;AAAC,QACG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AACzE,KAAG,CAAH;AAAC;AAEG;AACH;AAAQ,IADP,SAAF,CAAA,SAAA,CAAA,eAAiB;AACf;AAAmB;AAAQ,IAD3B,YAAF;AAAE,QACE,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;AAC1C,KAAG,CAAH;AAAC;AAEG;AAAmB;AAChB,IADL,SAAF,CAAA,SAAA,CAAA,iBAAmB;AACjB;AAAmB;AAAQ,IAD3B,YAAF;AAAE,QACE,OAAO,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC;AAC/C,KAAG,CAAH;AAAC;AAE+D;AAC1D;AACgB;AAAgC;AAAmB;AAAQ,IAD/E,SAAF,CAAA,SAAA,CAAA,kBAAoB;AAAO;AACgB;AAAgC;AAE1E;AAGC,IANA,YAAF;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAEG;AACH,QAHqB,IAArB,UAAA,GAAA,EAAA,CAA4C;AAAC,QAA7C,KAAqB,IAArB,EAAA,GAAA,CAA4C,EAAvB,EAArB,GAAA,SAAA,CAAA,MAA4C,EAAvB,EAArB,EAA4C,EAA5C;AAAE,YAAmB,UAArB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAA4C;AAAC;AACtC,QAAH,OAAO,UAAU,CAAC,IAAI;AAAM;AAAgC;AAAuB;AAIpF,QAJwB,UAAA,SAAS,EAApC,EAAwC,OAAA,KAAI,CAAC,eAAe,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAtF,EAAsF,EAAC,CAAC;AACxF,KAAG,CAAH,AA3DA;AAAC;cAdD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,nDAcwB;AAEA;AACrB;AAAgC,QApEnC,EAAA,IAAA,EAAE,MAAF,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,qBAAA,EAAA,EAAA,CAAA,EAAA;AAAC,KAJD,CAAA,EAAA,CAAA;QAuDA,sBACE,9BAxDD,IAqFD,SAAA,CAAA,cAAA,GAAA;KA7BU,EAAE,WAAZ,sBACE,IAAF,EAAA,0BAGA,xEAyBE;AAA6E;KAzBxD,EAAvB,kBAAA,0BACM,iCAAN,EAAA,qCAAA,uBACA,sBACA,QAAA,EAAA;iTAAA,sBACA,MAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;uxJAAA,CAAA,sBACE,MAAF,EAAA,CAAA,UAAA,EAAA,eAAA,EAAA,OAAA,CAAA,sBACE,aAAF,EAAA,iBAAA,CAAA,IAAA,sBACE,eAAF,EAAA,uBAAA,CAAA,MAAA,mBACA,EAAA,EAAA,OACA;;;;;;;;;;;;;;;;;;;;;;;oBAgBqF;AAAC,IAJtF,OAAA,SAAA,CAAA;AAAC;AAID;AAAI;AAAkC;AAAI;AACvC;AAEU,IA8Cb,SAAA,SAAA,CAAA,YAAA,EAAA,UAAA,EAAA,aAAA,EAAA;AAAE,QAqBF,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,UAAA,EAAA,YAAA,EAAA,aAAA,CAAA,IAAA,IAAA,CAAA;AAAC,KAID;AAAC;AAAQ;AACS;AACb;AAAQ;AACsB;AAAwB;AACrD;AAAQ;AAAuB;AAGA,QAArC,IAAA,IAAA,CAAA,QAAA,EAAA;AAAE,YACF,KAAA,CAAA,cAAA,EAAA,CAAA;AAAC,YACO,KAAK,CAAb,wBAAA,EAAA,CAAA;AAAC,SACD;AAAC,KACD,CAAA,AAnBA;IAoBA,SAAA,CAAA,dApBC;CAoBD,GAAA,UACA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,QAAA,EAAA,nDArBwB,IAExB,SAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;AAAE,QACF,EAAA,IAAA,EAAA,YAAA,EAAA;AAAE;8EAkBF,9EAjB6B;AAKZ;AAAU,IAhK3B,SAAA,CAAA,cAAoB,GAApB;EAsIA,IAAA,EAAA,RAtIE,QAIF,QAAE,EAAF,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAC,KA8JD;;sCAvBM,iBAAN,EAAA,iCAAA,kOAII,iCAAJ,EAAA;+BAAA,uBACA,sBACA,MAAA,EAAA,CAAA,UAAA,EAAA,eAAA,EAAA,OAAA,CAAA;WACA,QAAA;CAAA;;mGAAA,sBACA,MAAA,EAAA,CAAA;;;;;;;;;;;wzKAAA,CAAA,sBACA,aAAA,EAAA,iBAAA,CAAA,IAAA,sBACE,eAAF,EAAA,uBAAA,CAAA,MAAA,mBACA,EAAA,EAAA,OACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;AAAC;AAAsB;AAAe;AAAC;AAAI;AACtC;AAIsB;ACjK3B,IAAA,eAAA,kBAAA,YAAA;AAAE,IAAF,SAAA,eAAA,GAAA;AAAE,KAgB6B;2CAhB/B,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;eACR,OAAO,EAAE,0BACP,YAAY,0BACZ,eAAe,0BACf,eAAe;mBAChB;eACD,OAAO,EAAE;qBACP;CAAS;gBACT,SAAS;sBACT,eAAe,uBAChB,sBACD,YAAY,EAAE,0BACZ,SAAS,0BACT;QAAS,uBACV,mBACF,EAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;gDACK;AAAC,IAAwB,OAA9B,eAA+B,CAA/B;AAAC,CAA8B,EAA/B,CAAA;AAAE;AAAC;AAAI;AACE;AAAqH;AAAI;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAC;AAAkD","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n"]}