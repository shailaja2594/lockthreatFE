{"version":3,"file":"progress-spinner.es5.js","sources":["../../../src/material/progress-spinner/progress-spinner.ts","../../../src/material/progress-spinner/progress-spinner-module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n"]}