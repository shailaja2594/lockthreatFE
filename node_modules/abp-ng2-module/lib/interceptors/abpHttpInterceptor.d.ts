import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpHeaders } from '@angular/common/http';
import { AbpHttpConfigurationService } from './abp-http-configuration.service';
import * as ɵngcc0 from '@angular/core';
export declare class AbpHttpInterceptor implements HttpInterceptor {
    private _injector;
    protected configuration: AbpHttpConfigurationService;
    private _tokenService;
    private _utilsService;
    private _logService;
    constructor(configuration: AbpHttpConfigurationService, _injector: Injector);
    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    protected tryGetRefreshTokenService(): Observable<boolean>;
    private isRefreshing;
    private refreshTokenSubject;
    private tryAuthWithRefreshToken;
    protected normalizeRequestHeaders(request: HttpRequest<any>): HttpRequest<any>;
    protected addXRequestedWithHeader(headers: HttpHeaders): HttpHeaders;
    protected addAspNetCoreCultureHeader(headers: HttpHeaders): HttpHeaders;
    protected addAcceptLanguageHeader(headers: HttpHeaders): HttpHeaders;
    protected addTenantIdHeader(headers: HttpHeaders): HttpHeaders;
    protected addAuthorizationHeaders(headers: HttpHeaders): HttpHeaders;
    protected handleSuccessResponse(event: HttpEvent<any>): Observable<HttpEvent<any>>;
    protected handleErrorResponse(error: any): Observable<never>;
    private itemExists;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AbpHttpInterceptor, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AbpHttpInterceptor>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJwSHR0cEludGVyY2VwdG9yLmQudHMiLCJzb3VyY2VzIjpbImFicEh0dHBJbnRlcmNlcHRvci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEh0dHBJbnRlcmNlcHRvciwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0LCBIdHRwRXZlbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBBYnBIdHRwQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL2FicC1odHRwLWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFicEh0dHBJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgICBwcml2YXRlIF9pbmplY3RvcjtcclxuICAgIHByb3RlY3RlZCBjb25maWd1cmF0aW9uOiBBYnBIdHRwQ29uZmlndXJhdGlvblNlcnZpY2U7XHJcbiAgICBwcml2YXRlIF90b2tlblNlcnZpY2U7XHJcbiAgICBwcml2YXRlIF91dGlsc1NlcnZpY2U7XHJcbiAgICBwcml2YXRlIF9sb2dTZXJ2aWNlO1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbjogQWJwSHR0cENvbmZpZ3VyYXRpb25TZXJ2aWNlLCBfaW5qZWN0b3I6IEluamVjdG9yKTtcclxuICAgIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xyXG4gICAgcHJvdGVjdGVkIHRyeUdldFJlZnJlc2hUb2tlblNlcnZpY2UoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIHByaXZhdGUgaXNSZWZyZXNoaW5nO1xyXG4gICAgcHJpdmF0ZSByZWZyZXNoVG9rZW5TdWJqZWN0O1xyXG4gICAgcHJpdmF0ZSB0cnlBdXRoV2l0aFJlZnJlc2hUb2tlbjtcclxuICAgIHByb3RlY3RlZCBub3JtYWxpemVSZXF1ZXN0SGVhZGVycyhyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogSHR0cFJlcXVlc3Q8YW55PjtcclxuICAgIHByb3RlY3RlZCBhZGRYUmVxdWVzdGVkV2l0aEhlYWRlcihoZWFkZXJzOiBIdHRwSGVhZGVycyk6IEh0dHBIZWFkZXJzO1xyXG4gICAgcHJvdGVjdGVkIGFkZEFzcE5ldENvcmVDdWx0dXJlSGVhZGVyKGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogSHR0cEhlYWRlcnM7XHJcbiAgICBwcm90ZWN0ZWQgYWRkQWNjZXB0TGFuZ3VhZ2VIZWFkZXIoaGVhZGVyczogSHR0cEhlYWRlcnMpOiBIdHRwSGVhZGVycztcclxuICAgIHByb3RlY3RlZCBhZGRUZW5hbnRJZEhlYWRlcihoZWFkZXJzOiBIdHRwSGVhZGVycyk6IEh0dHBIZWFkZXJzO1xyXG4gICAgcHJvdGVjdGVkIGFkZEF1dGhvcml6YXRpb25IZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogSHR0cEhlYWRlcnM7XHJcbiAgICBwcm90ZWN0ZWQgaGFuZGxlU3VjY2Vzc1Jlc3BvbnNlKGV2ZW50OiBIdHRwRXZlbnQ8YW55Pik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xyXG4gICAgcHJvdGVjdGVkIGhhbmRsZUVycm9yUmVzcG9uc2UoZXJyb3I6IGFueSk6IE9ic2VydmFibGU8bmV2ZXI+O1xyXG4gICAgcHJpdmF0ZSBpdGVtRXhpc3RzO1xyXG59XHJcbiJdfQ==