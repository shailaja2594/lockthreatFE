"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const find_module_1 = require("@schematics/angular/utility/find-module");
const change_1 = require("../utility/change");
const routing_1 = require("../utility/routing");
const source_1 = require("../utility/source");
const core_1 = require("@angular-devkit/core");
const project_1 = require("../utility/project");
const string_1 = require("../utility/string");
function getPathToFile(host, projectName, moduleName) {
    const rootPath = project_1.getApplicationPath(host, projectName);
    try {
        return find_module_1.findModuleFromOptions(host, { name: moduleName, path: rootPath, module: moduleName });
    }
    catch (error) {
        return;
    }
}
function addViewToNavigation(options) {
    return (host) => {
        const navigationName = 'app-navigation';
        const navigationFilePath = getPathToFile(host, options.project, navigationName);
        if (!navigationFilePath) {
            return;
        }
        const source = source_1.getSourceFile(host, navigationFilePath);
        const pagePath = core_1.strings.dasherize(options.name);
        const name = core_1.strings.dasherize(core_1.basename(core_1.normalize(options.name)));
        const title = string_1.humanize(name);
        const navigationItem = `  {
    text: '${title}',
    path: '/${pagePath}',
    icon: '${options.icon}'
  }`;
        change_1.insertItemToArray(host, navigationFilePath, source, navigationItem, { location: 'end' });
        return host;
    };
}
function addRedirectRoute(host, routingModulePath, page) {
    const source = source_1.getSourceFile(host, routingModulePath);
    const content = source.getText();
    if (content.match(/path:\s*'\*\*'/g)) {
        return;
    }
    const routes = routing_1.findRoutesInSource(source);
    const redirectRoute = `  {
    path: '**',
    redirectTo: '${core_1.strings.dasherize(page)}'
  }`;
    change_1.insertItemToArray(host, routingModulePath, routes, redirectRoute, { location: 'end' });
}
function addViewToRouting(options) {
    return (host) => {
        const routingModulePath = getPathToFile(host, options.project, options.module);
        if (!routingModulePath) {
            throw new schematics_1.SchematicsException('Specified module does not exist.');
        }
        addRedirectRoute(host, routingModulePath, options.name);
        const source = source_1.getSourceFile(host, routingModulePath);
        const routes = routing_1.findRoutesInSource(source);
        if (!routes) {
            throw new schematics_1.SchematicsException('No routes found.');
        }
        if (!routing_1.hasComponentInRoutes(routes, options.name)) {
            const route = routing_1.getRoute(options.name);
            change_1.insertItemToArray(host, routingModulePath, routes, route);
        }
        return host;
    };
}
exports.addViewToRouting = addViewToRouting;
function getPathForView(name) {
    if (name.includes('/')) {
        return name;
    }
    return 'pages/' + name;
}
function getModuleName(addRoute, moduleName) {
    if (!moduleName && addRoute) {
        return 'app-routing';
    }
    return moduleName;
}
function addContentToView(options) {
    return (host) => {
        const name = core_1.strings.dasherize(core_1.basename(core_1.normalize(options.name)));
        const path = `${core_1.dirname(options.name)}/${name}`;
        const title = string_1.humanize(name);
        const componentPath = `/${project_1.getApplicationPath(host, options.project)}${path}/${name}.component.html`;
        if (host.exists(componentPath)) {
            host.overwrite(componentPath, `<h2 class="content-block">${title}</h2>
<div class="content-block">
    <div class="dx-card responsive-paddings">Put your content here</div>
</div>
`);
        }
        return host;
    };
}
function default_1(options) {
    return (host) => {
        const addRoute = options.addRoute;
        const project = project_1.getProjectName(host, options);
        const module = getModuleName(addRoute, options.module);
        const name = getPathForView(options.name);
        const rules = [schematics_1.externalSchematic('@schematics/angular', 'component', {
                name,
                project,
                module,
                skipTests: options.skipTests,
                inlineStyle: options.inlineStyle,
                prefix: options.prefix
            }),
            addContentToView({ name, project })
        ];
        if (addRoute) {
            rules.push(addViewToRouting({ name, project, module }));
            rules.push(addViewToNavigation({ name, icon: options.icon, project }));
        }
        return schematics_1.chain(rules);
    };
}
exports.default = default_1;
//# sourceMappingURL=index.js.map