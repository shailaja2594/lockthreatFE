import { HttpClient } from '@angular/common/http';
import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SummernoteOptions } from './summernote-options';
import * as ɵngcc0 from '@angular/core';
export declare class NgxSummernoteDirective implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {
    private el;
    private zone;
    private http;
    ngxSummernote: SummernoteOptions;
    summernoteModel: any;
    summernoteModelChange: EventEmitter<any>;
    imageUpload: EventEmitter<any>;
    mediaDelete: EventEmitter<any>;
    blur: EventEmitter<any>;
    ngxSummernoteDisabled: boolean;
    private _options;
    private SPECIAL_TAGS;
    private INNER_HTML_ATTR;
    private _hasSpecialTag;
    private _$element;
    private _editor;
    private _model;
    private _oldModel;
    private _editorInitialized;
    private uploadSub;
    constructor(el: ElementRef, zone: NgZone, http: HttpClient);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(content: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    private updateEditor;
    private updateModel;
    private initListeners;
    private createEditor;
    private setHtml;
    private setContent;
    private destroyEditor;
    private uploadImage;
    insertFromDataURL(files: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxSummernoteDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxSummernoteDirective, "[ngxSummernote]", never, { "ngxSummernote": "ngxSummernote"; "summernoteModel": "summernoteModel"; "ngxSummernoteDisabled": "ngxSummernoteDisabled"; }, { "summernoteModelChange": "summernoteModelChange"; "imageUpload": "imageUpload"; "mediaDelete": "mediaDelete"; "blur": "blur"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXN1bW1lcm5vdGUuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm5neC1zdW1tZXJub3RlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3VtbWVybm90ZU9wdGlvbnMgfSBmcm9tICcuL3N1bW1lcm5vdGUtb3B0aW9ucyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hTdW1tZXJub3RlRGlyZWN0aXZlIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgaHR0cDtcbiAgICBuZ3hTdW1tZXJub3RlOiBTdW1tZXJub3RlT3B0aW9ucztcbiAgICBzdW1tZXJub3RlTW9kZWw6IGFueTtcbiAgICBzdW1tZXJub3RlTW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGltYWdlVXBsb2FkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBtZWRpYURlbGV0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmd4U3VtbWVybm90ZURpc2FibGVkOiBib29sZWFuO1xuICAgIHByaXZhdGUgX29wdGlvbnM7XG4gICAgcHJpdmF0ZSBTUEVDSUFMX1RBR1M7XG4gICAgcHJpdmF0ZSBJTk5FUl9IVE1MX0FUVFI7XG4gICAgcHJpdmF0ZSBfaGFzU3BlY2lhbFRhZztcbiAgICBwcml2YXRlIF8kZWxlbWVudDtcbiAgICBwcml2YXRlIF9lZGl0b3I7XG4gICAgcHJpdmF0ZSBfbW9kZWw7XG4gICAgcHJpdmF0ZSBfb2xkTW9kZWw7XG4gICAgcHJpdmF0ZSBfZWRpdG9ySW5pdGlhbGl6ZWQ7XG4gICAgcHJpdmF0ZSB1cGxvYWRTdWI7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSwgaHR0cDogSHR0cENsaWVudCk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25DaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQ7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIHdyaXRlVmFsdWUoY29udGVudDogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVFZGl0b3I7XG4gICAgcHJpdmF0ZSB1cGRhdGVNb2RlbDtcbiAgICBwcml2YXRlIGluaXRMaXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBjcmVhdGVFZGl0b3I7XG4gICAgcHJpdmF0ZSBzZXRIdG1sO1xuICAgIHByaXZhdGUgc2V0Q29udGVudDtcbiAgICBwcml2YXRlIGRlc3Ryb3lFZGl0b3I7XG4gICAgcHJpdmF0ZSB1cGxvYWRJbWFnZTtcbiAgICBpbnNlcnRGcm9tRGF0YVVSTChmaWxlczogYW55KTogdm9pZDtcbn1cbiJdfQ==