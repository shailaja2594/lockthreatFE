import { ElementRef, Injector, NgZone, OnChanges, Renderer2, SimpleChanges } from '@angular/core';
import { ReCaptchaType } from '../models/recaptcha-type.enum';
import { ScriptService } from '../services/script.service';
import { BaseReCaptchaComponent } from './base-recaptcha.component';
import * as ɵngcc0 from '@angular/core';
export declare class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {
    protected renderer: Renderer2;
    protected zone: NgZone;
    protected injector: Injector;
    protected scriptService: ScriptService;
    /**
     * This size representing invisible captcha
     */
    protected readonly size = "invisible";
    /**
     * Theme
     */
    theme: 'dark' | 'light';
    /**
     * Badge
     */
    badge: 'bottomright' | 'bottomleft' | 'inline';
    /**
     * Language code. Auto-detects the user's language if unspecified.
     */
    hl: string;
    captchaWrapperElem: ElementRef;
    protected recaptchaType: ReCaptchaType;
    constructor(renderer: Renderer2, zone: NgZone, injector: Injector, scriptService: ScriptService);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
     */
    execute(): void;
    protected captchaSpecificSetup(): void;
    /**
    * Gets reCaptcha properties
    */
    protected getCaptchaProperties(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InvisibleReCaptchaComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InvisibleReCaptchaComponent, "ngx-invisible-recaptcha", never, { "theme": "theme"; "badge": "badge"; "hl": "hl"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52aXNpYmxlLXJlY2FwdGNoYS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaW52aXNpYmxlLXJlY2FwdGNoYS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3RvciwgTmdab25lLCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSZUNhcHRjaGFUeXBlIH0gZnJvbSAnLi4vbW9kZWxzL3JlY2FwdGNoYS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBTY3JpcHRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc2NyaXB0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCYXNlUmVDYXB0Y2hhQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNlLXJlY2FwdGNoYS5jb21wb25lbnQnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbnZpc2libGVSZUNhcHRjaGFDb21wb25lbnQgZXh0ZW5kcyBCYXNlUmVDYXB0Y2hhQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xyXG4gICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZTtcclxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3I7XHJcbiAgICBwcm90ZWN0ZWQgc2NyaXB0U2VydmljZTogU2NyaXB0U2VydmljZTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBzaXplIHJlcHJlc2VudGluZyBpbnZpc2libGUgY2FwdGNoYVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2l6ZSA9IFwiaW52aXNpYmxlXCI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZW1lXHJcbiAgICAgKi9cclxuICAgIHRoZW1lOiAnZGFyaycgfCAnbGlnaHQnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYWRnZVxyXG4gICAgICovXHJcbiAgICBiYWRnZTogJ2JvdHRvbXJpZ2h0JyB8ICdib3R0b21sZWZ0JyB8ICdpbmxpbmUnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYW5ndWFnZSBjb2RlLiBBdXRvLWRldGVjdHMgdGhlIHVzZXIncyBsYW5ndWFnZSBpZiB1bnNwZWNpZmllZC5cclxuICAgICAqL1xyXG4gICAgaGw6IHN0cmluZztcclxuICAgIGNhcHRjaGFXcmFwcGVyRWxlbTogRWxlbWVudFJlZjtcclxuICAgIHByb3RlY3RlZCByZWNhcHRjaGFUeXBlOiBSZUNhcHRjaGFUeXBlO1xyXG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgem9uZTogTmdab25lLCBpbmplY3RvcjogSW5qZWN0b3IsIHNjcmlwdFNlcnZpY2U6IFNjcmlwdFNlcnZpY2UpO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFByb2dyYW1hdGljYWxseSBpbnZva2UgdGhlIHJlQ0FQVENIQSBjaGVjay4gVXNlZCBpZiB0aGUgaW52aXNpYmxlIHJlQ0FQVENIQSBpcyBvbiBhIGRpdiBpbnN0ZWFkIG9mIGEgYnV0dG9uLlxyXG4gICAgICovXHJcbiAgICBleGVjdXRlKCk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgY2FwdGNoYVNwZWNpZmljU2V0dXAoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgKiBHZXRzIHJlQ2FwdGNoYSBwcm9wZXJ0aWVzXHJcbiAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldENhcHRjaGFQcm9wZXJ0aWVzKCk6IGFueTtcclxufVxyXG4iXX0=