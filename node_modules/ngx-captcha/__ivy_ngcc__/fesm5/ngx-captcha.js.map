{"version":3,"file":"ngx-captcha.js","sources":["ng:/ngx-captcha/lib/components/base-recaptcha.component.ts","ng:/ngx-captcha/lib/models/recaptcha-type.enum.ts","ng:/ngx-captcha/lib/services/script.service.ts","ng:/ngx-captcha/lib/components/invisible-recaptcha.component.ts","ng:/ngx-captcha/lib/components/recaptcha-2.component.ts","ng:/ngx-captcha/lib/services/recaptcha_v3.service.ts","ng:/ngx-captcha/lib/ngx-captcha.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    AfterViewChecked,\r\n    AfterViewInit,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Injector,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NgControl, AbstractControl } from '@angular/forms';\r\nimport { Type } from '@angular/core';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\n\r\nexport abstract class BaseReCaptchaComponent implements OnChanges, ControlValueAccessor, AfterViewInit, AfterViewChecked {\r\n\r\n    /**\r\n    * Prefix of the captcha element\r\n    */\r\n    protected readonly captchaElemPrefix = 'ngx_captcha_id_';\r\n\r\n    private setupCaptcha: boolean = true;\r\n\r\n    /**\r\n    * Google's site key.\r\n    * You can find this under https://www.google.com/recaptcha\r\n    */\r\n    @Input() siteKey: string;\r\n\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\r\n    @Input() useGlobalDomain: boolean = false;\r\n\r\n    /**\r\n    * Type\r\n    */\r\n    @Input() type: 'audio' | 'image' = 'image';\r\n\r\n    /**\r\n    * Language code. Auto-detects the user's language if unspecified.\r\n    */\r\n    @Input() hl: string;\r\n\r\n    /**\r\n    * Tab index\r\n    */\r\n    @Input() tabIndex = 0;\r\n\r\n    /**\r\n    * Called when captcha receives successful response.\r\n    * Captcha response token is passed to event.\r\n    */\r\n    @Output() success = new EventEmitter<string>();\r\n\r\n    /**\r\n    * Called when captcha is loaded. Event receives id of the captcha\r\n    */\r\n    @Output() load = new EventEmitter<number>();\r\n\r\n    /**\r\n    * Called when captcha is reset.\r\n    */\r\n    @Output() reset = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n    */\r\n    @Output() ready = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Error callback\r\n    */\r\n    @Output() error = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Expired callback\r\n    */\r\n    @Output() expire = new EventEmitter<void>();\r\n\r\n    abstract captchaWrapperElem?: ElementRef;\r\n\r\n    /**\r\n    * Indicates if captcha should be set on load\r\n    */\r\n    private setupAfterLoad = false;\r\n\r\n    /**\r\n    * Captcha element\r\n    */\r\n    protected captchaElem?: HTMLElement;\r\n\r\n    /**\r\n    * Id of the captcha elem\r\n    */\r\n    protected captchaId?: number;\r\n\r\n    /**\r\n    * Holds last response value\r\n    */\r\n    protected currentResponse?: string;\r\n\r\n    /**\r\n    * If enabled, captcha will reset after receiving success response. This is useful\r\n    * when invisible captcha need to be resolved multiple times on same page\r\n    */\r\n    protected resetCaptchaAfterSuccess = false;\r\n\r\n    /**\r\n    * Captcha type\r\n    */\r\n    protected abstract recaptchaType: ReCaptchaType;\r\n\r\n    /**\r\n    * Required by ControlValueAccessor\r\n    */\r\n    protected onChange: (value: string | undefined) => void;\r\n    protected onTouched: (value: string | undefined) => void;\r\n\r\n    /**\r\n    * Indicates if captcha is loaded\r\n    */\r\n    public isLoaded = false;\r\n\r\n    /**\r\n    * Reference to global reCaptcha API\r\n    */\r\n    public reCaptchaApi?: any;\r\n\r\n    /**\r\n    * Id of the DOM element wrapping captcha\r\n    */\r\n    public captchaElemId?: string;\r\n\r\n    /**\r\n    * Form Control to be enable usage in reactive forms\r\n    */\r\n    public control?: AbstractControl | null;\r\n\r\n    protected constructor(\r\n        protected renderer: Renderer2,\r\n        protected zone: NgZone,\r\n        protected injector: Injector,\r\n        protected scriptService: ScriptService,\r\n    ) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get<NgControl>(NgControl).control;\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    protected abstract getCaptchaProperties(): any;\r\n\r\n    /**\r\n    * Used for captcha specific setup\r\n    */\r\n    protected abstract captchaSpecificSetup(): void;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        this.setupCaptcha = true;\r\n    }\r\n\r\n    /**\r\n    * Gets captcha response as per reCaptcha docs\r\n    */\r\n    getResponse(): string {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n\r\n    /**\r\n    * Gets Id of captcha widget\r\n    */\r\n    getCaptchaId(): number | undefined {\r\n        return this.captchaId;\r\n    }\r\n\r\n    /**\r\n    * Resets captcha\r\n    */\r\n    resetCaptcha(): void {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n\r\n\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Gets last submitted captcha response\r\n    */\r\n    getCurrentResponse(): string | undefined {\r\n        return this.currentResponse;\r\n    }\r\n\r\n    /**\r\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n    */\r\n    reloadCaptcha(): void {\r\n        this.setupComponent();\r\n    }\r\n\r\n    protected ensureCaptchaElem(captchaElemId: string): void {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n\r\n    /**\r\n    * Responsible for instantiating captcha element\r\n    */\r\n    protected renderReCaptcha(): void {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Called when captcha receives response\r\n    * @param callback Callback\r\n    */\r\n    protected handleCallback(callback: any): void {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n\r\n    private setupComponent(): void {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n\r\n    /**\r\n    * Called when google's recaptcha script is ready\r\n    */\r\n    private onloadCallback(grecapcha: any): void {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n\r\n        // fire load event\r\n        this.load.next();\r\n\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n\r\n    private generateNewElemId(): string {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n\r\n    private createAndSetCaptchaElem(): void {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n\r\n        // update captcha elem\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n    }\r\n\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    public writeValue(obj: any): void { }\r\n\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    public registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    /**\r\n    * At some point we might be interested whether the user has touched our component\r\n    */\r\n    public registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    /**\r\n    * Handles error callback\r\n    */\r\n    protected handleErrorCallback(): void {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n\r\n        this.error.next();\r\n    }\r\n\r\n    /**\r\n    * Handles expired callback\r\n    */\r\n    protected handleExpireCallback(): void {\r\n        this.expire.next();\r\n\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\n\r\n","export enum ReCaptchaType {\r\n\r\n    InvisibleReCaptcha,\r\n    ReCaptcha2\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\ndeclare var document: any;\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\r\n    protected readonly windowGrecaptcha = 'grecaptcha';\r\n\r\n    /**\r\n    * Name of the global callback\r\n    */\r\n    protected readonly windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n\r\n    protected readonly globalDomain: string = 'recaptcha.net';\r\n\r\n    protected readonly defaultDomain: string = 'google.com';\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerCaptchaScript(useGlobalDomain: boolean, render: string, onLoad: (grecaptcha: any) => void, language?: string): void {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run(() => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = <any>(() => this.zone.run(\r\n            onLoad.bind(this, window[this.windowGrecaptcha])\r\n        ));\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(): void {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    private grecaptchaScriptLoaded(): boolean {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    private getLanguageParam(hl?: string): string {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n\r\n        return `&hl=${hl}`;\r\n    }\r\n\r\n    /**\r\n    * Url to google api script\r\n    */\r\n    private getCaptchaScriptUrl(useGlobalDomain: boolean, render: string, language?: string): string {\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\r\n\r\n  /**\r\n   * This size representing invisible captcha\r\n   */\r\n  protected readonly size = 'invisible';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n   * Badge\r\n   */\r\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  @ViewChild('captchaWrapperElem', { static: false }) captchaWrapperElem: ElementRef;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\r\n  execute(): void {\r\n    // execute captcha\r\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n  }\r\n\r\n  /**\r\n  * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'badge': this.badge,\r\n      'type': this.type,\r\n      'tabindex': this.tabIndex,\r\n      'size': this.size,\r\n      'theme': this.theme\r\n    };\r\n  }\r\n\r\n\r\n}\r\n\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha2',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ReCaptcha2Component),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n  * Name of the global expire callback\r\n  */\r\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n\r\n  /**\r\n  * Name of the global error callback\r\n  */\r\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n  * Size\r\n  */\r\n  @Input() size: 'compact' | 'normal' = 'normal';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  @ViewChild('captchaWrapperElem', { static: false}) captchaWrapperElem: ElementRef;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService,\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    window[this.windowOnErrorCallbackProperty] = {};\r\n    window[this.windowOnExpireCallbackProperty] = {};\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n    this.registerCallbacks();\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'theme': this.theme,\r\n      'type': this.type,\r\n      'size': this.size,\r\n      'tabindex': this.tabIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers global callbacks\r\n  */\r\n  private registerCallbacks(): void {\r\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n  }\r\n}\r\n\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class ReCaptchaV3Service {\r\n  constructor(protected scriptService: ScriptService, protected zone: NgZone) {}\r\n\r\n  /**\r\n   * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n   * this callback in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   */\r\n  execute(\r\n    siteKey: string,\r\n    action: string,\r\n    callback: (token: string) => void,\r\n    config?: {\r\n      useGlobalDomain: boolean;\r\n    }\r\n  ): void {\r\n    this.executeAsPromise(siteKey, action, config).then(callback);\r\n  }\r\n\r\n  /**\r\n   * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n   * this token in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   */\r\n  executeAsPromise(\r\n    siteKey: string,\r\n    action: string,\r\n    config?: {\r\n      useGlobalDomain: boolean;\r\n    }\r\n  ): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n\r\n      const onRegister = grecaptcha => {\r\n        this.zone.runOutsideAngular(() => {\r\n          try {\r\n            grecaptcha\r\n              .execute(siteKey, { action })\r\n              .then(token => this.zone.run(() => resolve(token)));\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      };\r\n\r\n      this.scriptService.registerCaptchaScript(\r\n        useGlobalDomain,\r\n        siteKey,\r\n        onRegister\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\r\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\r\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\r\nimport { ScriptService } from './services/script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    ReCaptchaV3Service\r\n  ],\r\n  exports: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ]\r\n})\r\nexport class NgxCaptchaModule {\r\n}\r\n\r\n\r\n"]}