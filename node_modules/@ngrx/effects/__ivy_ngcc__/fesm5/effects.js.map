{"version":3,"file":"effects.js","sources":["../../../../../../modules/effects/src/models.ts","../../../../../../modules/effects/src/effect_creator.ts","../../../../../../modules/effects/src/utils.ts","../../../../../../modules/effects/src/effect_decorator.ts","../../../../../../modules/effects/src/effects_metadata.ts","../../../../../../modules/effects/src/effects_resolver.ts","../../../../../../modules/effects/src/actions.ts","../../../../../../modules/effects/src/effect_notification.ts","../../../../../../modules/effects/src/lifecycle_hooks.ts","../../../../../../modules/effects/src/effect_sources.ts","../../../../../../modules/effects/src/tokens.ts","../../../../../../modules/effects/src/effects_runner.ts","../../../../../../modules/effects/src/effects_root_module.ts","../../../../../../modules/effects/src/effects_feature_module.ts","../../../../../../modules/effects/src/effects_module.ts","../../../../../../modules/effects/src/act.ts","../../../../../../modules/effects/index.ts","../../../../../../modules/effects/effects.ts"],"names":["tslib_1.__extends","tslib_1.__param"],"mappings":";;;;;;;;;;;;;;AAeO,IAAM,qBAAqB,GAAqC;AACvE,IAAE,QAAQ,EAAE,IAAI;AAChB,IAAE,kBAAkB,EAAE,IAAI;AAC1B,CAAC,CAAC;AAEK,IAAM,0BAA0B,GAAG,0BAA0B,CAAC;AACrE;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAgB,YAAY,CAK1B,MAAe,EAAE,MAAmB;AAAI,IACxC,IAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAC1B,IAAE,IAAM,KAAK,gBACN,qBAAqB,EACrB,MAAM,CACV,CAAC;AACJ,IAAE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,0BAA0B,EAAE;AAC5D,QAAI,KAAK,OAAA;AACT,KAAG,CAAC,CAAC;AACL,IAAE,OAAO,MAA8C,CAAC;AACxD,CAAC;AAED,SAAgB,uBAAuB,CAErC,QAAW;AAAI,IACf,IAAM,aAAa,GAAG,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAmB,CAAC;AAC/E,IACE,IAAM,QAAQ,GAAwB,aAAa;AACrD,SAAK,MAAM,CACL,UAAA,YAAY;AAClB,QAAQ,OAAA,QAAQ,CAAC,YAAY,CAAC;AAC9B,YAAQ,QAAQ,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,0BAA0B,CAAC;AACxE,KADwE,CACpE;AACL,SAAK,GAAG,CAAC,UAAA,YAAY;AAAI,QACnB,IAAM,QAAQ,GAAI,QAAQ,CAAC,YAAY,CAAS,CAC9C,0BAA0B,CAC3B,CAAC;AACR,QAAM,kBACE,YAAY,cAAA,IACT,QAAQ,EACX;AACR,KAAK,CAAC,CAAC;AACP,IACE,OAAO,QAAQ,CAAC;AAClB,CAAC;AACD;AAAC,SCpFe,oBAAoB,CAAI,QAAW;AAAI,IACrD,OAAO,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AACzC,CAAC;AACD;ACOA,IAAM,YAAY,GAAG,mBAAmB,CAAC;AAEzC,SAAgB,MAAM,CAAC,MAAyB;AAChD,IADuB,uBAAA,EAAA,WAAyB;AAChD,IAAE,OAAO,UACL,MAAS,EACT,YAAe;AAChB,QACC,IAAM,QAAQ,gBACT,qBAAqB,EACrB,MAAM;AACb,YAAI,YAAY,cAAA,GACb,CAAC;AACN,QAAI,sBAAsB,CAAI,MAAM,EAAE,QAAQ,CAAC,CAAC;AAChD,KAAG,CAAC;AACJ,CAAC;AAED,SAAgB,0BAA0B,CACxC,QAAW;AACV,IACD,IAAM,iBAAiB,GAAwB,OAAO,CACpD,wBAAwB,EACxB,oBAAoB,CACrB,CAAC,QAAQ,CAAC,CAAC;AACd,IACE,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AACD;AACG;AAC2E;AAChE;AAEd,SAAS,kBAAkB,CACzB,WAAc;AACb,IAKD,OAAO,WAAW,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;AAC9D,CAAC;AACD;AAEA,SAAS,sBAAsB,CAC7B,WAAc,EACd,QAA2B;AAC1B,IACD,IAAI,kBAAkB,CAAC,WAAW,CAAC,EAAE;AACvC,QAAI,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACzD,KAAG;AAAC,SAAK;AACT,QAAI,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,YAAY,EAAE;AACjE,YAAM,KAAK,EAAE,CAAC,QAAQ,CAAC;AACvB,SAAK,CAAC,CAAC;AACP,KAAG;AACH,CAAC;AAED,SAAS,wBAAwB,CAC/B,WAAc;AACb,IACD,OAAO,kBAAkB,CAAC,WAAW,CAAC;AACxC,UAAM,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC;AAC3C,UAAM,EAAE,CAAC;AACT,CAAC;AACD;AAAC,SCpEe,kBAAkB,CAAI,QAAW;AAAI,IACnD,OAAO,iBAAiB,CAAC,QAAQ,CAAC,CAAC,MAAM,CACvC,UACE,GAAuB,EACvB,EAA8C;AACjD,YADK,8BAAY,EAAE,sBAAQ,EAAE,0CAAkB;AAAE,QAE9C,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,UAAA,EAAE,kBAAkB,oBAAA,EAAE,CAAC;AAC3D,QAAM,OAAO,GAAG,CAAC;AACjB,KAAK,EACD,EAAE,CACH,CAAC;AACJ,CAAC;AAED,SAAgB,iBAAiB,CAAI,QAAW;AAAI,IAClD,IAAM,OAAO,GAAgD;AAC/D,QAAI,0BAA0B;AAC9B,QAAI,uBAAuB;AAC3B,KAAG,CAAC;AACJ,IACE,OAAO,OAAO,CAAC,MAAM,CACnB,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAA,EACrD,EAAE,CACH,CAAC;AACJ,CAAC;AACD;AAAC,SCnBe,YAAY,CAC1B,cAAmB,EACnB,YAA2B;AAC1B,IACD,IAAM,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;AAC3E,IACE,IAAM,YAAY,GAAsB,iBAAiB,CAAC,cAAc,CAAC,CAAC,GAAG,CAC3E,UAAC,EAIA;AAAI,YAHH,8BAAY,EACZ,sBAAQ,EACR,0CAAkB;AACxB,QACM,IAAM,WAAW,GACf,OAAO,cAAc,CAAC,YAAY,CAAC,KAAK,UAAU;AAC1D,cAAY,cAAc,CAAC,YAAY,CAAC,EAAE;AAC1C,cAAY,cAAc,CAAC,YAAY,CAAC,CAAC;AACzC,QACM,IAAM,eAAe,GAAG,kBAAkB;AAChD,cAAU,wBAAwB,CAAC,WAAW,EAAE,YAAY,CAAC;AAC7D,cAAU,WAAW,CAAC;AACtB,QACM,IAAI,QAAQ,KAAK,KAAK,EAAE;AAC9B,YAAQ,OAAO,eAAe,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;AACtD,SAAO;AACP,QACM,IAAM,aAAa,GAAG,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAChE,QACM,OAAO,aAAa,CAAC,IAAI,CACvB,GAAG,CACD,UAAC,YAAkC,IAAyB,QAAC;AACvE,YAAY,MAAM,EAAE,cAAc,CAAC,YAAY,CAAC;AAChD,YAAY,YAAY,cAAA;AACxB,YAAY,YAAY,cAAA;AACxB,YAAY,UAAU,YAAA;AACtB,YAAY,cAAc,gBAAA;AAC1B,SAAW,IAAC,CACH,CACF,CAAC;AACR,KAAK,CACF,CAAC;AACJ,IACE,OAAO,KAAK,wBAAI,YAAY,GAAE;AAChC,CAAC;AAED,SAAS,wBAAwB,CAC/B,WAA0B,EAC1B,YAA2B;AAC1B,IACD,OAAO,WAAW,CAAC,IAAI,CACrB,UAAU,CAAC,UAAA,KAAK;AAAI,QAClB,IAAI,YAAY;AAAE,YAAA,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxD;AACE,QAAI,OAAO,wBAAwB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AACjE,KAAK,CAAC,CACH,CAAC;AACJ,CAAC;AACD;AAAC;AAAiD,ICtDTA,2BAAa;AAAC,IACrD,iBAA2C,MAAsB;AACnE,QADE,YACE,iBAAO,SAKR;AACH,QAJI,IAAI,MAAM,EAAE;AAChB,YAAM,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC3B,SAAK;AACL;AAEiB,KAFd;AACH,gBARa,OAAO;AAAE,IASpB,sBAAI,GAAJ,UAAQ,QAAwB;AAAI,QAClC,IAAM,UAAU,GAAG,IAAI,SAAO,EAAK,CAAC;AACxC,QAAI,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;AAC7B,QAAI,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACnC,QAAI,OAAO,UAAU,CAAC;AACtB,KAAG;AACF;AAEgB,IAjBJ,OAAO,oCADnB,UAAU,EAAE,rBACL,CACOC,WAAA,MAAM,CAAC,qBAAqB,CAAC,CAAA;AAAE,yCAAQ,UAAU;AAAG,OADtD,OAAO,CAenB;;;;;;;;kCACD;AACA,IAFA,cAAC;AAED,CAFC,CAfwC,UAAU,GAelD;AACD,SA2FgB,MAAM;AACnB,IAAD,sBAA+D;AACjE,SADE,UAA+D,EAA/D,qBAA+D,EAA/D,IAA+D;AAC9D,QADD,iCAA+D;AACjE;AAAM,IACJ,OAAO,MAAM,CAAC,UAAC,MAAc;AAAI,QAC/B,OAAA,YAAY,CAAC,IAAI,CAAC,UAAA,mBAAmB;AAAI,YACvC,IAAI,OAAO,mBAAmB,KAAK,QAAQ,EAAE;AACnD;AACQ,gBAAA,OAAO,mBAAmB,KAAK,MAAM,CAAC,IAAI,CAAC;AACnD,aAAO;AACP;AAEK,YAAC,OAAO,mBAAmB,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC;AACtD,SAAK,CAAC;AACL,KADK,CACH,CAAC;AACJ,CAAC;AACD;AAAC,SCzHe,oBAAoB,CAClC,MAA0B,EAC1B,QAAsB;AACrB,IACD,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,KAAK,GAAG,EAAE;AACxC,QAAI,IAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;AAC7C,QAAI,IAAM,eAAe,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC9C,QACI,IAAI,eAAe,EAAE;AACzB,YAAM,QAAQ,CAAC,WAAW,CAClB,IAAI,KAAK,CACP,YAAU,aAAa,CACrB,MAAM,CACP,uCAAkC,SAAS,CAAC,MAAM,CAAG,CACvD,CACF,CAAC;AACR,SAAK;AACL,KAAG;AACH,CAAC;AAED,SAAS,QAAQ,CAAC,MAAW;AAAI,IAC/B,QACE,OAAO,MAAM,KAAK,UAAU;AAChC,QAAI,MAAM;AACV,QAAI,MAAM,CAAC,IAAI;AACf,QAAI,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,EAC/B;AACJ,CAAC;AAED,SAAS,aAAa,CAAC,EAIF;AACrB,QAJE,8BAAY,EACZ,kCAAc,EACd,0BAAU;AACZ,IACE,IAAM,QAAQ,GAAG,OAAO,cAAc,CAAC,YAAY,CAAC,KAAK,UAAU,CAAC;AACtE,IACE,OAAO,OAAI,UAAU,SAAI,MAAM,CAAC,YAAY,CAAC,IAAG,QAAQ,GAAG,IAAI,GAAG,EAAE,QAAG,CAAC;AAC1E,CAAC;AAED,SAAS,SAAS,CAAC,MAAiC;AACpD,IAAE,IAAI;AACN,QAAI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAClC,KAAG;AAAC,IAAA,WAAM;AACV,QAAI,OAAO,MAAM,CAAC;AAClB,KAAG;AACH,CAAC;AACD;ACtBO,IAAM,oBAAoB,GAC/B,uBAAuB,CAAC;AAuCnB,IAAM,eAAe,GAAuB,kBAAkB,CAAC;AA8B/D,IAAM,aAAa,GAAwB,mBAAmB,CAAC;AACtE;AAAC;AAAuD,ICjFrBD,iCAAY;AAAC,IAC9C,uBAAoB,YAA0B,EAAU,KAAiB;AAC3E,QADE,YACE,iBAAO,SACR;AACH,QAHsB,kBAAY,GAAZ,YAAY,CAAc;AAAC,QAAS,WAAK,GAAL,KAAK,CAAY;AAAC;AAI3E,KAFE;AACH,IACE,kCAAU,GAAV,UAAW,oBAAyB;AAAI,QACtC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACpC,QACI,IACE,aAAa,IAAI,oBAAoB;AAC3C,YAAM,OAAO,oBAAoB,CAAC,aAAa,CAAC,KAAK,UAAU,EACzD;AACN,YAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,oBAAoB,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AACjE,SAAK;AACL,KAAG;AAEH;AACE;AACE;AACE,IAAJ,iCAAS,GAAT;AAAc,QAAd,iBAmBC;AACH,QAnBI,OAAO,IAAI,CAAC,IAAI,CACd,OAAO,CAAC,oBAAoB,CAAC,EAC7B,QAAQ,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,GAAA,CAAC,EAC3D,QAAQ,CAAC,UAAA,OAAO;AACtB,YAAQ,OAAA,OAAO,CAAC,IAAI,CACV,UAAU,CAAC,mBAAmB,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC,EAClD,GAAG,CAAC,UAAA,MAAM;AAAI,gBACZ,oBAAoB,CAAC,MAAM,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;AAC5D,gBAAY,OAAO,MAAM,CAAC,YAAY,CAAC;AACvC,aAAW,CAAC,EACF,MAAM,CACJ,UAAC,YAAY;AAAI,gBACf,OAAA,YAAY,CAAC,IAAI,KAAK,GAAG;AACtC,aADsC,CAC5B,EACD,aAAa,EAAE,CAChB;AACR,SADQ,CACF,CACF,CAAC;AACN,KAAG;AACF,IAvCY,aAAa,wBADzB,UAAU,EAAE,rBACL,kCAC4B,YAAY,EAAiB,KAAK;AAAG,OAD5D,aAAa,CAuCzB;;;;;qGACD;AACA,IAFA,oBAAC;AAED,CAFC,CAvCkC,OAAO,GAuCzC;AAED,SAAS,eAAe,CAAC,cAAmB;AAC5C,IAAE,IACE,oBAAoB,IAAI,cAAc;AAC1C,QAAI,OAAO,cAAc,CAAC,oBAAoB,CAAC,KAAK,UAAU,EAC1D;AACJ,QAAI,OAAO,cAAc,CAAC,oBAAoB,CAAC,EAAE,CAAC;AAClD,KAAG;AACH,IACE,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,SAAS,mBAAmB,CAC1B,YAA0B;AACzB,IACD,OAAO,UAAA,cAAc;AAAI,QACvB,IAAM,cAAc,GAAG,YAAY,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;AACtE,QACI,IAAI,cAAc,CAAC,cAAc,CAAC,EAAE;AACxC,YAAM,OAAO,cAAc,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;AAC7D,SAAK;AACL,QACI,OAAO,cAAc,CAAC;AAC1B,KAAG,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CACrB,cAAqC;AACpC,IACD,IAAM,MAAM,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC;AACtD,IACE,QACE,eAAe,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,eAAe,CAAC,KAAK,UAAU,EAC1E;AACJ,CAAC;AACD;AAAC,ICnGY,mBAAmB,GAAG,IAAI,cAAc,CACnD,mCAAmC,CACpC,CAAC;AACK,IAAM,iBAAiB,GAAG,IAAI,cAAc,CACjD,iCAAiC,CAClC,CAAC;AACF,IAAa,YAAY,GAAG,IAAI,cAAc,CAC5C,4BAA4B,CAC7B,CAAC;AACF,IAAa,eAAe,GAAG,IAAI,cAAc,CAC/C,+BAA+B,CAChC;AACD;AAAC;AAAiD,ICJhD,uBACU,aAA4B,EAC5B,KAAiB;AAC1B,QAFS,kBAAa,GAAb,aAAa,CAAe;AAAC,QAC7B,UAAK,GAAL,KAAK,CAAY;AAC7B,QALU,wBAAmB,GAAwB,IAAI,CAAC;AAC1D,KAIM;AACN,IACE,6BAAK,GAAL;AACE,QAAA,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;AACnC,YAAM,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,aAAa;AACnD,iBAAS,SAAS,EAAE;AACpB,iBAAS,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/B,SAAK;AACL,KAAG;AAEH,IAAE,mCAAW,GAAX;AAAc,QACZ,IAAI,IAAI,CAAC,mBAAmB,EAAE;AAClC,YAAM,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;AAC7C,YAAM,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;AACtC,SAAK;AACL,KAAG;AACF,IAtBY,aAAa,wBADzB,UAAU,EAAE,rBACL,kCAImB,aAAa;AACxC,YAAmB,KAAK;AAAG,OALd,aAAa,CAsBzB;;;;;+FACD;AAAC,IADD,oBAAC;AACA,CAvBD;AAAK;AAAC,ICKO,iBAAiB,GAAG,oBAAoB,CAAC;AACtD,IAAa,eAAe,GAAG,YAAY,CAAC,iBAAiB,CAAC,CAAC;AAG/D;AAEK,IADH,2BACU,OAAsB,EAC9B,MAAqB,EACrB,KAAiB,EACK,WAAkB,EAC5B,eAAgC,EAChC,kBAAsC,EAGlD,KAAU;AACX,QATS,YAAO,GAAP,OAAO,CAAe;AAAC,QAU/B,MAAM,CAAC,KAAK,EAAE,CAAC;AACnB,QACI,WAAW,CAAC,OAAO,CAAC,UAAA,oBAAoB;AAC5C,YAAM,OAAA,OAAO,CAAC,UAAU,CAAC,oBAAoB,CAAC;AAC7C,SAD6C,CACzC,CAAC;AACN,QACI,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;AAChD,KAAG;AACH,IACE,sCAAU,GAAV,UAAW,oBAAyB;AACtC,QAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;AAClD,KAAG;AACF,IAxBY,iBAAiB,wBAD7B,QAAQ,CAAC,EAAE,CAAC,rBACL,CAKHC,WAAA,MAAM,CAAC,YAAY,CAAC,CAAA;AAAE,QACtBA,WAAA,QAAQ,EAAE,CAAA;AAAE,QACZA,WAAA,QAAQ,EAAE,CAAA;AAAE,QACZA,WAAA,QAAQ,EAAE,CAAA;AACd,QAAIA,WAAA,MAAM,CAAC,mBAAmB,CAAC,CAAA;AAC/B,yCARoB,aAAa;AAClC,YAAY,aAAa;AACzB,YAAW,KAAK,SAEiB,eAAe;AAChD,YAAoC,kBAAkB;AAC7C,OARI,iBAAiB,CAwB7B;;;;;;;;;;;;;;;;;;kCACD;AAAC,IADD,wBAAC;AACA,CAzBD;AAAK;AAAC;AAEQ,ICXZ,8BACE,IAAuB,EACE,kBAA2B,EACxC,eAAgC,EAChC,kBAAsC;AACnD,QACC,kBAAkB,CAAC,OAAO,CAAC,UAAA,KAAK;AACpC,YAAM,OAAA,KAAK,CAAC,OAAO,CAAC,UAAA,oBAAoB;AACxC,gBAAQ,OAAA,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC;AAC5C,aAD4C,CACtC;AACN,SADM,CACF,CAAC;AACN,KAAG;AACH,IAba,oBAAoB,wBADhC,QAAQ,CAAC,EAAE,CAAC,rBACL,CAGHA,WAAA,MAAM,CAAC,eAAe,CAAC,CAAA;AAAE,QACzBA,WAAA,QAAQ,EAAE,CAAA;AAAE,QACZA,WAAA,QAAQ,EAAE,CAAA;AAAE,yCAHP,iBAAiB,SAEM,eAAe;AAChD,YAAoC,kBAAkB;AACpD,OANW,oBAAoB,CAahC;;;;;;;;;;;;;kCACD;AAAC,IADD,2BAAC;AACA,CAdD;AAAK;AAAC;AAEF,ICOJ;AAA2B,KAyC1B;AACD,IAzCS,wBAAU,GAAjB,UACE,cAA2B;AAC5B,QACC,OAAO;AACX,YAAM,QAAQ,EAAE,oBAAoB;AACpC,YAAM,SAAS,EAAE;AACjB,gBAAQ,cAAc;AACtB,gBAAQ;AACR,oBAAU,OAAO,EAAE,eAAe;AAClC,oBAAU,KAAK,EAAE,IAAI;AACrB,oBAAU,IAAI,EAAE,cAAc;AAC9B,oBAAU,UAAU,EAAE,qBAAqB;AAC3C,iBAAS;AACT,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AAEH,IAAS,qBAAO,GAAd,UACE,WAAwB;AACzB,QACC,OAAO;AACX,YAAM,QAAQ,EAAE,iBAAiB;AACjC,YAAM,SAAS,EAAE;AACjB,gBAAQ;AACR,oBAAU,OAAO,EAAE,mBAAmB;AACtC,oBAAU,UAAU,EAAE,oBAAoB;AAC1C,oBAAU,IAAI,EAAE,CAAC,CAAC,aAAa,EAAE,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,CAAC,CAAC;AACjE,iBAAS;AACT,gBAAQ,aAAa;AACrB,gBAAQ,aAAa;AACrB,gBAAQ,OAAO;AACf,gBAAQ,WAAW;AACnB,gBAAQ;AACR,oBAAU,OAAO,EAAE,YAAY;AAC/B,oBAAU,IAAI,EAAE,WAAW;AAC3B,oBAAU,UAAU,EAAE,qBAAqB;AAC3C,iBAAS;AACT,aAAO;AACP,SAAK,CAAC;AACN,KAAG;IAxCU,aAAa,wBADzB,QAAQ,CAAC,EAAE,CAAC,QACA;GAAa,CAyCzB;;;;gDACD;AACA,IAFA,oBAAC;AAED,CA3CA,IAyCC;AACD,SACgB,qBAAqB;AAAK,IAAJ,mBAAmB;AAAC,SAApB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;AACzD,QADsC,8BAAmB;AAAC;AACvD,IAAD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAgB,oBAAoB,CAAC,MAAqB;AAAI,IAC5D,IAAI,MAAM,EAAE;AACd,QAAI,MAAM,IAAI,SAAS,CACjB,sGAAsG,CACvG,CAAC;AACN,KAAG;AACH,IAAE,OAAO,SAAS,CAAC;AACnB,CAAC;AACD;AAAC,SCQe,GAAG;AACnB;AAOE,eAQ+D,EAC/D,OAAmD;AAClD,IAKK,IAAA;AAA2C;AAClD;AAAsC;AAExB;AACH;AACM;AACK;AACrB,4FAE6E,EATrE,oBAAO,EAAE,gBAAK,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,4BASiC,CAAC;AAChF,IAME,OAAO,UAAA,MAAM;AACf,QAAI,OAAA,KAAK,CACH;AAAc,YACZ,IAAM,OAAO,GAAG,IAAI,OAAO,EAAqB,CAAC;AACzD,YAAQ,OAAO,KAAK,CACV,MAAM,CAAC,IAAI,CACT,QAAQ,CAAC,UAAC,KAAK,EAAE,KAAK;AAAI,gBACxB,OAAA,KAAK,CAAC;AACd,oBAAU,IAAI,SAAS,GAAG,KAAK,CAAC;AACtC,oBAAgB,IAAI,OAAO,GAAG,KAAK,CAAC;AACpC,oBAAgB,IAAI,cAAc,GAAG,CAAC,CAAC;AACvC,oBAAgB,OAAO,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,IAAI,CAC/B,WAAW,EAAE,EACb,GAAG,CACD,UAAC,YAAY;AAAI,wBACf,QAAQ,YAAY,CAAC,IAAI;AAC/C,4BAAwB,KAAK,GAAG;AAChC,gCAA0B,OAAO,GAAG,IAAI,CAAC;AACzC,gCAA0B,OAAO,IAAI,YAAY;AACjD;AACI,gCAAwB,GAAU,EACV,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CACjC,CAAC;AAC5B,4BAAwB,KAAK,GAAG;AAChC,gCAA0B,SAAS,GAAG,IAAI,CAAC;AAC3C,gCAA0B,OAAO,QAAQ;AACzC,sCAA8B,IAAI,YAAY;AAC9C;AACI,oCAA4B,GAAU,EACV,QAAQ,CAAC,cAAc,EAAE,KAAK,CAAC,CAChC;AAC/B,sCAA8B,SAAS,CAAC;AACxC,4BAAwB;AACxB,gCAA0B,EAAE,cAAc,CAAC;AAC3C,gCAA0B,OAAO,YAAY,CAAC;AAC9C,yBAAuB;AACvB,qBAAqB,CACF,EACD,MAAM,CAAC,UAAC,CAAC,IAAiC,OAAA,CAAC,IAAI,IAAI,GAAA,CAAC,EACpD,aAAa,EAAE,EACf,QAAQ,CAAC;AACrB,wBAAc,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,IAAI,WAAW,EAAE;AAC/D,4BAAsB,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC;AACvE,yBAAqB;AACrB,qBAAmB,CAAC,CACH,CAAC;AAClB,iBAAe,CAAC;AACf,aADe,CACH,CACF,EACD,OAAO,CACR,CAAC;AACV,SAAO,CACF;AACL,KADK,CAAC;AACN,CAAC;AACD;AC3KA;AACA;AACA;AACA;AACA,GAAG;AACH;ACLA;AACA;AACA,GAAG;AACH;AACA;AAKmN","sourcesContent":["/**\n * Configures an effect created by `createEffect`.\n */\nexport interface EffectConfig {\n  /**\n   * Determines if the action emitted by the effect is dispatched to the store.\n   * If false, effect does not need to return type `Observable<Action>`.\n   */\n  dispatch?: boolean;\n  /**\n   * Determines if the effect will be resubscribed to if an error occurs in the main actions stream.\n   */\n  resubscribeOnError?: boolean;\n}\n\nexport const DEFAULT_EFFECT_CONFIG: Readonly<Required<EffectConfig>> = {\n  dispatch: true,\n  resubscribeOnError: true,\n};\n\nexport const CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\nexport interface CreateEffectMetadata {\n  [CREATE_EFFECT_METADATA_KEY]: EffectConfig;\n}\n\nexport type EffectPropertyKey<T extends Object> = Exclude<\n  keyof T,\n  keyof Object\n>;\n\nexport interface EffectMetadata<T extends Object>\n  extends Required<EffectConfig> {\n  propertyName: EffectPropertyKey<T>;\n}\n\nexport type EffectsMetadata<T> = {\n  [key in EffectPropertyKey<T>]?: EffectConfig\n};\n","import { Observable } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport {\n  EffectMetadata,\n  EffectConfig,\n  DEFAULT_EFFECT_CONFIG,\n  CreateEffectMetadata,\n  CREATE_EFFECT_METADATA_KEY,\n} from './models';\n\ntype DispatchType<T> = T extends { dispatch: infer U } ? U : true;\ntype ObservableType<T, OriginalType> = T extends false ? OriginalType : Action;\n/**\n * @description\n * Creates an effect from an `Observable` and an `EffectConfig`.\n *\n * @param source A function which returns an `Observable`.\n * @param config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `resubscribeOnError` is true.\n * @returns If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n *\n * @usageNotes\n *\n * ** Mapping to a different action **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     map(() => FeatureActions.actionTwo())\n *   )\n * );\n * ```\n *\n *  ** Non-dispatching effects **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     tap(() => console.log('Action One Dispatched'))\n *   ),\n *   { dispatch: false }\n *   // FeatureActions.actionOne is not dispatched\n * );\n * ```\n */\nexport function createEffect<\n  C extends EffectConfig,\n  DT extends DispatchType<C>,\n  OT extends ObservableType<DT, OT>,\n  R extends Observable<OT> | ((...args: any[]) => Observable<OT>)\n>(source: () => R, config?: Partial<C>): R & CreateEffectMetadata {\n  const effect = source();\n  const value: EffectConfig = {\n    ...DEFAULT_EFFECT_CONFIG,\n    ...config, // Overrides any defaults if values are provided\n  };\n  Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n    value,\n  });\n  return effect as typeof effect & CreateEffectMetadata;\n}\n\nexport function getCreateEffectMetadata<\n  T extends { [props in keyof T]: Object }\n>(instance: T): EffectMetadata<T>[] {\n  const propertyNames = Object.getOwnPropertyNames(instance) as Array<keyof T>;\n\n  const metadata: EffectMetadata<T>[] = propertyNames\n    .filter(\n      propertyName =>\n        instance[propertyName] &&\n        instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)\n    )\n    .map(propertyName => {\n      const metaData = (instance[propertyName] as any)[\n        CREATE_EFFECT_METADATA_KEY\n      ];\n      return {\n        propertyName,\n        ...metaData,\n      };\n    });\n\n  return metadata;\n}\n","export function getSourceForInstance<T>(instance: T): T {\n  return Object.getPrototypeOf(instance);\n}\n","import { compose } from '@ngrx/store';\n\nimport {\n  DEFAULT_EFFECT_CONFIG,\n  EffectConfig,\n  EffectMetadata,\n  EffectPropertyKey,\n} from './models';\nimport { getSourceForInstance } from './utils';\n\nconst METADATA_KEY = '__@ngrx/effects__';\n\nexport function Effect(config: EffectConfig = {}) {\n  return function<T extends Object, K extends EffectPropertyKey<T>>(\n    target: T,\n    propertyName: K\n  ) {\n    const metadata: EffectMetadata<T> = {\n      ...DEFAULT_EFFECT_CONFIG,\n      ...config, // Overrides any defaults if values are provided\n      propertyName,\n    };\n    addEffectMetadataEntry<T>(target, metadata);\n  };\n}\n\nexport function getEffectDecoratorMetadata<T>(\n  instance: T\n): EffectMetadata<T>[] {\n  const effectsDecorators: EffectMetadata<T>[] = compose(\n    getEffectMetadataEntries,\n    getSourceForInstance\n  )(instance);\n\n  return effectsDecorators;\n}\n\n/**\n * Type guard to detemine whether METADATA_KEY is already present on the Class\n * constructor\n */\nfunction hasMetadataEntries<T extends Object>(\n  sourceProto: T\n): sourceProto is typeof sourceProto & {\n  constructor: typeof sourceProto.constructor & {\n    [METADATA_KEY]: EffectMetadata<T>[];\n  };\n} {\n  return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n}\n\n/** Add Effect Metadata to the Effect Class constructor under specific key */\nfunction addEffectMetadataEntry<T extends object>(\n  sourceProto: T,\n  metadata: EffectMetadata<T>\n) {\n  if (hasMetadataEntries(sourceProto)) {\n    sourceProto.constructor[METADATA_KEY].push(metadata);\n  } else {\n    Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n      value: [metadata],\n    });\n  }\n}\n\nfunction getEffectMetadataEntries<T extends object>(\n  sourceProto: T\n): EffectMetadata<T>[] {\n  return hasMetadataEntries(sourceProto)\n    ? sourceProto.constructor[METADATA_KEY]\n    : [];\n}\n","import { EffectMetadata, EffectsMetadata } from './models';\nimport { getCreateEffectMetadata } from './effect_creator';\nimport { getEffectDecoratorMetadata } from './effect_decorator';\n\nexport function getEffectsMetadata<T>(instance: T): EffectsMetadata<T> {\n  return getSourceMetadata(instance).reduce(\n    (\n      acc: EffectsMetadata<T>,\n      { propertyName, dispatch, resubscribeOnError }\n    ) => {\n      acc[propertyName] = { dispatch, resubscribeOnError };\n      return acc;\n    },\n    {}\n  );\n}\n\nexport function getSourceMetadata<T>(instance: T): EffectMetadata<T>[] {\n  const effects: Array<(instance: T) => EffectMetadata<T>[]> = [\n    getEffectDecoratorMetadata,\n    getCreateEffectMetadata,\n  ];\n\n  return effects.reduce<EffectMetadata<T>[]>(\n    (sources, source) => sources.concat(source(instance)),\n    []\n  );\n}\n","import { Action } from '@ngrx/store';\nimport { merge, Notification, Observable } from 'rxjs';\nimport { ignoreElements, map, materialize, catchError } from 'rxjs/operators';\n\nimport { EffectNotification } from './effect_notification';\nimport { getSourceMetadata } from './effects_metadata';\nimport { getSourceForInstance } from './utils';\nimport { ErrorHandler } from '@angular/core';\n\nexport function mergeEffects(\n  sourceInstance: any,\n  errorHandler?: ErrorHandler\n): Observable<EffectNotification> {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const observables$: Observable<any>[] = getSourceMetadata(sourceInstance).map(\n    ({\n      propertyName,\n      dispatch,\n      resubscribeOnError,\n    }): Observable<EffectNotification> => {\n      const observable$: Observable<any> =\n        typeof sourceInstance[propertyName] === 'function'\n          ? sourceInstance[propertyName]()\n          : sourceInstance[propertyName];\n\n      const resubscribable$ = resubscribeOnError\n        ? resubscribeInCaseOfError(observable$, errorHandler)\n        : observable$;\n\n      if (dispatch === false) {\n        return resubscribable$.pipe(ignoreElements());\n      }\n\n      const materialized$ = resubscribable$.pipe(materialize());\n\n      return materialized$.pipe(\n        map(\n          (notification: Notification<Action>): EffectNotification => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n          })\n        )\n      );\n    }\n  );\n\n  return merge(...observables$);\n}\n\nfunction resubscribeInCaseOfError<T extends Action>(\n  observable$: Observable<T>,\n  errorHandler?: ErrorHandler\n): Observable<T> {\n  return observable$.pipe(\n    catchError(error => {\n      if (errorHandler) errorHandler.handleError(error);\n      // Return observable that produces this particular effect\n      return resubscribeInCaseOfError(observable$, errorHandler);\n    })\n  );\n}\n","import { Inject, Injectable } from '@angular/core';\nimport {\n  Action,\n  ActionCreator,\n  Creator,\n  ScannedActionsSubject,\n} from '@ngrx/store';\nimport { Observable, OperatorFunction, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable()\nexport class Actions<V = Action> extends Observable<V> {\n  constructor(@Inject(ScannedActionsSubject) source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n\n  lift<R>(operator: Operator<V, R>): Observable<R> {\n    const observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n}\n\n// Module-private helper type\ntype ActionExtractor<\n  T extends string | AC,\n  AC extends ActionCreator<string, Creator>,\n  E\n> = T extends string ? E : ReturnType<Extract<T, AC>>;\n/**\n * 'ofType' filters an Observable of Actions into an observable of the actions\n * whose type strings are passed to it.\n *\n * For example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\n * the type of the `Addition` action is `add`, then\n * `actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n */\nexport function ofType<\n  AC extends ActionCreator<string, Creator>[],\n  U extends Action = Action,\n  V = ReturnType<AC[number]>\n>(...allowedTypes: AC): OperatorFunction<U, V>;\n\nexport function ofType<\n  E extends Extract<U, { type: T1 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  U extends Action = Action,\n  V = T1 extends string ? E : ReturnType<Extract<T1, AC>>\n>(t1: T1): OperatorFunction<U, V>;\nexport function ofType<\n  E extends Extract<U, { type: T1 | T2 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2, AC, E>\n>(t1: T1, t2: T2): OperatorFunction<U, V>;\nexport function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3, AC, E>\n>(t1: T1, t2: T2, t3: T3): OperatorFunction<U, V>;\nexport function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 | T4 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  T4 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3 | T4, AC, E>\n>(t1: T1, t2: T2, t3: T3, t4: T4): OperatorFunction<U, V>;\nexport function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 | T4 | T5 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  T4 extends string | AC,\n  T5 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3 | T4 | T5, AC, E>\n>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): OperatorFunction<U, V>;\n/**\n * Fallback for more than 5 arguments.\n * There is no inference, so the return type is the same as the input -\n * Observable<Action>.\n *\n * We provide a type parameter, even though TS will not infer it from the\n * arguments, to preserve backwards compatibility with old versions of ngrx.\n */\nexport function ofType<V extends Action>(\n  ...allowedTypes: Array<string | ActionCreator<string, Creator>>\n): OperatorFunction<Action, V>;\nexport function ofType(\n  ...allowedTypes: Array<string | ActionCreator<string, Creator>>\n): OperatorFunction<Action, Action> {\n  return filter((action: Action) =>\n    allowedTypes.some(typeOrActionCreator => {\n      if (typeof typeOrActionCreator === 'string') {\n        // Comparing the string to type\n        return typeOrActionCreator === action.type;\n      }\n\n      // We are filtering by ActionCreator\n      return typeOrActionCreator.type === action.type;\n    })\n  );\n}\n","import { ErrorHandler } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable } from 'rxjs';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: PropertyKey;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n\nexport function reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      reporter.handleError(\n        new Error(\n          `Effect ${getEffectName(\n            output\n          )} dispatched an invalid action: ${stringify(action)}`\n        )\n      );\n    }\n  }\n}\n\nfunction isAction(action: any): action is Action {\n  return (\n    typeof action !== 'function' &&\n    action &&\n    action.type &&\n    typeof action.type === 'string'\n  );\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\n\nfunction stringify(action: Action | null | undefined) {\n  try {\n    return JSON.stringify(action);\n  } catch {\n    return action;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { EffectNotification } from '.';\nimport { Action } from '@ngrx/store';\n\n/**\n * @description\n * Interface to set an identifier for effect instances.\n *\n * By default, each Effects class is registered\n * once regardless of how many times the Effect class\n * is loaded. By implementing this interface, you define\n * a unique identifier to register an Effects class instance\n * multiple times.\n *\n * @usageNotes\n *\n * ### Set an identifier for an Effects class\n *\n * ```ts\n * class EffectWithIdentifier implements OnIdentifyEffects {\n *  constructor(private effectIdentifier: string) {}\n *\n *  ngrxOnIdentifyEffects() {\n *    return this.effectIdentifier;\n *  }\n *\n * ```\n */\nexport interface OnIdentifyEffects {\n  /**\n   * @description\n   * String identifier to differentiate effect instances.\n   */\n  ngrxOnIdentifyEffects(): string;\n}\n\nexport const onIdentifyEffectsKey: keyof OnIdentifyEffects =\n  'ngrxOnIdentifyEffects';\n\n/**\n * @description\n * Interface to control the lifecycle of effects.\n *\n * By default, effects are merged and subscribed to the store. Implement the OnRunEffects interface to control the lifecycle of the resolved effects.\n *\n * @usageNotes\n *\n * ### Implement the OnRunEffects interface on an Effects class\n *\n * ```ts\n * export class UserEffects implements OnRunEffects {\n *   constructor(private actions$: Actions) {}\n *\n *   ngrxOnRunEffects(resolvedEffects$: Observable<EffectNotification>) {\n *     return this.actions$.pipe(\n *       ofType('LOGGED_IN'),\n *       exhaustMap(() =>\n *         resolvedEffects$.pipe(\n *           takeUntil(this.actions$.pipe(ofType('LOGGED_OUT')))\n *         )\n *       )\n *     );\n *   }\n * }\n * ```\n */\nexport interface OnRunEffects {\n  /**\n   * @description\n   * Method to control the lifecycle of effects.\n   */\n  ngrxOnRunEffects(\n    resolvedEffects$: Observable<EffectNotification>\n  ): Observable<EffectNotification>;\n}\n\nexport const onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n\n/**\n * @description\n * Interface to dispatch an action after effect registration.\n *\n * Implement this interface to dispatch a custom action after\n * the effect has been added. You can listen to this action\n * in the rest of the application to execute something after\n * the effect is registered.\n *\n * @usageNotes\n *\n * ### Set an identifier for an Effects class\n *\n * ```ts\n * class EffectWithInitAction implements OnInitEffects {\n *  ngrxOnInitEffects() {\n *    return { type: '[EffectWithInitAction] Init' };\n *  }\n * ```\n */\nexport interface OnInitEffects {\n  /**\n   * @description\n   * Action to be dispatched after the effect is registered.\n   */\n  ngrxOnInitEffects(): Action;\n}\n\nexport const onInitEffects: keyof OnInitEffects = 'ngrxOnInitEffects';\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { Action, Store } from '@ngrx/store';\nimport { Notification, Observable, Subject } from 'rxjs';\nimport {\n  dematerialize,\n  exhaustMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n} from 'rxjs/operators';\n\nimport {\n  reportInvalidActions,\n  EffectNotification,\n} from './effect_notification';\nimport { mergeEffects } from './effects_resolver';\nimport {\n  onIdentifyEffectsKey,\n  onRunEffectsKey,\n  OnRunEffects,\n  onInitEffects,\n} from './lifecycle_hooks';\nimport { getSourceForInstance } from './utils';\n\n@Injectable()\nexport class EffectSources extends Subject<any> {\n  constructor(private errorHandler: ErrorHandler, private store: Store<any>) {\n    super();\n  }\n\n  addEffects(effectSourceInstance: any): void {\n    this.next(effectSourceInstance);\n\n    if (\n      onInitEffects in effectSourceInstance &&\n      typeof effectSourceInstance[onInitEffects] === 'function'\n    ) {\n      this.store.dispatch(effectSourceInstance[onInitEffects]());\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toActions(): Observable<Action> {\n    return this.pipe(\n      groupBy(getSourceForInstance),\n      mergeMap(source$ => source$.pipe(groupBy(effectsInstance))),\n      mergeMap(source$ =>\n        source$.pipe(\n          exhaustMap(resolveEffectSource(this.errorHandler)),\n          map(output => {\n            reportInvalidActions(output, this.errorHandler);\n            return output.notification;\n          }),\n          filter(\n            (notification): notification is Notification<Action> =>\n              notification.kind === 'N'\n          ),\n          dematerialize()\n        )\n      )\n    );\n  }\n}\n\nfunction effectsInstance(sourceInstance: any) {\n  if (\n    onIdentifyEffectsKey in sourceInstance &&\n    typeof sourceInstance[onIdentifyEffectsKey] === 'function'\n  ) {\n    return sourceInstance[onIdentifyEffectsKey]();\n  }\n\n  return '';\n}\n\nfunction resolveEffectSource(\n  errorHandler: ErrorHandler\n): (sourceInstance: any) => Observable<EffectNotification> {\n  return sourceInstance => {\n    const mergedEffects$ = mergeEffects(sourceInstance, errorHandler);\n\n    if (isOnRunEffects(sourceInstance)) {\n      return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n    }\n\n    return mergedEffects$;\n  };\n}\n\nfunction isOnRunEffects(\n  sourceInstance: Partial<OnRunEffects>\n): sourceInstance is OnRunEffects {\n  const source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const _ROOT_EFFECTS_GUARD = new InjectionToken<void>(\n  '@ngrx/effects Internal Root Guard'\n);\nexport const IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\n\nimport { EffectSources } from './effect_sources';\n\n@Injectable()\nexport class EffectsRunner implements OnDestroy {\n  private effectsSubscription: Subscription | null = null;\n\n  constructor(\n    private effectSources: EffectSources,\n    private store: Store<any>\n  ) {}\n\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport {\n  createAction,\n  StoreModule,\n  Store,\n  StoreRootModule,\n  StoreFeatureModule,\n} from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS, _ROOT_EFFECTS_GUARD } from './tokens';\n\nexport const ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nexport const rootEffectsInit = createAction(ROOT_EFFECTS_INIT);\n\n@NgModule({})\nexport class EffectsRootModule {\n  constructor(\n    private sources: EffectSources,\n    runner: EffectsRunner,\n    store: Store<any>,\n    @Inject(ROOT_EFFECTS) rootEffects: any[],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule,\n    @Optional()\n    @Inject(_ROOT_EFFECTS_GUARD)\n    guard: any\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n\n    store.dispatch({ type: ROOT_EFFECTS_INIT });\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreRootModule, StoreFeatureModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\n\n@NgModule({})\nexport class EffectsFeatureModule {\n  constructor(\n    root: EffectsRootModule,\n    @Inject(FEATURE_EFFECTS) effectSourceGroups: any[][],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Type,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS, _ROOT_EFFECTS_GUARD } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\n\n@NgModule({})\nexport class EffectsModule {\n  static forFeature(\n    featureEffects: Type<any>[]\n  ): ModuleWithProviders<EffectsFeatureModule> {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n\n  static forRoot(\n    rootEffects: Type<any>[]\n  ): ModuleWithProviders<EffectsRootModule> {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        {\n          provide: _ROOT_EFFECTS_GUARD,\n          useFactory: _provideForRootGuard,\n          deps: [[EffectsRunner, new Optional(), new SkipSelf()]],\n        },\n        EffectsRunner,\n        EffectSources,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n}\n\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n\nexport function _provideForRootGuard(runner: EffectsRunner): any {\n  if (runner) {\n    throw new TypeError(\n      `EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.`\n    );\n  }\n  return 'guarded';\n}\n","import { Action } from '@ngrx/store';\nimport {\n  defer,\n  merge,\n  Notification,\n  Observable,\n  OperatorFunction,\n  Subject,\n} from 'rxjs';\nimport {\n  concatMap,\n  dematerialize,\n  filter,\n  finalize,\n  map,\n  materialize,\n} from 'rxjs/operators';\n\n/** Represents config with named paratemeters for act */\nexport interface ActConfig<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action,\n  CompleteAction extends Action,\n  UnsubscribeAction extends Action\n> {\n  // Project function that produces the output actions in success cases\n  project: (input: Input, index: number) => Observable<OutputAction>;\n  // Error handle function for project\n  // error that happened during project execution\n  // input value that project errored with\n  error: (error: any, input: Input) => ErrorAction;\n  // Optional complete action provider\n  // count is the number of actions project emitted before completion\n  // input value that project completed with\n  complete?: (count: number, input: Input) => CompleteAction;\n  // Optional flattening operator\n  operator?: <Input, OutputAction>(\n    project: (input: Input, index: number) => Observable<OutputAction>\n  ) => OperatorFunction<Input, OutputAction>;\n  // Optional unsubscribe action provider\n  // count is the number of actions project emitted before unsubscribing\n  // input value that was unsubscribed from\n  unsubscribe?: (count: number, input: Input) => UnsubscribeAction;\n}\n\n/**\n * Wraps project fn with error handling making it safe to use in Effects.\n * Takes either config with named properties that represent different possible\n * callbacks or project/error callbacks that are required.\n */\nexport function act<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action\n>(\n  project: (input: Input, index: number) => Observable<OutputAction>,\n  error: (error: any, input: Input) => ErrorAction\n): (source: Observable<Input>) => Observable<OutputAction | ErrorAction>;\nexport function act<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action,\n  CompleteAction extends Action = never,\n  UnsubscribeAction extends Action = never\n>(\n  config: ActConfig<\n    Input,\n    OutputAction,\n    ErrorAction,\n    CompleteAction,\n    UnsubscribeAction\n  >\n): (\n  source: Observable<Input>\n) => Observable<\n  OutputAction | ErrorAction | CompleteAction | UnsubscribeAction\n>;\nexport function act<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action,\n  CompleteAction extends Action = never,\n  UnsubscribeAction extends Action = never\n>(\n  /** Allow to take either config object or project/error functions */\n  configOrProject:\n    | ActConfig<\n        Input,\n        OutputAction,\n        ErrorAction,\n        CompleteAction,\n        UnsubscribeAction\n      >\n    | ((input: Input, index: number) => Observable<OutputAction>),\n  errorFn?: (error: any, input: Input) => ErrorAction\n): (\n  source: Observable<Input>\n) => Observable<\n  OutputAction | ErrorAction | CompleteAction | UnsubscribeAction\n> {\n  const { project, error, complete, operator, unsubscribe } =\n    typeof configOrProject === 'function'\n      ? {\n          project: configOrProject,\n          error: errorFn!,\n          operator: concatMap,\n          complete: undefined,\n          unsubscribe: undefined,\n        }\n      : { ...configOrProject, operator: configOrProject.operator || concatMap };\n\n  type ResultAction =\n    | OutputAction\n    | ErrorAction\n    | CompleteAction\n    | UnsubscribeAction;\n  return source =>\n    defer(\n      (): Observable<ResultAction> => {\n        const subject = new Subject<UnsubscribeAction>();\n        return merge(\n          source.pipe(\n            operator((input, index) =>\n              defer(() => {\n                let completed = false;\n                let errored = false;\n                let projectedCount = 0;\n                return project(input, index).pipe(\n                  materialize(),\n                  map(\n                    (notification): Notification<ResultAction> | undefined => {\n                      switch (notification.kind) {\n                        case 'E':\n                          errored = true;\n                          return new Notification(\n                            // TODO: remove any in RxJS 6.5\n                            'N' as any,\n                            error(notification.error, input)\n                          );\n                        case 'C':\n                          completed = true;\n                          return complete\n                            ? new Notification(\n                                // TODO: remove any in RxJS 6.5\n                                'N' as any,\n                                complete(projectedCount, input)\n                              )\n                            : undefined;\n                        default:\n                          ++projectedCount;\n                          return notification;\n                      }\n                    }\n                  ),\n                  filter((n): n is NonNullable<typeof n> => n != null),\n                  dematerialize(),\n                  finalize(() => {\n                    if (!completed && !errored && unsubscribe) {\n                      subject.next(unsubscribe(projectedCount, input));\n                    }\n                  })\n                );\n              })\n            )\n          ),\n          subject\n        );\n      }\n    );\n}\n","/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {getSourceMetadata as Éµngrx_modules_effects_effects_a} from './src/effects_metadata';\nexport {_provideForRootGuard as Éµngrx_modules_effects_effects_c,createSourceInstances as Éµngrx_modules_effects_effects_b} from './src/effects_module';\nexport {EffectsRunner as Éµngrx_modules_effects_effects_g} from './src/effects_runner';\nexport {FEATURE_EFFECTS as Éµngrx_modules_effects_effects_f,ROOT_EFFECTS as Éµngrx_modules_effects_effects_e,_ROOT_EFFECTS_GUARD as Éµngrx_modules_effects_effects_d} from './src/tokens';"]}