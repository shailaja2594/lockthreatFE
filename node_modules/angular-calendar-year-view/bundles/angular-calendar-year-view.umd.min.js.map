{"version":3,"sources":["ng://angular-calendar-year-view/lib/angular-calendar-year-view.service.ts","ng://angular-calendar-year-view/lib/angular-calendar-year-view.component.ts","ng://angular-calendar-year-view/lib/angular-calendar-year-view.module.ts"],"names":["AngularCalendarYearViewService","Injectable","args","providedIn","clone","(( /** @type {?} */(cloneDeep))).default","cloneDeep","AngularCalendarYearViewComponent","sanitizer","this","themecolor","events","viewDate","Date","nothingToshowText","popoverEnabled","eventClicked","EventEmitter","actionClicked","dayClicked","loader","days","daydetails","year","getFullYear","calendar","spinner","Object","defineProperty","prototype","bypassSecurityTrustStyle","ngOnInit","initCalendar","ngOnChanges","date","index","push","generateCalendar","self","setTimeout","month","monthList","nbweeks","getNbWeeks","dayone","getDay","nbdaysMonth","getDate","lastdayindex","lastday","day","today","toDateString","indexweek","indexday","istoday","colorsEvents","getnbevents","colors","color","nb","dayClickedFn","length","d1","element","start","emit","getTodayEvents","this_1","self_1","secondary","toString","eventClickedFn","event","refresh","actionClickedFn","action","Component","selector","template","DomSanitizer","HostBinding","Input","Output","AngularCalendarYearViewModule","NgModule","declarations","imports","CommonModule","PopoverModule","forRoot","schemas","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularCalendarYearViewService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, HostBinding,TemplateRef } from \"@angular/core\";\nimport * as cloneDeep from \"lodash/cloneDeep\";\nimport { DomSanitizer } from '@angular/platform-browser';\nconst clone: cloneDeep = (<any>cloneDeep).default || cloneDeep\n\n@Component({\n  selector: 'angular-calendar-year-view',\n  template: `\n  <div class=\"calendarcontainer flexmonths\">\n  <div class=\"responsivecontainer\" *ngFor=\"let Month of calendar;let m =index\">\n      <div  class=\"monthcontainer \">\n        <p class=\"monthname\">{{Month.date | date:'MMMM'}}</p>\n        <div class=\"flexdays\">\n          <div class=\"day\" *ngFor=\"let label of days\">\n            {{label | date:'EEEEEE'}}\n          </div>\n        </div>\n        <div *ngFor=\"let week of Month.days\" class=\"flexdays\">\n          <div *ngFor=\"let day of week;let i=index\" [ngClass]=\"day?( day.istoday?'todayclass':(day.nb>0?'haveevents':'')):   'void_day'\"\n            [style.background-image]=\"day? ('linear-gradient(120deg, '+day.colors+',#fff)'):''\" class=\"day\" \n            [outsideClick]=\"true\"\n            [popover]=\"popoverEnabled?(customTemplate?customTemplate:yearcalendarpoptemplate):''\" \n            placement=\"right\" \n            (onShown)=\"dayindex=i;getTodayEvents(day,m)\"\n            (click)=\"dayClickedFn(day,m)\">\n            {{day?.day}}\n          </div>\n        </div>\n      </div>\n  </div>\n</div>\n<div *ngIf=\"spinner\" class=\"calendar-loading\">\n  <svg class=\"spinner\" viewBox=\"25 25 50 50\">\n    <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\" />\n  </svg>\n</div>\n<ng-template #yearcalendarpoptemplate>\n  <div class=\"col-md-12 col-calendar\">\n    <p [ngClass]=\"daydetails.istoday?'todaytext':''\" class=\"pop_year_day\">{{days[dayindex]| date:'EEEEEE'}}.</p>\n    <p [ngClass]=\"daydetails.istoday?'todaytext':''\" class=\"pop_year_day_number\">{{daydetails?.day}} </p>\n    <div *ngIf=\"!loader\">\n      <div *ngFor=\"let event of daydetails.events\">\n          <a   [style.color]=\"event.color.primary+'!importants'\" \n               class=\"icon-action-calendar\" \n               *ngFor='let action of event.actions' \n                [innerHTML]='action.label' \n                (click)=\"actionClickedFn(action.name,event)\"\n                >\n            \n          </a>\n        <div class=\"circle_day_color\" [style.background]=\"event.color.secondary\" [style.border-color]=\"event.color.primary\"></div>\n        <p class=\"pop_year_event_title\" (click)=\"eventClickedFn(event)\">\n          <span>\n            {{event.start| date:'HH:mm'}}\n          </span>\n          {{event.title}}\n        </p>\n        \n      </div>\n    </div>\n    <div class=\"progressbar_popyear\" *ngIf=\"!daydetails.events||(daydetails.events.length==0)&&!loader\">\n     {{nothingToshowText}} \n    </div>\n    <div [hidden]=\"!loader\" class=\"loader_popover_calendar\"></div>\n  </div>\n</ng-template>\n  `,\n  styleUrls: ['./angular-calendar-year-view.scss']\n})\nexport class AngularCalendarYearViewComponent implements OnInit {\n  @HostBinding('style')\n  get style() {\n    return this.sanitizer.bypassSecurityTrustStyle(\n      `--themecolor: ${this.themecolor};`\n    );\n  }\n  @Input()\n  themecolor:any='#ff0000'\n  @Input()\n  events = [];\n\n  @Input()\n  viewDate: Date = new Date();\n  \n  @Input()\n  nothingToshowText: string = \"There are no events scheduled that day.\";\n\n  @Input()\n  popoverEnabled: boolean = true;\n\n  @Input()\n  customTemplate: TemplateRef<any> \n  \n  @Output()\n  eventClicked = new EventEmitter<any>();\n  \n  @Output()\n  actionClicked = new EventEmitter<any>();\n\n  @Output()\n  dayClicked = new EventEmitter<any>();\n\n  loader: any = false;\n  days: any = [new Date(2019,1,3),new Date(2019,1,4),new Date(2019,1,5), new Date(2019,1,6), new Date(2019,1,7), new Date(2019,1,8), new Date(2019,1,9)];\n  dayindex: any;\n  daydetails: any = {};\n  year: any = new Date().getFullYear();\n  calendar: any = [];\n  spinner: any = true;\n  constructor(public sanitizer:DomSanitizer,\n\n  ) { }\n  ngOnInit() {\n    this.initCalendar(this.viewDate);\n  }\n  ngOnChanges() {    \n    this.initCalendar(this.viewDate);\n  }\n  initCalendar(date) {\n    this.year = date.getFullYear();\n    this.calendar = [];\n    this.spinner = true;\n    for (let index = 0; index < 12; index++) {\n      this.calendar.push({\n        date: new Date(this.year, index + 1, 0),\n        days: this.generateCalendar(index + 1, this.year)\n      });\n    }\n    let self = this;\n    setTimeout(() => {\n      self.spinner = false;\n    }, 2000);\n  }\n  generateCalendar(month, year) {\n    let monthList = [];\n    let nbweeks = this.getNbWeeks(month, year);\n    let dayone = new Date(year, month - 1, 1).getDay();\n    let nbdaysMonth = new Date(year, month, 0).getDate();\n    let lastdayindex = new Date(year, month - 1, nbdaysMonth).getDay();\n    let lastday = 7;\n    let day = 1;\n    let today = new Date().toDateString();\n\n    for (let indexweek = 0; indexweek < nbweeks; indexweek++) {\n      monthList[indexweek] = [];\n      if (nbweeks == indexweek + 1) {\n        lastday = lastdayindex + 1;\n      }\n      if (indexweek > 0) {\n        dayone = 0;\n      }\n      for (let indexday = dayone; indexday < lastday; indexday++) {\n        let d1 = new Date(year, month - 1, day).toDateString();\n        let istoday = d1 == today;\n        let colorsEvents = this.getnbevents(day, month - 1)\n        monthList[indexweek][indexday] = {\n          day: day,\n          istoday: istoday,\n          colors: colorsEvents.color,\n          events: [],\n          nb: colorsEvents.nb\n        };\n        day++;\n      }\n    }\n\n    return monthList;\n  }\n  getNbWeeks(month, year) {\n    let dayone = new Date(year, month - 1, 1).getDay();\n    let nbdaysMonth = new Date(year, month, 0).getDate();\n    let lastday = new Date(year, month - 1, nbdaysMonth).getDay();\n    return (nbdaysMonth + dayone + (6 - lastday)) / 7;\n  }\n  dayClickedFn(day, month){\n   let date =  new Date(this.year, month, day.day)\n   this.daydetails = {events:[]}\n\n   if (this.events.length > 0) {\n     this.loader = true;\n     this.daydetails = clone(day);\n     let d1 = new Date(this.year, month, day.day).toDateString();\n     for (let index = 0; index < this.events.length; index++) {\n       const element = this.events[index];\n       let d2 = element.start.toDateString();\n       if (d2 == d1) {\n         this.daydetails.events.push(element);\n       }\n     }\n   }\n   this.dayClicked.emit({date:date,events:this.daydetails.events})\n  }\n  getTodayEvents(day, month) {\n    this.daydetails = {}\n\n    if (this.events.length > 0) {\n      this.loader = true;\n      this.daydetails = clone(day);\n      let d1 = new Date(this.year, month, day.day).toDateString();\n\n      for (let index = 0; index < this.events.length; index++) {\n        const element = this.events[index];\n        let d2 = element.start.toDateString();\n        if (d2 == d1) {\n          this.daydetails.events.push(element);\n        }\n        if (index == this.events.length - 1) {\n          let self = this;\n          setTimeout(() => {\n            self.loader = false;\n          }, 1000);\n        }\n\n      }\n    }\n  }\n  getnbevents(day, month) {\n    let nb = 0;\n    let colors = []\n    if (this.events.length > 0) {\n      let d1 = new Date(this.year, month, day).toDateString();\n      for (let index = 0; index < this.events.length; index++) {\n        const element = this.events[index];\n        let d2 = element.start.toDateString();\n        if (d2 == d1) {\n          nb++;\n          colors.push(element.color.secondary)\n        }\n      }\n      return ({ nb: nb, color: colors.toString() })\n    } else {\n      return { color: \"\", nb: 0 }\n    }\n  }\n  eventClickedFn(event) {\n    this.eventClicked.emit(event);\n  }\n  refresh(date) {\n    this.initCalendar(date);\n  }\n  actionClickedFn(action,event?){\n       this.actionClicked.emit({action:action,event:event})\n  }\n\n}\n","import { NgModule  , } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AngularCalendarYearViewComponent } from './angular-calendar-year-view.component';\nimport { PopoverModule } from \"ngx-bootstrap/popover\";\n\n@NgModule({\n  declarations: [AngularCalendarYearViewComponent],\n  imports: [\n    CommonModule,\n    PopoverModule.forRoot()\n  ],\n  schemas:[],\n  exports: [AngularCalendarYearViewComponent]\n})\nexport class AngularCalendarYearViewModule { }\n"]}